(window.webpackJsonpsheetforge=window.webpackJsonpsheetforge||[]).push([[7],{Ifcy:function(e,a,n){"use strict";n.r(a);var t=n("y9tM"),l=n.n(t),o=n("cDcd"),m=n.n(o),r=n("6qfE"),p=n("mcpE"),c=n("YeEv"),i=n("ITKj"),s=n("YFLu"),d=n("gtIf"),h=n("+bV0");a.default=function(e){var a=e.components,n=l()(e,["components"]);return m.a.createElement(r.MDXTag,{name:"wrapper",components:a},m.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"health-bar-component"}},"Health Bar Component"),m.a.createElement(r.MDXTag,{name:"p",components:a},"The ",m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Character")," model supports two different types of health. Simple numeric health (hitpoints) are best represented with the ",m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Attribute")," component. For systems which have more complex health models, however, ",m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"HealthBar")," is used to manage each ",m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"HealthLevel"),"'s level of damage independently."),m.a.createElement(r.MDXTag,{name:"p",components:a},"Each ",m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"HealthLevel")," allows one of four possible settings for its ",m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"damage")," property:"),m.a.createElement(r.MDXTag,{name:"ul",components:a},m.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"'none'")," means ",m.a.createElement(r.MDXTag,{name:"em",components:a,parentName:"li"},"uninjured")),m.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"'light'")," indicates bruising or superficial damage"),m.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"'heavy'")," indicates lascerations, broken bones, or deep flesh wounds"),m.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},m.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"'bane'")," indicates supernatural or otherwise difficult-to-heal damage")),m.a.createElement(p.Playground,{__position:0,__codesandbox:"undefined",__code:"{() => {\n  const HealthBarModel = CollectionOf(HealthLevel)\n  const health = HealthBarModel.create([\n    { name: 'Healthy', damage: 'bane' },\n    { name: 'Bruised', damage: 'heavy', penalty: -1 },\n    { name: 'Injured', damage: 'light', penalty: -2 },\n    { name: 'Crippled', damage: 'none', penalty: -3 },\n    { name: 'Incapacitated', penalty: -5 },\n  ])\n  return (\n    <>\n      <h2>Rendered Vertically</h2>\n      <HealthBar model={health} vertical />\n      <h2>Rendered Horizontally</h2>\n      <HealthBar model={health} />\n    </>\n  )\n}}",__scope:{props:n,types:c.types,CharacterModel:i.a,CollectionOf:s.a,HealthBar:d.a,HealthLevel:h.a}},function(){var e=Object(s.a)(h.a).create([{name:"Healthy",damage:"bane"},{name:"Bruised",damage:"heavy",penalty:-1},{name:"Injured",damage:"light",penalty:-2},{name:"Crippled",damage:"none",penalty:-3},{name:"Incapacitated",penalty:-5}]);return m.a.createElement(m.a.Fragment,null,m.a.createElement("h2",null,"Rendered Vertically"),m.a.createElement(d.a,{model:e,vertical:!0}),m.a.createElement("h2",null,"Rendered Horizontally"),m.a.createElement(d.a,{model:e}))}))}}}]);
//# sourceMappingURL=components-health-bar-health-bar.c2d359fee8dc6293da88.js.map