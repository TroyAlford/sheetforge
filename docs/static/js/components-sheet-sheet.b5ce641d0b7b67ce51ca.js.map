{"version":3,"sources":["webpack://sheetforge/./source/models/Layout/Layout.js","webpack://sheetforge/./source/models/types/between.js","webpack://sheetforge/./source/components/index.js","webpack://sheetforge/./source/components/Conditions/Conditions.js","webpack://sheetforge/./source/components/Layout/Layout.js","webpack://sheetforge/./source/models/index.js","webpack://sheetforge/./source/components/Sheet/Sheet.js","webpack://sheetforge/./source/components/Sheet/Sheet.mdx"],"names":["Layout","mobx_state_tree","compose","IIdentity","IEditable","model","children","CollectionOf","late","Layout_Layout","colSpan","min","max","defaultTo","arguments","length","undefined","optional","refinement","types","number","n","between","title","string","type","actions","self","columns","math","toConsumableArray_default","map","c","named","models_Layout_Layout","source_components","Attribute","Descriptor","Effect","Health","HealthBar","Item","Resource","Skill","Spell","Trait","observer","_temp","_class","_Component","Conditions","_getPrototypeOf2","_this","classCallCheck_default","this","_len","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","call","apply","concat","defineProperty_default","assertThisInitialized_default","availableConditions","props","conditions","asArray","JSON","CACHE","forceUpdate","condition","value","delete","isCurrent","react_default","a","createElement","key","className","Editable","onChange","handleCheckbox","inherits_default","createClass_default","onSnapshotDisposer","onSnapshot","handleSnapshot","Expandable","renderCondition","react","React","noop","set","_this2","snapshot","snapshotJSON","_this$props$model","_this$props$model$tit","style","flex","ref","titleBar","handleChangeTitle","placeholder","expandByDefault","omitItemWrapper","toggleButtonParent","current","Component","models","Attribute_Attribute","Descriptor_Descriptor","Effect_Effect","HealthLevel","Item_Item","Resource_Resource","Skill_Skill","Spell_Spell","components_Sheet_Sheet","Sheet","size","window","matches","state","setState","typename","toLowerCase","List","ListOf","components","collection","character","extends_default","Layout_Layout_Layout","hash","renderComponent","onCharacterSnapshotDisposer","layout","toJSON","onLayoutSnapshotDisposer","handleWindowResize","onMount","_this$props","components_Conditions_Conditions","__webpack_exports__","_ref","objectWithoutProperties_default","dist","name","id","create","Character","localStorage","setItem","stringify","getItem","parse"],"mappings":"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","file":"static/js/components-sheet-sheet.4ac77339.js","sourcesContent":["import { types } from 'mobx-state-tree'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport between from '@/models/types/between'\nimport math from '@/utilities/math'\n\nconst Layout = types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    children: CollectionOf(types.late(() => Layout)),\n    colSpan: between(1, 4, 1),\n    title: types.maybe(types.string),\n    type: types.maybe(types.string),\n  }).actions(self => ({\n    /* eslint-disable no-param-reassign */\n\n    columns() {\n      return math.sum(...self.children.map(c => c.colSpan))\n    },\n\n    /* eslint-enable no-param-reassign */\n  }))\n).named('Layout')\n\nexport default Layout\n\n// RULES\n// - Anything INSIDE a section that is NOT a section is 100% width\n// - A section which has a colSpan passes it down as `columns` to its children\n// - A section with a `list` property assumes component/model name match\n\n// [\n//   { type: 'Section', title: 'Descriptors', children: [\n//     { type: 'Descriptor', list: true, path: 'descriptors' },\n//   ] },\n//   { type: 'Section', title: 'Attributes', children: [\n//     { type: 'Attribute', list: true, path: 'attributes' },\n//     { type: 'HealthBar', path: 'health' },\n//   ] },\n//   { type: 'Row', children: [\n//     { type: 'Column', flex: 1, children: [\n//       { type: 'Section', title: 'Traits', children: [\n//         { type: 'Trait', list: true, path: 'traits' },\n//       ] },\n//       { type: 'Section', title: 'Resources', children: [\n//         { type: 'Resource', list: true, path: 'resources' },\n//       ] },\n//     ] },\n//     { type: 'Column', flex: 2, title: 'Skills', children: [\n//       { type: 'Section', title: 'Skills', children: [\n//         { type: 'Skill', list: true, path: 'skills' },\n//       ] },\n//       { type: 'Section', title: 'Inventory', children: [\n//         { type: 'Item', list: true, path: 'items' },\n//       ] },\n//       { type: 'Section', title: 'Spellbook', children: [\n//         { type: 'Spell', list: true, path: 'spells' },\n//       ] }\n//     ] },\n//   ] }\n// ]\n","import { types } from 'mobx-state-tree'\n\nexport default (min, max, defaultTo = min) => (\n  types.optional(\n    types.refinement(\n      types.number,\n      n => n === undefined || (n >= min && n <= max)\n    ),\n    defaultTo\n  )\n)\n","import Attribute from '@/components/Attribute'\nimport Descriptor from '@/components/Descriptor'\nimport Effect from '@/components/Effect'\nimport Health from '@/components/HealthBar'\nimport Item from '@/components/Item'\nimport Resource from '@/components/Resource'\nimport Skill from '@/components/Skill'\nimport Spell from '@/components/Spell'\nimport Trait from '@/components/Trait'\n\nexport default {\n  Attribute,\n  Descriptor,\n  Effect,\n  Health,\n  Item,\n  Resource,\n  Skill,\n  Spell,\n  Trait,\n}\n","import { observer } from 'mobx-react'\nimport { onSnapshot } from 'mobx-state-tree'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport Expandable from '@/components/Expandable'\nimport './Conditions.scss'\n\nexport default observer(class Conditions extends Component {\n  static defaultProps = {\n    model: {},\n  }\n\n  CACHE = {}\n\n  componentDidMount() {\n    this.onSnapshotDisposer = onSnapshot(this.props.model, this.handleSnapshot)\n  }\n\n  componentWillUnmount() {\n    this.onSnapshotDisposer()\n  }\n\n  handleSnapshot = () => {\n    const availableConditions = this.props.model.availableConditions()\n    const conditions = this.props.model.conditions.asArray\n\n    if (\n      JSON.stringify(availableConditions) !== JSON.stringify(this.CACHE.availableConditions) ||\n      JSON.stringify(conditions) !== JSON.stringify(this.CACHE.conditions)\n    ) {\n      this.CACHE.availableConditions = availableConditions\n      this.CACHE.conditions = conditions\n      this.forceUpdate()\n    }\n  }\n\n  handleCheckbox = (condition, value) => {\n    const { conditions } = this.props.model\n\n    if (value && !conditions.includes(condition)) {\n      conditions.push(condition)\n    } else if (typeof conditions.delete === 'function') {\n      conditions.delete(condition)\n    } else {\n      conditions.splice(conditions.indexOf(condition), 1)\n    }\n    this.forceUpdate()\n  }\n\n  renderCondition = (condition) => {\n    const { conditions } = this.props.model\n    const isCurrent = conditions.includes(condition)\n    return (\n      <div key={condition} className={`condition ${isCurrent ? 'current' : 'available'}`}>\n        <Editable\n          className=\"current\"\n          onChange={value => this.handleCheckbox(condition, value)}\n          value={isCurrent}\n        />\n        <div className=\"name\">{condition}</div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"conditions\">\n        <Expandable>\n          {this.props.model.availableConditions().map(this.renderCondition)}\n        </Expandable>\n      </div>\n    )\n  }\n})\n","import { onSnapshot } from 'mobx-state-tree'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport Expandable from '@/components/Expandable'\nimport noop from '@/utilities/noop'\nimport './Layout.scss'\n\nexport default class Layout extends Component {\n  titleBar = React.createRef()\n\n  onSnapshotDisposer = noop\n  snapshot = null\n\n  componentDidMount() {\n    this.onSnapshotDisposer = onSnapshot(this.props.model, (snapshot) => {\n      const snapshotJSON = JSON.stringify(snapshot)\n      if (this.snapshot !== snapshotJSON) {\n        this.snapshot = snapshotJSON\n        this.forceUpdate()\n      }\n    })\n    this.forceUpdate() // Immediate redraw to place buttonParent\n  }\n  componentWillUnmount() { this.onSnapshotDisposer() }\n\n  handleChangeTitle = title => this.props.model.set({ title })\n\n  render() {\n    const { children } = this.props\n    const { colSpan, title = '' } = this.props.model\n\n    return (\n      <div className=\"layout\" style={{ flex: colSpan }}>\n        <div className=\"title-bar\" ref={this.titleBar}>\n          <Editable\n            className=\"title\"\n            onChange={this.handleChangeTitle}\n            placeholder=\"Section Title\"\n            value={title}\n          />\n        </div>\n        <Expandable\n          expandByDefault\n          omitItemWrapper\n          toggleButtonParent={this.titleBar.current}\n        >\n          {children}\n        </Expandable>\n      </div>\n    )\n  }\n}\n","import Attribute from '@/models/Attribute'\nimport Descriptor from '@/models/Descriptor'\nimport Effect from '@/models/Effect'\nimport HealthLevel from '@/models/HealthLevel'\nimport Item from '@/models/Item'\nimport Resource from '@/models/Resource'\nimport Skill from '@/models/Skill'\nimport Spell from '@/models/Spell'\nimport Trait from '@/models/Trait'\n\nexport default {\n  Attribute,\n  Descriptor,\n  Effect,\n  HealthLevel,\n  Item,\n  Resource,\n  Skill,\n  Spell,\n  Trait,\n}\n","import { observer } from 'mobx-react'\nimport { onSnapshot } from 'mobx-state-tree'\nimport React from 'react'\nimport components from '@/components'\nimport Conditions from '@/components/Conditions'\nimport Layout from '@/components/Layout'\nimport ListOf from '@/components/List'\nimport models from '@/models'\nimport noop from '@/utilities/noop'\nimport './Sheet.scss'\n\n@observer class Sheet extends React.Component {\n  static defaultProps = {\n    character: {},\n    onChange: noop,\n    onMount: noop,\n  }\n\n  state = { size: 'large' }\n\n  constructor(props) {\n    super(props)\n    this.onCharacterSnapshotDisposer = onSnapshot(this.props.character, (snapshot) => {\n      this.props.onChange(snapshot, this.props.layout.toJSON(), this)\n      this.forceUpdate()\n    })\n    this.onLayoutSnapshotDisposer = onSnapshot(this.props.layout, (snapshot) => {\n      this.props.onChange(this.props.character.toJSON(), snapshot, this)\n      this.forceUpdate()\n    })\n    window.addEventListener('resize', this.handleWindowResize)\n  }\n  componentDidMount() {\n    this.handleWindowResize()\n    this.props.onMount(this)\n  }\n  componentWillUnmount() {\n    this.onCharacterSnapshotDisposer()\n    this.onLayoutSnapshotDisposer()\n  }\n\n  handleWindowResize = () => {\n    let size = 'large'\n    if (window.matchMedia('(min-width: 5in) and (max-width: 7.5in)').matches) {\n      size = 'medium'\n    } else if (window.matchMedia('(max-width: 5in)').matches) {\n      size = 'small'\n    }\n    if (size !== this.state.size) this.setState({ size })\n  }\n\n  renderComponent = (model, key) => {\n    if (model.type) {\n      const { title } = model\n      const typename = model.type.toLowerCase()\n      const List = ListOf(\n        models[model.type],\n        components[model.type],\n        { className: `${typename}-list` }\n      )\n      const collection = this.props.character[`${typename}s`]\n\n      return <List collection={collection} {...{ key, title }} />\n    }\n\n    return (\n      <Layout key={model.hash} model={model}>\n        {model.children.map(this.renderComponent)}\n      </Layout>\n    )\n  }\n\n  render() {\n    const { character, layout } = this.props\n    const { size } = this.state\n\n    return (\n      <div className={`sheetforge sheet ${size}`}>\n        <Conditions model={character} />\n        {layout.children.map(this.renderComponent)}\n      </div>\n    )\n  }\n}\n\nexport default Sheet\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from 'docz'\nimport { types } from 'mobx-state-tree'\nimport Character from '@/models/Character'\nimport Layout from '@/models/Layout'\nimport Sheet from '@/components/Sheet'\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"character-sheet\"}}>{`Character Sheet`}</MDXTag>\n<Sheet\n  layout={Layout.create({\n    children: [\n      { children: [{ type: 'Descriptor' }] },\n      { children: [{ type: 'Attribute' }] },\n      { children: [\n        { colSpan: 1, children: [{ type: 'Trait' }, { type: 'Resource' }] },\n        { colSpan: 2, children: [{ type: 'Skill' }, { type: 'Item' }, { type: 'Spell' }] },\n      ] },\n    ]\n  })}\n  character={Character.create({})}\n  onChange={(character, layout) => {\n    localStorage.setItem('sf-character', JSON.stringify(character))\n    localStorage.setItem('sf-layout', JSON.stringify(layout))\n  }}\n  onMount={(self) => {\n    const character = localStorage.getItem('sf-character')\n    if (character) { self.props.character.set(JSON.parse(character)) }\n  }}\n/></MDXTag>\n  "],"sourceRoot":""}