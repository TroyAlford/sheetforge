{"version":3,"sources":["webpack://sheetforge/webpack/universalModuleDefinition","webpack://sheetforge/./source/index.js","webpack://sheetforge/./source/models/Descriptor/Descriptor.js","webpack://sheetforge/./source/models/Item/Item.js","webpack://sheetforge/./source/utilities/unique.js","webpack://sheetforge/./source/utilities/findParent.js","webpack://sheetforge/./source/models/Effect/Effect.js","webpack://sheetforge/./source/models/Character/Character.js","webpack://sheetforge/./source/utilities/flatten.js","webpack://sheetforge/./source/models/ResourceCost/ResourceCost.js","webpack://sheetforge/./source/models/Spell/Spell.js","webpack://sheetforge/./source/utilities/splitObjectPath.js","webpack://sheetforge/./source/utilities/getPathValue.js","webpack://sheetforge/./source/models/generic/IEditable/IEditable.js","webpack://sheetforge/./source/utilities/setPathValue.js","webpack://sheetforge/./source/models/generic/Collection/Collection.js","webpack://sheetforge/./source/utilities/compareBy.js","webpack://sheetforge/./source/models/Resource/Resource.js","webpack://sheetforge/./source/models/Trait/Trait.js","webpack://sheetforge/./source/utilities/hash.js","webpack://sheetforge/./source/models/generic/IIdentity/IIdentity.js","webpack://sheetforge/./source/utilities/math/math.js","webpack://sheetforge/./source/utilities/math/toSymbols.js","webpack://sheetforge/./source/models/Attribute/Attribute.js","webpack://sheetforge/./source/utilities/math/calculate.js","webpack://sheetforge/./source/models/generic/ICategorizable/ICategorizable.js","webpack://sheetforge/./source/models/Skill/Skill.js","webpack://sheetforge/./source/utilities/noop.js"],"names":["root","factory","exports","module","define","amd","window","__webpack_require__","r","__webpack_exports__","_models_Character__WEBPACK_IMPORTED_MODULE_0__","mobx_state_tree__WEBPACK_IMPORTED_MODULE_0__","_models_generic_ICategorizable__WEBPACK_IMPORTED_MODULE_1__","_models_generic_IEditable__WEBPACK_IMPORTED_MODULE_2__","_models_generic_IIdentity__WEBPACK_IMPORTED_MODULE_3__","compose","ICategorizable","model","name","value","named","_models_Effect__WEBPACK_IMPORTED_MODULE_1__","_models_generic_Collection__WEBPACK_IMPORTED_MODULE_2__","_models_generic_ICategorizable__WEBPACK_IMPORTED_MODULE_3__","_models_generic_IEditable__WEBPACK_IMPORTED_MODULE_4__","_models_generic_IIdentity__WEBPACK_IMPORTED_MODULE_5__","description","effects","CollectionOf","equipped","arguments","length","undefined","filter","item","index","all","child","filterFunction","Boolean","hasParent","parent","getParent","_models_Attribute__WEBPACK_IMPORTED_MODULE_1__","_models_generic_IEditable__WEBPACK_IMPORTED_MODULE_3__","_models_generic_IIdentity__WEBPACK_IMPORTED_MODULE_4__","_utilities_findParent__WEBPACK_IMPORTED_MODULE_5__","condition","modifier","targetId","actions","self","afterAttach","available","character","attributes","findParent","p","isCharacter","isApplicable","source","Object","sourceName","target","mobx_state_tree","IIdentity","IEditable","Attribute","conditions","types","string","descriptors","Descriptor","experience","items","Item","resources","Resource","skills","Skill","spells","Spell","traits","Trait","volatile","activeEffects","effect","availableConditions","map","e","concat","asArray","sort","i","flatten","array","depth","Infinity","Array","TypeError","JSON","reduce","next","trait","values","spell","isActive","_models_generic_Collection__WEBPACK_IMPORTED_MODULE_1__","_models_Resource__WEBPACK_IMPORTED_MODULE_4__","amount","resourceName","views","resource","_models_ResourceCost__WEBPACK_IMPORTED_MODULE_6__","_utilities_findParent__WEBPACK_IMPORTED_MODULE_7__","level","costs","cast","isAffordable","cost","current","every","PATH_SPLITTER","splitObjectPath","path","getPathValue","object","split","property","pop","o","key","isIEditable","savedVersion","isDirty","deepEqual","toJSON","afterCreate","isPathDirty","initial","markAsClean","isObservableArray","reset","set","setPathValue","typeof_default","TYPE","options","TypedArrayWrapper","slice","first","last","at","n","clear","delete","deleteAt","_","fn","find","findBy","findById","id","identifierAttribute","forEach","includes","searchElement","fromIndex","indexOf","element","insert","push","_len","_key","replace","shift","start","end","some","sortBy","direction","prop","reversed","objectA","objectB","a","String","b","compareBy","splice","deleteCount","toObject","keyProp","valueProp","entry","objectSpread_default","defineProperty_default","unshift","_len2","_key2","postProcessSnapshot","_ref","custom","fromSnapshot","snapshot","create","getValidationMessage","f","isTargetType","maximum","randomHash","radix","h","char","Math","hash","toString","mathjs_core__WEBPACK_IMPORTED_MODULE_0__","math","core","require","toSymbols","expression","symbols","node","modifiedValue","raw","isComputed","computing","sum","modifierText","join","computed","symbol","attribute","data","defaultSymbolValue","safeData","calculate","error","process","preProcessSnapshot","objectWithoutProperties_default","_ref2","_utilities_noop__WEBPACK_IMPORTED_MODULE_1__","_utilities_unique__WEBPACK_IMPORTED_MODULE_2__","getValue","isICategorizable","getCategories","categories","unique","category","trim","lastUsedName","categoryValue","mastery","theory","isComplex","isSimple"],"mappings":"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","file":"static/js/production.2f87bd66.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sheetforge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sheetforge\"] = factory();\n\telse\n\t\troot[\"sheetforge\"] = factory();\n})(window, function() {\nreturn ","import Character from '@/models/Character'\nimport '@fontello/css/sheetforge-embedded'\n\nexport default Character\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(),\n  IEditable,\n  types.model({\n    name: 'New Descriptor...',\n    value: '',\n  })\n).named('Descriptor')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(),\n  IEditable,\n  types.model({\n    description: '',\n    effects: CollectionOf(Effect),\n    equipped: false,\n    name: 'New Item...',\n  }),\n).named('Item')\n","export default (array = []) => (\n  array.filter((item, index, all) => all.indexOf(item) === index)\n)\n","import { getParent, hasParent } from 'mobx-state-tree'\n\nexport default (child, filterFunction = Boolean) => {\n  if (!hasParent(child)) { return null }\n\n  let parent = getParent(child)\n  while (parent) {\n    if (filterFunction(parent)) {\n      return parent\n    }\n\n    if (!hasParent(parent)) { return null }\n    parent = getParent(parent)\n  }\n\n  return null\n}\n","import { types } from 'mobx-state-tree'\nimport Attribute from '@/models/Attribute'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    condition: '',\n    modifier: 0,\n    targetId: '',\n  }).actions(self => ({\n    afterAttach() {\n      if (!self.targetId && self.available().length) {\n        // eslint-disable-next-line no-param-reassign\n        self.targetId = self.available().first.id\n      }\n    },\n\n    available() {\n      const character = self.character()\n      return character ? character.attributes : CollectionOf(Attribute).create([])\n    },\n    character() { return findParent(self, p => p.isCharacter) },\n    isApplicable() {\n      const character = self.character()\n      return Boolean(\n        !self.condition ||\n        (character && character.conditions.includes(self.condition))\n      )\n    },\n    source() { return findParent(self, p => p.name) || null },\n    sourceName() { return self.source() ? self.source().name : 'Unknown' },\n    target() {\n      const character = self.character()\n      return character ? character.attributes.findBy('name', self.targetId) : null\n    },\n  }))\n).named('Effect')\n","import { types } from 'mobx-state-tree'\nimport Attribute from '@/models/Attribute'\nimport Descriptor from '@/models/Descriptor'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport Item from '@/models/Item'\nimport Resource from '@/models/Resource'\nimport Skill from '@/models/Skill'\nimport Spell from '@/models/Spell'\nimport Trait from '@/models/Trait'\nimport flatten from '@/utilities/flatten'\n\nexport default types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    attributes: CollectionOf(Attribute),\n    conditions: CollectionOf(types.string), // ['vs Goblins', 'Crinos Form']\n    descriptors: CollectionOf(Descriptor),\n    experience: 0,\n    items: CollectionOf(Item), // equipped / unequipped, have Effects\n    resources: CollectionOf(Resource),\n    skills: CollectionOf(Skill),\n    spells: CollectionOf(Spell),\n    traits: CollectionOf(Trait), // have Effects\n  }).volatile(() => ({\n    isCharacter: true,\n  })).actions(self => ({\n    activeEffects() {\n      return self.effects().filter(effect => effect && effect.isApplicable())\n    },\n    availableConditions() {\n      return self.effects()\n        .map(e => e.condition).concat(self.conditions.asArray)\n        .sort()\n        .filter((effect, i, all) => !i || effect !== all[i - 1])\n        .filter(Boolean)\n    },\n    effects() {\n      return flatten([\n        // Trait Effects first, because they're inherent\n        self.traits.filter(Boolean).map(trait => trait.effects.values),\n        // Direct Effects second, because they're cast on the character\n        self.spells.filter(spell => spell.isActive).map(spell => spell.effects.values),\n        // Item Effects third, because they're indirect\n        self.items.filter(item => item.equipped).map(item => item.effects.values),\n      ]).filter(Boolean)\n    },\n  }))\n).named('Character')\n","export default function flatten(array, depth = Infinity) {\n  if (!array || !Array.isArray(array)) {\n    throw new TypeError(`cannot flatten non-Array value ${JSON.stringify(array)}`)\n  }\n\n  return array.reduce((all, next) => {\n    if (depth > 1 && next && Array.isArray(next)) {\n      return all.concat(flatten(next, depth - 1))\n    }\n\n    return all.concat(next)\n  }, [])\n}\n","import { types } from 'mobx-state-tree'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport Resource from '@/models/Resource'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    amount: 0,\n    resourceName: '',\n  }).views(self => ({\n    get available() {\n      return self.character ? self.character.resources : CollectionOf(Resource).create([])\n    },\n    get character() { return findParent(self, p => p.isCharacter) },\n  })).actions(self => ({\n    afterAttach() {\n      if (!self.resourceName && self.available.length) {\n        // eslint-disable-next-line no-param-reassign\n        self.resourceName = self.available.first.name\n      }\n    },\n    resource() {\n      if (!self.character) return null\n      return self.character.resources.findBy('name', self.resourceName)\n    },\n  }))\n).named('Cost')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport ResourceCost from '@/models/ResourceCost'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.level),\n  IEditable,\n  types.model({\n    costs: CollectionOf(ResourceCost), // Resources\n    description: '',\n    effects: CollectionOf(Effect),\n    isActive: false,\n    level: 0,\n    name: 'New Spell...',\n  }).views(self => ({\n    get character() { return findParent(self, p => p.isCharacter) },\n  })).actions(self => ({\n    cast() {\n      if (self.isAffordable()) {\n        self.costs.forEach((cost) => {\n          const resource = cost.resource()\n          resource.set({ current: resource.current - cost.amount })\n        })\n      }\n    },\n    isAffordable() {\n      if (!self.character || !self.costs.length) return true\n      return self.costs.every(cost => (\n        cost.resource() && cost.resource().current >= cost.amount\n      ))\n    },\n  }))\n).named('Spell')\n","const PATH_SPLITTER = /([a-z0-9-_]+)(?![[\"'\\].])*/ig\n\nexport default (path) => {\n  if (typeof path !== 'string') return null\n  return path.match(PATH_SPLITTER)\n}\n","import splitObjectPath from '@/utilities/splitObjectPath'\n\nexport default (object, path) => {\n  if (typeof path !== 'string') return undefined\n\n  const split = splitObjectPath(path)\n\n  if (!Array.isArray(split)) return undefined\n\n  const property = split.pop()\n  const target = split.reduce((o, key) => o[key] || {}, object)\n\n  if (target) return target[property]\n  return undefined\n}\n","import deepEqual from 'deep-equal'\nimport { isObservableArray } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport getPathValue from '@/utilities/getPathValue'\nimport setPathValue from '@/utilities/setPathValue'\n\nconst IEditable = types.model('IEditable', {\n  // Any\n}).volatile(() => ({\n  isIEditable: true,\n  savedVersion: {},\n})).views(self => ({\n  get isDirty() { return !deepEqual(self.toJSON(), self.savedVersion) },\n})).actions(self => ({\n  /* eslint-disable no-param-reassign */\n\n  afterCreate() { self.savedVersion = self.toJSON() },\n  isPathDirty: (path) => {\n    const current = getPathValue(self.toJSON(), path)\n    const initial = getPathValue(self.savedVersion, path)\n    return !deepEqual(current, initial)\n  },\n  markAsClean() {\n    self.savedVersion = self.toJSON()\n\n    Object.keys(self.savedVersion).forEach((key) => {\n      const value = self[key]\n      if (!value) { return }\n\n      if (value.isIEditable) {\n        value.markAsClean()\n      } else if (isObservableArray(value)) {\n        value.forEach(child => (child && child.isIEditable && child.markAsClean()))\n      }\n    })\n  },\n  reset() { Object.assign(self, self.savedVersion) },\n  set(key = {}, value = undefined) {\n    if (typeof key === 'string' && value !== undefined) {\n      // allows: model.set('foo.bar', 'bar')\n      if (self[key] !== undefined) {\n        self[key] = value\n      } else {\n        setPathValue(self, key, value)\n      }\n    } else if (typeof key === 'object' && value === undefined) {\n      // allows: model.set({ foo: 'Foo', bar: 'Bar' })\n      Object.assign(self, key)\n    }\n  },\n\n  /* eslint-enable no-param-reassign */\n}))\n\nexport default IEditable\n","import splitObjectPath from '@/utilities/splitObjectPath'\n\nexport default (object, path, value) => {\n  const split = splitObjectPath(path)\n  const property = split.pop()\n  const target = split.reduce((o, key) => o[key] || {}, object)\n\n  if (target && target.isIEditable) {\n    target.set(property, value)\n  } else {\n    target[property] = value\n  }\n}\n","import { isObservableArray } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport compareBy from '@/utilities/compareBy'\n\nexport default (TYPE, options = {}) => {\n  const TypedArrayWrapper = types.model({\n    values: types.array(TYPE),\n  }).views(self => ({\n    get asArray() { return self.values.slice() },\n    get first() { return self.length ? self.at(0) : undefined },\n    get last() { return self.length ? self.at(self.length - 1) : undefined },\n    get length() { return self.values.length },\n  })).actions(self => ({\n    /* eslint-disable no-param-reassign */\n\n    at: n => self.values[n],\n    clear: () => self.values.clear(),\n    delete: (object) => { self.values.replace(self.values.filter(item => item !== object)) },\n    deleteAt: (index) => { self.values.replace(self.values.filter((_, n) => n !== index)) },\n    every: fn => self.values.every(fn),\n    filter: fn => self.values.filter(fn),\n    find: fn => self.values.find(fn),\n    findBy: (key, value) => self.find(item => item[key] === value),\n    findById: (id) => {\n      if (!TYPE.identifierAttribute) return null\n      return self.find(item => item[TYPE.identifierAttribute] === id) || null\n    },\n    forEach: fn => self.values.forEach(fn),\n    includes: (searchElement, fromIndex) => self.values.includes(searchElement, fromIndex),\n    indexOf: element => self.values.indexOf(element),\n    insert: (object, index) => self.splice(index, 0, object),\n    map: fn => self.values.map(fn),\n    pop: () => self.values.pop(),\n    push: (...values) => self.values.replace([].concat(self.values, values)),\n    reduce: (fn, initial) => self.values.reduce(fn, initial),\n    replace: values => self.values.replace(values),\n    shift: () => self.values.shift(),\n    slice: (start, end) => self.values.slice(start, end),\n    some: fn => self.values.some(fn),\n    sortBy: (property, direction = 'asc') => {\n      if (!['asc', 'desc'].includes(direction)) {\n        throw new TypeError(`direction must be \"asc\" or \"desc\", got: \"${direction}\"`)\n      }\n      const values = self.values.slice().sort(compareBy(property))\n      self.values.replace(direction === 'desc' ? values.reverse() : values)\n      return self\n    },\n    splice: (index, deleteCount, value) => self.values.splice(index, deleteCount, value),\n    toObject: (keyProp, valueProp) => self.values.reduce((object, entry) => {\n      const key = entry[keyProp]\n      const value = valueProp !== undefined ? entry[valueProp] : entry\n      return { ...object, [key]: typeof value === 'function' ? value() : value }\n    }, {}),\n    unshift: (...values) => self.values.replace([].concat(values, self.values)),\n\n    /* eslint-enable no-param-reassign */\n  })).postProcessSnapshot(({ values }) => values)\n\n  return types.custom({\n    ...options,\n    fromSnapshot: (snapshot = []) => TypedArrayWrapper.create({ values: snapshot }),\n    getValidationMessage: (snapshot) => {\n      if (!snapshot) return ''\n      if (isObservableArray(snapshot) || Array.isArray(snapshot)) {\n        if (snapshot.every(f => TYPE.is(f))) return ''\n      }\n\n      return 'Collection types must be assigned an array of values or null'\n    },\n    isTargetType: target => TypedArrayWrapper.is(target),\n    name: options.name || 'Collection',\n  })\n}\n","export default (prop, reversed = false) => (objectA, objectB) => {\n  const a = String(objectA instanceof Map ? objectA.get(prop) : objectA[prop])\n  const b = String(objectB instanceof Map ? objectB.get(prop) : objectB[prop])\n\n  if (reversed) return b.localeCompare(a)\n  return a.localeCompare(b)\n}\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(),\n  IEditable,\n  types.model({\n    current: 0,\n    maximum: 10,\n    name: 'New Resource...',\n  })\n).named('Resource')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.value),\n  IEditable,\n  types.model('Trait', {\n    effects: CollectionOf(Effect),\n    name: 'New Trait...',\n    value: 0,\n  })\n).named('Trait')\n","export default function hash(value = '', radix = 16) {\n  const string = String(value)\n  let h = 0\n  string.split('').forEach((char) => {\n    /* eslint-disable no-bitwise */\n    h = ((h << 5) - h) + char.charCodeAt(0)\n    h &= h // Convert to 32-bit integer\n    /* eslint-enable no-bitwise */\n  })\n  return Math.abs(h).toString(radix)\n}\n\nexport const randomHash = () => hash(Math.random().toString())\n","import { types } from 'mobx-state-tree'\nimport { randomHash } from '@/utilities/hash'\n\nexport default types.model({\n  // Nothing\n}).volatile(() => ({\n  hash: '',\n})).actions(self => ({\n  afterCreate() { self.hash = randomHash() }, // eslint-disable-line no-param-reassign\n}))\n","import core from 'mathjs/core'\n\nconst math = core.create()\nmath.import(require('mathjs/lib/expression/function/eval'))\nmath.import(require('mathjs/lib/expression/function/parse'))\nmath.import(require('mathjs/lib/function/arithmetic/add'))\nmath.import(require('mathjs/lib/function/arithmetic/ceil'))\nmath.import(require('mathjs/lib/function/arithmetic/divide'))\nmath.import(require('mathjs/lib/function/arithmetic/floor'))\nmath.import(require('mathjs/lib/function/arithmetic/mod'))\nmath.import(require('mathjs/lib/function/arithmetic/multiply'))\nmath.import(require('mathjs/lib/function/arithmetic/pow'))\nmath.import(require('mathjs/lib/function/arithmetic/round'))\nmath.import(require('mathjs/lib/function/arithmetic/subtract'))\nmath.import(require('mathjs/lib/function/logical'))\nmath.import(require('mathjs/lib/function/statistics/max'))\nmath.import(require('mathjs/lib/function/statistics/mean'))\nmath.import(require('mathjs/lib/function/statistics/min'))\nmath.import(require('mathjs/lib/function/statistics/sum'))\nmath.import(require('mathjs/lib/type/matrix/function/matrix'))\nmath.import(require('mathjs/lib/type/matrix/Matrix'))\nmath.import(require('mathjs/lib/type/matrix/DenseMatrix'))\n\nexport default math\n","import math from '@/utilities/math'\n\nexport default (expression) => {\n  const symbols = []\n  math.parse(expression).traverse((node) => {\n    if (node.type === 'SymbolNode' && !symbols.includes(node.name)) {\n      symbols.push(node.name)\n    }\n  })\n  return symbols\n}\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport findParent from '@/utilities/findParent'\nimport math from '@/utilities/math'\nimport calculate from '@/utilities/math/calculate'\nimport toSymbols from '@/utilities/math/toSymbols'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.modifiedValue()),\n  IEditable,\n  types.model({\n    name: 'New Attribute...',\n    raw: types.optional(types.union(types.number, types.string), 0),\n  }).views(self => ({\n    get character() { return findParent(self, p => p.isCharacter) },\n    get id() {\n      return self.name.split(':').pop()\n        .trim().toLowerCase()\n        .replace(/[^a-z0-9]/ig, '')\n    },\n    get isComputed() { return typeof self.raw === 'string' },\n  })).actions((self) => {\n    let computing = false\n\n    return ({\n      effects() {\n        if (!self.character) return []\n        return self.character.activeEffects().filter(effect => effect.targetId === self.id)\n      },\n      modifiedValue() { return (self.value() || 0) + self.modifier() },\n      modifier() { return math.sum(self.effects().map(effect => effect.modifier)) },\n      modifierText() {\n        return self.effects().map(effect => `${effect.sourceName()}: ${effect.modifier}`).join(', ')\n      },\n      value() {\n        if (!self.isComputed) return self.raw\n        if (self.character === null) return 0\n        if (computing) return 0\n\n        computing = true\n        let computed = 0\n\n        try {\n          const values = toSymbols(self.raw).reduce((all, symbol) => {\n            const attribute = self.character.attributes.findBy('id', symbol)\n            return Object.assign(all, { [symbol]: attribute ? attribute.modifiedValue() : 0 })\n          }, {})\n\n          computed = calculate(self.raw, values)\n        } catch (error) {\n          // eslint-disable-next-line no-undef\n          if (process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.error(`Error computing: ${self.raw}`)\n          }\n          computed = 0\n        }\n\n        computing = false\n        return computed\n      },\n    })\n  }).preProcessSnapshot(({ value, ...snapshot }) => ({ ...snapshot, raw: value }))\n    .postProcessSnapshot(({ raw, ...snapshot }) => ({ ...snapshot, value: raw }))\n).named('Attribute')\n","import math from '@/utilities/math'\nimport toSymbols from '@/utilities/math/toSymbols'\n\nexport default (expression = '', data = {}, options = { defaultSymbolValue: 0 }) => {\n  const safeData = { ...data }\n  toSymbols(expression).forEach((symbol) => {\n    if (safeData[symbol] === undefined) {\n      safeData[symbol] = options.defaultSymbolValue\n    }\n  })\n\n  return math.eval(expression, safeData)\n}\n","import { types } from 'mobx-state-tree'\nimport noop from '@/utilities/noop'\nimport unique from '@/utilities/unique'\n\nexport default (getValue = noop) => types.model({\n}).volatile(() => ({\n  isICategorizable: true,\n})).views((self) => {\n  function getCategories() {\n    if (!self.name) return []\n\n    const categories = self.name.split(':')\n    categories.pop() // remove the name\n\n    return unique(categories.map(category => category.trim()).filter(Boolean)).sort()\n  }\n  let lastUsedName = self.name\n  let categories = getCategories()\n\n  return {\n    get categories() {\n      if (!self.name || self.name === lastUsedName) return categories\n\n      lastUsedName = self.name\n      categories = getCategories()\n\n      return categories\n    },\n    get categoryValue() { return getValue(self) },\n  }\n})\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.mastery),\n  IEditable,\n  types.model({\n    mastery: 1,\n    name: 'New Skill...',\n    theory: 0,\n  }).views(self => ({\n    get isComplex() { return self.theory !== 0 },\n    get isSimple() { return self.theory === 0 },\n  }))\n).named('Skill')\n","export default () => {}\n"],"sourceRoot":""}