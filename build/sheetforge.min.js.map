{"version":3,"sources":["webpack://sheetforge/webpack/universalModuleDefinition","webpack://sheetforge/webpack/bootstrap","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ParenthesisNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm12.js","webpack://sheetforge/./source/utilities/noop.js","webpack://sheetforge/./source/utilities/unique.js","webpack://sheetforge/./source/models/generic/ICategorizable/ICategorizable.js","webpack://sheetforge/./source/utilities/splitObjectPath.js","webpack://sheetforge/./source/utilities/getPathValue.js","webpack://sheetforge/./source/models/generic/IEditable/IEditable.js","webpack://sheetforge/./source/utilities/setPathValue.js","webpack://sheetforge/./source/utilities/hash.js","webpack://sheetforge/./source/models/generic/IIdentity/IIdentity.js","webpack://sheetforge/./source/utilities/findParent.js","webpack://sheetforge/./source/utilities/math/math.js","webpack://sheetforge/./source/utilities/math/toSymbols.js","webpack://sheetforge/./source/models/Attribute/Attribute.js","webpack://sheetforge/./source/utilities/math/calculate.js","webpack://sheetforge/./source/models/Descriptor/Descriptor.js","webpack://sheetforge/./source/models/generic/Collection/Collection.js","webpack://sheetforge/./source/utilities/compareBy.js","webpack://sheetforge/./source/models/Effect/Effect.js","webpack://sheetforge/./source/models/Item/Item.js","webpack://sheetforge/./source/models/Resource/Resource.js","webpack://sheetforge/./source/models/Skill/Skill.js","webpack://sheetforge/./source/models/ResourceCost/ResourceCost.js","webpack://sheetforge/./source/models/Spell/Spell.js","webpack://sheetforge/./source/models/Trait/Trait.js","webpack://sheetforge/./source/models/Character/Character.js","webpack://sheetforge/./source/utilities/flatten.js","webpack://sheetforge/./source/models/types/between.js","webpack://sheetforge/./source/models/Layout/Layout.js","webpack://sheetforge/./source/utilities/bound.js","webpack://sheetforge/./source/components/Editable/Editable.js","webpack://sheetforge/./source/utilities/range.js","webpack://sheetforge/./source/components/Rating/Rating.js","webpack://sheetforge/./source/components/Attribute/Attribute.js","webpack://sheetforge/./source/components/Descriptor/Descriptor.js","webpack://sheetforge/./source/components/Effect/Effect.js","webpack://sheetforge/./source/components/Expandable/Expandable.js","webpack://sheetforge/./source/components/MultiToggle/MultiToggle.js","webpack://sheetforge/./source/utilities/debounce.js","webpack://sheetforge/./source/components/List/List.js","webpack://sheetforge/./source/components/Item/Item.js","webpack://sheetforge/./source/components/Resource/Resource.js","webpack://sheetforge/./source/components/Skill/Skill.js","webpack://sheetforge/./source/components/ResourceCost/ResourceCost.js","webpack://sheetforge/./source/components/Spell/Spell.js","webpack://sheetforge/./source/components/Trait/Trait.js","webpack://sheetforge/./source/components/index.js","webpack://sheetforge/./source/components/Conditions/Conditions.js","webpack://sheetforge/./source/components/Layout/Layout.js","webpack://sheetforge/./source/models/index.js","webpack://sheetforge/./source/components/Sheet/Sheet.js","webpack://sheetforge/./source/index.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/function.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/number.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm06.js","webpack://sheetforge/./node_modules/mathjs/lib/core/function/config.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/deepMap.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/utils/access.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/polyfills.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ConditionalNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/deepForEach.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/det.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/customs.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm02.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/isMatrix.js","webpack://sheetforge/./node_modules/mathjs/lib/type/number.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/unaryMinus.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/inherits.js","webpack://sheetforge/./node_modules/mathjs/lib/type/numeric.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/zeros.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/IndexNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm14.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/index.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/not.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/keywords.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/pow.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/utils/improveErrorMessage.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/RelationalNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/bignumber/formatter.js","webpack://sheetforge/./node_modules/mathjs/lib/error/ArgumentsError.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/ceil.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/mean.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/SymbolNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/containsCollections.js","webpack://sheetforge/./node_modules/mathjs/lib/function/relational/larger.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/isCollection.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/min.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/AccessorNode.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/emitter.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/Node.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/index.js","webpack://sheetforge/./node_modules/mathjs/lib/type/bignumber/function/bignumber.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/identity.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/parse.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/objectSpread.js","webpack://sheetforge/./node_modules/deep-equal/lib/keys.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm04.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/round.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/add.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/boolean.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/multiply.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/and.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/subtract.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/string.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/inv.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/floor.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/function/matrix.js","webpack://sheetforge/./node_modules/escape-latex/dist/index.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ObjectNode.js","webpack://sheetforge/./node_modules/mathjs/lib/error/IndexError.js","webpack://sheetforge/./node_modules/mathjs/lib/core/function/import.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/operators.js","webpack://sheetforge/./node_modules/sortablejs/Sortable.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/Range.js","webpack://sheetforge/external \"mobx\"","webpack://sheetforge/./node_modules/@babel/runtime/helpers/createClass.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/divideScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/subset.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/function/eval.js","webpack://sheetforge/./node_modules/mathjs/lib/error/DimensionError.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/transform/error.transform.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm07.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/addScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/utils/assign.js","webpack://sheetforge/external \"mobx-state-tree\"","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/FunctionNode.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/sum.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/object.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/DenseMatrix.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm05.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/scatter.js","webpack://sheetforge/./node_modules/mathjs/lib/core/core.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/latex.js","webpack://sheetforge/./node_modules/mathjs/lib/type/resultset/ResultSet.js","webpack://sheetforge/external \"react\"","webpack://sheetforge/./node_modules/@babel/runtime/helpers/typeof.js","webpack://sheetforge/./node_modules/typed-function/typed-function.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm01.js","webpack://sheetforge/./node_modules/deep-equal/index.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/abs.js","webpack://sheetforge/external \"react-dom\"","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/mod.js","webpack://sheetforge/./node_modules/mathjs/lib/function/algebra/decomposition/lup.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm03.js","webpack://sheetforge/./node_modules/mathjs/lib/function/relational/equalScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/max.js","webpack://sheetforge/./node_modules/mathjs/lib/core/typed.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ConstantNode.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/BlockNode.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/function/parse.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://sheetforge/./node_modules/mathjs/lib/function/relational/smaller.js","webpack://sheetforge/./node_modules/deep-equal/lib/is_arguments.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/xor.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm11.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/or.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/Matrix.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/multiplyScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/FunctionAssignmentNode.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/extends.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/bignumber/isBigNumber.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/bignumber/nearlyEqual.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/divide.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/reduce.js","webpack://sheetforge/external \"mobx-react\"","webpack://sheetforge/./node_modules/mathjs/lib/utils/array.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/RangeNode.js","webpack://sheetforge/./node_modules/mathjs/lib/function/utils/typeof.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/OperatorNode.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/AssignmentNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm10.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ArrayNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/fraction/function/fraction.js","webpack://sheetforge/./node_modules/tiny-emitter/index.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/getArrayDataType.js","webpack://sheetforge/./node_modules/mathjs/core.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm13.js"],"names":["root","factory","exports","module","require","define","amd","global","__WEBPACK_EXTERNAL_MODULE_VBo9__","__WEBPACK_EXTERNAL_MODULE_YeEv__","__WEBPACK_EXTERNAL_MODULE_cDcd__","__WEBPACK_EXTERNAL_MODULE_faye__","__WEBPACK_EXTERNAL_MODULE_sGQ9__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","path","type","config","load","typed","Node","ParenthesisNode","content","this","SyntaxError","isNode","TypeError","isParenthesisNode","_compile","math","argNames","getContent","forEach","callback","map","clone","_toString","options","parenthesis","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","concat","toTex","DenseMatrix","b","inverse","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","Error","dt","rows","columns","cf","convert","find","cdata","data","size","datatype","x","w","j","mark","k0","k1","k","noop","unique","arguments","length","undefined","filter","item","index","all","indexOf","ICategorizable","getValue","types","model","volatile","isICategorizable","views","self","getCategories","categories","split","pop","category","trim","Boolean","sort","lastUsedName","categoryValue","PATH_SPLITTER","splitObjectPath","match","getPathValue","Array","isArray","target","reduce","IEditable","isIEditable","savedVersion","isDirty","deepEqual","actions","afterCreate","isPathDirty","current","initial","markAsClean","keys","isObservableArray","child","reset","assign","set","setPathValue","typeof_default","randomHash","radix","string","String","h","char","charCodeAt","Math","abs","hash","random","findParent","filterFunction","hasParent","parent","getParent","core","import","toSymbols","expression","fns","symbols","parse","traverse","node","fn","push","includes","compose","IIdentity","modifiedValue","raw","optional","union","number","character","isCharacter","id","toLowerCase","replace","isComputed","computing","effects","activeEffects","effect","targetId","modifier","sum","modifierText","sourceName","join","computed","values","symbol","attribute","attributes","findBy","defineProperty_default","defaultSymbolValue","safeData","objectSpread_default","eval","calculate","error","process","preProcessSnapshot","_ref","snapshot","objectWithoutProperties_default","postProcessSnapshot","_ref2","named","Collection","TYPE","TypedArrayWrapper","array","asArray","slice","first","at","last","clear","delete","deleteAt","_","every","findById","identifierAttribute","searchElement","fromIndex","element","insert","splice","_len","_key","shift","start","end","some","sortBy","direction","prop","reversed","objectA","objectB","a","Map","localeCompare","compareBy","reverse","deleteCount","toObject","keyProp","valueProp","entry","unshift","_len2","_key2","custom","fromSnapshot","getValidationMessage","f","is","isTargetType","condition","afterAttach","available","CollectionOf","Attribute","isApplicable","conditions","source","description","Effect","equipped","maximum","mastery","theory","isComplex","isSimple","amount","resourceName","resources","Resource","resource","level","costs","ResourceCost","isActive","cast","isAffordable","cost","descriptors","Descriptor","experience","items","Item","skills","Skill","spells","Spell","traits","Trait","availableConditions","e","flatten","depth","Infinity","JSON","stringify","next","trait","spell","between","min","max","defaultTo","refinement","Layout","categorize","children","late","colSpan","maybe","sortOption","title","literal","bound","TYPES","Editable","editing","resetValue","_this","props","onChange","state","handleToggleEditing","editor","getEditorType","focus","forceEditMode","setSelectionRange","_this$props","parseFloat","Number","isNaN","event","ctrlKey","metaKey","onKeyDown","isDefaultPrevented","resetChanges","nodeName","readOnly","setState","onEditStart","onEditEnd","select","external_react_default","createElement","checked","disabled","toggleBoolean","ref","createRefWithAutoFocus","paragraphs","placeholder","line","className","onClick","onBlur","handleChange","onFocus","selectOnFocus","handleKeys","onKeyPress","onKeyUp","step","renderStatic","_this$props2","readOnlyValue","showPlaceholder","displayValue","renderBoolean","renderSlider","renderMultiline","renderNumber","renderText","_this$props3","classes","handleReceivingFocus","tabIndex","extends_default","renderEditor","React","Component","range","apply","toConsumableArray_default","Rating","parseInt","getAttribute","allowExcess","iconExcess","iconOff","iconOn","total","data-number","handleIconClick","observer","CACHE","forceUpdate","onDelete","onSnapshotDisposer","onSnapshot","handleSnapshot","rating","modifierClassName","Editable_Editable_Editable","handleChangeName","handleCommitName","handleChangeValue","handleCommitValue","handleValueKeyDown","Rating_Rating_Rating","display","_this$props$model","_this$props$model$con","handleChangeTarget","handleChangeModifier","handleChangeCondition","Expandable","expanded","createRef","classList","expander","parentElement","onToggle","omitItemWrapper","expandByDefault","add","toggleButtonParent","toggleButtonText","toggleState","buttonProps","handleToggle","toggleButton","text","external_react_","createPortal","renderExpanded","MultiToggle","selected","_this2","option","handleOptionClick","debounce","func","wait","immediate","timeout","args","callNow","clearTimeout","setTimeout","NO_CATEGORY","components_List_List","Model","_class","_temp","sortOptions","sorter","comparitor","A","B","aString","bString","buildSorter","_React$Component","List","_getPrototypeOf2","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","assertThisInitialized_default","collection","parentNode","layout","clicked","Fragment","handleToggleCategorized","handleFilterChange","filterEl","sortable","MultiToggle_MultiToggle_MultiToggle","handleSortChange","categoryItems","getCategoryItems","style","renderItem","_this$state","sorted","categorized","data-index","onToggleExpanded","handleToggleExpanded","handleDelete","inherits_default","createClass_default","sortOptionIndex","onLayoutSnapshotDisposer","Sortable","container","draggable","handle","onEnd","remove","querySelectorAll","targetIndex","onStart","onDataSnapshotDisposer","_this3","_this$props2$classNam","_this$props2$layout","hasCategories","listStyle","renderSortWidget","renderCategoryWidget","handleAdd","renderCategory","list","EffectList","ListOf","EffectModel","handleToggleEquipped","Expandable_Expandable_Expandable","handleChangeDescription","handleChangeCurrent","handleChangeMaximum","onChangeName","onChangeTheory","onChangeMastery","handleChangeResource","handleChangeAmount","ListOfCosts","ResourceCostModel","onResourceSnapshotDisposer","handleToggleActive","handleChangeLevel","handleCast","Spell_EffectList","components","Trait_EffectList","Conditions_temp","Conditions_class","_Component","Conditions","isCurrent","handleCheckbox","renderCondition","snapshotJSON","parentColumns","width","titleBar","handleChangeTitle","models","Sheet","window","matchMedia","matches","typename","Layout_Layout_Layout","renderComponent","onCharacterSnapshotDisposer","handleWindowResize","addEventListener","onMount","removeEventListener","components_Conditions_Conditions","__webpack_exports__","Attribute_Attribute","Character","Descriptor_Descriptor","Effect_Effect","Item_Item","models_Layout_Layout","ResourceCost_ResourceCost","Resource_Resource","components_Sheet_Sheet","Skill_Skill","Spell_Spell","Trait_Trait","_typeof","obj","iterator","constructor","memoize","hasher","cache","maxArgumentCount","signatures","signature","count","callWithRightArgumentCount","argCount","objectUtils","zeros","arr","isNumber","isInteger","isFinite","round","sign","format","precision","notation","toFixed","toExponential","toEngineering","exponential","lower","upper","fixedOptions","lowerExp","log","LN10","upperExp","console","warn","toPrecision","digits","splitNumber","exponent","dot","coefficients","rounded","roundDigits","newExp","significandsDiff","expDiff","decimalIdx","decimals","decimalVal","str","splitValue","pp","DBL_EPSILON","EPSILON","nearlyEqual","y","epsilon","diff","scatter","DimensionError","equalScalar","SparseMatrix","bvalues","bsize","bdt","RangeError","eq","zero","cvalues","cindex","cptr","ptr","u","v","validateOption","findIndex","MATRIX","NUMBER","_config","prev","deepExtend","curr","changes","emit","deepMap","skipZeros","errorTransform","transform","getSafeProperty","subset","isObjectProperty","getObjectProperty","err","operators","mathTypeOf","ConditionalNode","trueExpr","falseExpr","isConditionalNode","evalCondition","evalTrueExpr","evalFalseExpr","scope","context","isBigNumber","isZero","re","im","isUnit","testCondition","_ifNode","precedence","getPrecedence","conditionPrecedence","truePrecedence","falsePrecedence","isMatrix","deepForEach","valueOf","ii","util","matrix","subtract","multiply","unaryMinus","lup","det","any","Array | Matrix","cols","decomp","_det2","U","_i","evenCycles","visited","cycleLen","_det","1","isSafeProperty","safeNativeProperties","Function","isSafeMethod","method","getPrototypeOf","safeNativeMethods","isPlainObject","toLocaleString","setSafeProperty","validateSafeMethod","denseMatrix","sparseMatrix","adata","_data","bindex","bptr","cij","","NaN","num","BigNumber","toNumber","Fraction","Unit","null","Unit, string | Unit","unit","valuelessUnit","0","2","latex","Complex","neg","res","setPrototypeOf","subClass","superClass","writable","configurable","getTypeOf","validInputTypes","validOutputTypes","numeric","outputType","inputType","excluded","sourceKeys","resize","_zeros","...number | BigNumber | string","Matrix","storage","Array | Matrix, string","defaultValue","hasBigNumbers","_normalize","_validate","escape","Range","IndexNode","dimensions","dotNotation","deprecated","createRange","isIndexNode","evalDimensions","isRangeNode","needsEnd","childArgNames","evalStart","evalEnd","evalStep","childArgs","_evalStart","_evalEnd","_evalStep","isSymbolNode","_childArgNames","evalRange","_evalRange","evalDimension","isConstantNode","_iterate","av","bv","cv","not","identity","fraction","pow","number, number","_pow","Complex, Complex","BigNumber, BigNumber","predictable","Fraction, Fraction","Array, number","_powArray","Array, BigNumber","Matrix, number","_powMatrix","Matrix, BigNumber","Unit, number | BigNumber","yFrac","yNum","ex","px","getType","fnName","details","actual","RelationalNode","conditionals","params","isRelationalNode","compiled","evalLhs","evalRhs","condFn","paramStrings","paramPrecedence","operatorMap","equal","unequal","smaller","larger","smallerEq","largerEq","ret","gt","exp","toSignificantDigits","ArgumentsError","message","stack","isArgumentsError","iter","from","ceil","containsCollections","divide","improveErrorMessage","mean","_mean","Array | Matrix, number | BigNumber","dim","...","isValuelessUnit","SymbolNode","undef","toSymbol","isCollection","bigNearlyEqual","algorithm03","algorithm07","algorithm12","algorithm13","algorithm14","boolean, boolean","compare","Unit, Unit","equalBase","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","Array, Matrix","Matrix, Array","SparseMatrix, any","DenseMatrix, any","any, SparseMatrix","any, DenseMatrix","Array, any","any, Array","_min","_smallest","access","AccessorNode","needParenthesis","isAccessorNode","isArrayNode","isFunctionNode","isObjectNode","evalObject","evalIndex","arr2","Emitter","mixin","emitter","on","off","once","keywords","compile","comment","expr","mathWithTransform","_validateScope","_traverse","_transform","nodes","cloneDeep","equals","other","customString","handler","customTex","getIdentifier","bignumber","div","times","number | BigNumber","_identity","number | BigNumber, string","number | BigNumber, number | BigNumber","number | BigNumber, number | BigNumber, string","_identityVector","Array, string","Matrix, string","Big","one","diagonal","minimum","_extends","ArrayNode","AssignmentNode","BlockNode","ConstantNode","FunctionAssignmentNode","ObjectNode","OperatorNode","FunctionNode","RangeNode","extraNodes","parseStart","elem","TOKENTYPE","NULL","DELIMITER","SYMBOL","UNKNOWN","DELIMITERS",",","(",")","[","]","{","}","\"","'",";","+","-","*",".*","/","./","%","^",".^","~","!","&","|","^|","=",":","?","==","!=","<",">","<=",">=","<<",">>",">>>","NAMED_DELIMITERS","mod","to","in","and","xor","or","CONSTANTS","true","false","NUMERIC_CONSTANTS","currentString","substr","currentCharacter","prevCharacter","charAt","nextCharacter","getToken","tokenType","token","isWhitespace","nestingLevel","c1","c2","c3","isDigitDot","isDigit","isDecimalMark","createSyntaxError","isAlpha","getTokenSkipNewline","openParams","closeParams","conditionalLevel","visible","blocks","parseAssignment","parseBlock","createError","valid","parseLogicalXor","parseLogicalOr","parseConditional","arg","parseLogicalAnd","parseBitwiseOr","parseBitwiseXor","parseBitwiseAnd","parseRelational","parseShift","cond","parseConversion","parseRange","parseAddSubtract","parseMultiplyDivide","parseImplicitMultiplication","parseRule2","isOperatorNode","op","parseUnary","tokenStates","CustomNode","parseAccessors","parseDoubleQuotesStringToken","parseSingleQuotesStringToken","row","parseRow","properties","numberStr","parseEnd","parseParentheses","parseNumber","parseObject","parseMatrix","parseSingleQuotesString","parseDoubleQuotesString","parseSymbol","parseCustomNodes","parseLeftHandOperators","parsePow","len","col","cPrev","cNext","isValidLatinOrGreek","isValidMathSymbol","test","high","low","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","shim","xa","xb","wa","wb","NO_INT","_round","algorithm11","Complex, number","Complex, BigNumber","_n","number, BigNumber","toDecimalPlaces","Fraction, number","SparseMatrix, number | BigNumber","DenseMatrix, number | BigNumber","number | Complex | BigNumber, SparseMatrix","number | Complex | BigNumber, DenseMatrix","Array, number | BigNumber","number | Complex | BigNumber, Array","extend","addScalar","algorithm01","algorithm04","algorithm10","any, any","any, any, ...any","rest","result","isBoolean","multiplyScalar","_validateMatrixDimensions","Matrix, Matrix","xsize","ysize","bdata","af","mf","_multiplyVectorVector","alength","bcolumns","_multiplyVectorDenseMatrix","_multiplyVectorMatrix","_multiplyMatrixVector","_multiplyMatrixMatrix","size1","size2","arows","acolumns","brows","ib","vbi","ka0","ka1","ka","ia","p1","ic","jb","kb0","kb1","kb","vbij","p0","_getPrototypeOf","__proto__","algorithm02","algorithm06","checkEqualDimensions","algorithm05","sub","minus","fixPrefix","ReferenceError","formatNumber","formatBigNumber","isString","endsWith","search","substring","looksLikeFraction","formatArray","syntax","entries","escaped","objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","divideScalar","inv","_inv","mat","temp","ABig","rBig","Ac","Bc","Ar","Br","floor","_create","string, string","Array | Matrix, string, string","defaultEscapes","\\","#","$","formatEscapes","–","—"," ","\t","\r\n","\n","defaultEscapeMapFn","_ref$preserveFormatti","preserveFormatting","_ref$escapeMapFn","escapeMapFn","runningStr","escapes","escapeKeys","_loop","specialCharFound","arrayWithoutHoles","iterableToArray","nonIterableSpread","evalEntries","stringifiedKey","parsedKey","IndexError","isIndexError","lazy","isFactory","_import","wrap","wrapper","isTypedFunction","override","_importTransform","silent","allowedInExpressions","_deleteTransform","_importFactory","existingTransform","namespace","existing","resolver","instance","factoryAllowedInExpressions","isSupportedType","isFraction","unsafe","docs","chain","mathImport","_setPrototypeOf","latexLeftParens","latexRightParens","latexParens","OperatorNode:or","associativity","associativeWith","OperatorNode:xor","OperatorNode:and","OperatorNode:bitOr","OperatorNode:bitXor","OperatorNode:bitAnd","OperatorNode:equal","OperatorNode:unequal","OperatorNode:smaller","OperatorNode:larger","OperatorNode:smallerEq","OperatorNode:largerEq","OperatorNode:leftShift","OperatorNode:rightArithShift","OperatorNode:rightLogShift","OperatorNode:to","OperatorNode:add","OperatorNode:subtract","OperatorNode:multiply","OperatorNode:divide","OperatorNode:dotMultiply","OperatorNode:dotDivide","OperatorNode:mod","OperatorNode:unaryPlus","OperatorNode:unaryMinus","OperatorNode:bitNot","OperatorNode:not","OperatorNode:pow","OperatorNode:dotPow","OperatorNode:factorial","OperatorNode:transpose","_node","identifier","getAssociativity","isAssociativeWith","nodeA","nodeB","identifierA","identifierB","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","document","dragEl","parentEl","ghostEl","cloneEl","rootEl","nextEl","lastDownEl","scrollEl","scrollParentEl","scrollCustomFn","oldIndex","newIndex","activeGroup","putSortable","pointerElemChangedInterval","lastPointerElemX","lastPointerElemY","tapEvt","touchEvt","moved","lastTarget","lastDirection","lastMode","targetMoveDistance","realDragElRect","autoScrolls","scrolling","awaitingDragStarted","ignoreNextClick","sortables","pastFirstInvertThresh","isCircumstantialInvert","R_SPACE","expando","Date","getTime","win","jQuery","Zepto","Polymer","captureMode","capture","passive","IE11OrLess","navigator","userAgent","Edge","CSSFloatProperty","supportDraggable","supportCssPointerEvents","el","cssText","pointerEvents","_silent","_alignedSilent","savedInputChecked","_detectDirection","elCSS","_css","elWidth","child1","_getChild","child2","firstChildCSS","secondChildCSS","firstChildWidth","marginLeft","marginRight","_getRect","secondChildWidth","flexDirection","float","touchingSideChild2","_getParentAutoScrollElement","includeSelf","getBoundingClientRect","gotSelf","clientWidth","scrollWidth","clientHeight","scrollHeight","elemCSS","overflowX","overflowY","body","_autoScroll","_throttle","evt","isFallback","scroll","sens","scrollSensitivity","speed","scrollSpeed","clientX","clientY","scrollThisInstance","innerWidth","innerHeight","_clearAutoScrolls","scrollFn","layersOut","currentParent","css","vx","vy","canScrollX","canScrollY","scrollPosX","scrollPosY","rect","top","bottom","left","right","height","scrollLeft","scrollTop","documentElement","clearInterval","pid","setInterval","layer","active","_emulateDragOver","scrollOffsetY","scrollOffsetX","scrollTo","pageXOffset","pageYOffset","bubbleScroll","autoScroll","_prepareGroup","toFn","pull","sameGroup","group","otherGroup","originalGroup","checkPull","checkPut","put","revertClone","_checkAlignment","_computeIsAligned","_isTrueParentSortable","trueParent","_artificalBubble","originalEvt","nextParent","_extend","artificialBubble","_hideGhostForTarget","_unhideGhostForTarget","preventDefault","stopPropagation","stopImmediatePropagation","_throttleTimeout","nearestEmptyInsertDetectEvent","touches","nearest","threshold","emptyInsertThreshold","insideHorizontally","insideVertically","_detectNearestEmptySortable","_onDragOver","nodeType","defaults","store","swapThreshold","invertSwap","invertedSwapThreshold","removeCloneOnHide","ghostClass","chosenClass","dragClass","ignore","preventOnFilter","animation","easing","setData","dataTransfer","textContent","dropBubble","dragoverBubble","dataIdAttr","delay","touchStartThreshold","devicePixelRatio","forceFallback","fallbackClass","fallbackOnBody","fallbackTolerance","fallbackOffset","supportPointer","nativeDraggable","_on","_onTapStart","_closest","selector","ctx","includeCTX","_matches","_getParentOrHost","host","_off","_toggleClass","val","defaultView","getComputedStyle","currentStyle","_matrix","appliedTransforms","DOMMatrix","WebKitCSSMatrix","CSSMatrix","_find","tagName","getElementsByTagName","_dispatchEvent","targetEl","toEl","fromEl","startIndex","onName","toUpperCase","CustomEvent","createEvent","initEvent","bubbles","cancelable","originalEvent","dispatchEvent","_onMove","dragRect","targetRect","willInsertAfter","retVal","onMoveFn","onMove","dragged","draggedRect","related","relatedRect","_disableDraggable","_unsilent","childNum","currentChild","_lastChild","lastElementChild","previousElementSibling","_generateId","src","href","msMatchesSelector","webkitMatchesSelector","ms","dst","_clone","dom","cloneNode","_nextTick","_cancelNextTick","adjustForTransform","elRect","containerRect","scaleX","scaleY","elementFromPoint","axis","targetS1Opp","targetS2Opp","mouseOnOppAxis","sortableMouseAligned","_getDirection","touch","originalTarget","shadowRoot","composedPath","inputs","idx","_saveInputCheckedState","button","isContentEditable","criteria","_prepareDragStart","_handleAutoScroll","fallback","ogElemScroller","newElem","dragStartFn","ownerDocument","nextSibling","_lastX","_lastY","transition","_disableDelayedDrag","_triggerDragStart","_onDrop","_delayedDragTouchMoveHandler","_dragStartTimer","pointerType","_onTouchMove","_onDragStart","selection","empty","getSelection","removeAllRanges","_dragStarted","_appendGhost","_nulling","bypassLastTouchCheck","dx","dy","translate3d","appendChild","_hideClone","_cloneId","insertBefore","_loopId","effectAllowed","_dragStartId","revert","activeSortable","isOwner","canSort","animated","completed","contains","lastPutMode","mouseOnAxis","targetS2","_ghostIsLast","_showClone","changed","_animate","targetBeforeFirstSwap","aligned","differentLevel","scrolledPastTop","side","elSide","parentSide","_isScrolledPast","el1","el2","el1Rect","el2Rect","el1S1Opp","el1S2Opp","el1OppLength","el2S1Opp","el2S2Opp","el2OppLength","_isElInRowColumn","isLastTarget","targetLength","targetS1","invert","_getSwapDirection","dragElIndex","_getInsertDirection","nextElementSibling","after","moveVector","prevRect","currentRect","offsetWidth","_offUpEvents","removeChild","save","handleEvent","dropEffect","_globalDragOver","toArray","order","closest","destroy","removeAttribute","cloneHidden","utils","throttle","toggleClass","nextTick","cancelNextTick","detectDirection","getChild","version","hasStart","hasEnd","hasStep","isRange","nums","_defineProperties","descriptor","Constructor","protoProps","staticProps","Unit, number | Fraction | BigNumber","number | Fraction | BigNumber, Unit","validateIndex","_getObjectProperty","dimension","_setObjectProperty","replacement","updated","Array, Index","isScalar","Matrix, Index","Object, Index","string, Index","isIndex","strLen","Array, Index, any","Array, Index, any, any","Matrix, Index, any","Matrix, Index, any, any","string, Index, string","_setSubstring","string, Index, string, string","Object, Index, any","chars","string, Object","Array | Matrix, Object","expected","relation","isDimensionError","_scatter","va","vb","plus","evalArgs","rawArgs","evalArg0","_evalArg","evalArg1","evalArg","_rawArgs","evalFn","_rawArgs2","nodeToString","expandTemplate","template","regex","RegExp","inputPos","exec","isFunctionAssignmentNode","nodeToTex","latexConverter","customToTex","defaultTemplate","_sum","_sum2","canDefineProperty","_value","_uninitialized","names","getArrayDataType","preprocess","validate","_resize","_fit","newSize","isDenseMatrix","getDataType","_getSubmatrix","dims","_get","submatrix","sSize","iSize","outer","unsqueeze","_setSubmatrix","dataIndex","subIndex","_set","indexI","copy","reshape","me","recurse","kSuper","kSub","swapRows","_swapRows","vi","_storage","dense","wai","wbi","vc","assertThisInitialized","update","typedFactory","importFactory","configFactory","factories","instances","randomSeed","escapeLatex","Alpha","alpha","Beta","beta","Gamma","gamma","Delta","delta","Epsilon","varepsilon","Zeta","zeta","Eta","eta","Theta","theta","vartheta","Iota","iota","Kappa","kappa","varkappa","Lambda","lambda","Mu","mu","Nu","nu","Xi","xi","Omicron","omicron","Pi","pi","varpi","Rho","rho","varrho","Sigma","sigma","varsigma","Tau","tau","Upsilon","upsilon","Phi","phi","varphi","Chi","chi","Psi","psi","Omega","omega","inf","Inf","infinity","oo","lim","transpose","ctranspose","factorial","dotPow","unaryPlus","bitNot","dotMultiply","dotDivide","leftShift","rightArithShift","rightLogShift","bitAnd","bitXor","bitOr","units","deg","ResultSet","isResultSet","_typeof2","__WEBPACK_AMD_DEFINE_ARRAY__","ok","notOk","_types","anyType","_ignore","_conversions","conversions","findTypeByName","typeName","findInArray","hint","findTypeIndex","findTypeName","stringifyParams","param","typeNames","getTypeName","restParam","parseParam","notEmpty","notIgnore","matchingConversions","conversion","filterConversions","exactTypes","typeIndex","conversionIndex","convertibleTypes","hasRestParam","hasConversions","compileTest","test0","test1","tests","compileTests","varIndex","lastTest","testRestParam","getParamAtIndex","getExpectedTypeNames","excludeConversions","isExactType","mergeExpectedParams","uniq","flatMap","getLowestTypeIndex","getLowestConversionIndex","compareParams","param1","param2","compareSignatures","signature1","signature2","compileArgConversion","conversion0","conversion1","splitParams","ignoreConversionTypes","_splitParams","typeGroups","filteredTypes","typeGroup","splittedParams","createTypedFunction","signaturesMap","parsedSignatures","parsedParam","isInvalidParam","parseSignature","notNull","parsedSignature","conflictingSignature","typesNames1","typesNames2","hasOverlap","len1","len2","restParam1","restParam2","hasConflictingParams","ok0","ok1","ok2","ok3","ok4","ok5","allOk","test00","test10","test20","test30","test40","test50","test01","test11","test21","test31","test41","test51","fnConvert","compiledConversions","fnPreprocess","offset","compileArgsPreprocessing","fn0","fn1","fn2","fn3","fn4","fn5","len0","len3","len4","len5","iStart","iEnd","generic","_name","matchingSignatures","nextMatchingDefs","actualType","lengths","maxLength","expectedLength","arg0","arg1","createSignaturesMap","array1","array2","getName","extractSignatures","validateUnique","_signature","_fn","...Function","string, ...Function","addType","beforeObjectTest","addConversion","pSlice","objectKeys","isArguments","opts","strict","isUndefinedOrNull","isBuffer","objEquiv","Spa","_denseLUP","ldata","lsize","udata","usize","pabsv","vjj","absv","vij","pv","L","_sparseLUP","lvalues","lindex","lptr","uvalues","uindex","uptr","pvCo","pvOc","spa","vkj","_forEachRow","vik","accumulate","kx","ky","swap","z","_max","_largest","typedFunction","_createTyped","isSparseMatrix","isHelp","isFunction","isDate","isRegExp","isObject","isNull","isUndefined","isAssignmentNode","isBlockNode","isChain","toLatex","block","evalBlocks","results","string | Array | Matrix","string | Array | Matrix, Object","lt","supportsArgumentsClass","supported","unsupported","mul","number | Fraction | BigNumber | Complex, Unit","Unit, number | Fraction | BigNumber | Complex","exprPrecedence","evalExpr","lte","Array | Matrix, Array | Matrix","any, Array | Matrix","arraySize","_reduce","tran","I","J","tmp","_switch","_DimensionError","default","dimNext","_number","_IndexError","_string","_defaultValue","oldLen","newLen","minLen","sizes","newArray","flatArray","product","totalSize","sizeIndex","tmpArray2","tmpArray","_reshape","squeeze","_squeeze","_unsqueeze","filterRegExp","regexp","separator","identify","generalize","_interopRequireDefault","flat","calculateNecessaryParentheses","parens","startPrecedence","stepPrecedence","endPrecedence","implicit","operandPrecedence","operandIdentifier","rootIdentifier","lhsParens","rhsParens","lhsPrecedence","assocWithLhs","_rootIdentifier","lhsIdentifier","rhsIdentifier","rhsPrecedence","assocWithRhs","argPrecedence","assocWithArg","argAssociativity","isUnary","isBinary","assoc","operand","opIsNamed","lhs","rhs","stringifiedArgs","lhsTex","rhsTex","texifiedArgs","evalValue","childObject","evalParentObject","parentProp","evalParentIndex","parentIndex","evalItems","evalItem","childNode","numerator","denominator","E","listener","evtArr","evts","liveEvents","TinyEmitter","_type","_length","itemType","csize"],"mappings":"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,KAAA4tB,cAAA5tB,EAAAqgB,YAAAlkB,UAAAc,SAAA,GAGAT,EAAA6gE,QAAA,SAAAr9D,GACA,OAAAA,KAAAqgB,YAAAlkB,UAAAkhE,UAAA,GAIA,IAAA1gE,EAAA+/D,IAyPA,OApPA//D,EAAAwE,MAAA,EACArG,KAAA,SACA+kC,KAAArjC,EAAA0kB,UACG,CACHpmB,KAAA,UACA+kC,KAAArjC,EAAAgQ,WACG,CACH1R,KAAA,YACA+kC,KAAArjC,EAAAoqB,aACG,CACH9rB,KAAA,WACA+kC,KAAArjC,EAAAmtC,YACG,CACH7uC,KAAA,OACA+kC,KAAArjC,EAAAwqB,QACG,CACHlsB,KAAA,SACA+kC,KAAArjC,EAAAwoC,UACG,CACHlqC,KAAA,QACA+kC,KAAArjC,EAAAgG,SACG,CACH1H,KAAA,SACA+kC,KAAArjC,EAAAgrB,UACG,CACH1sB,KAAA,cACA+kC,KAAArjC,EAAAytD,eACG,CACHnvD,KAAA,eACA+kC,KAAArjC,EAAAmgE,gBACG,CACH7hE,KAAA,QACA+kC,KAAArjC,EAAAgpD,SACG,CACH1qD,KAAA,QACA+kC,KAAArjC,EAAAoqD,SACG,CACH9rD,KAAA,UACA+kC,KAAArjC,EAAAylC,WACG,CACHnnC,KAAA,YACA+kC,KAAArjC,EAAA20D,aACG,CACHr2D,KAAA,OACA+kC,KAAArjC,EAAAogE,QACG,CACH9hE,KAAA,WACA+kC,KAAArjC,EAAAqgE,YACG,CACH/hE,KAAA,OACA+kC,KAAArjC,EAAAsgE,QACG,CACHhiE,KAAA,SACA+kC,KAAArjC,EAAAugE,UACG,CACHjiE,KAAA,OACA+kC,KAAArjC,EAAAygE,QACG,CACHniE,KAAA,YACA+kC,KAAArjC,EAAA0gE,aACG,CACHpiE,KAAA,eACA+kC,KAAArjC,EAAAwhC,gBACG,CACHljC,KAAA,eACA+kC,KAAArjC,EAAAyxB,gBACG,CACHnzB,KAAA,aACA+kC,KAAArjC,EAAAoxB,cACG,CACH9yB,KAAA,kBACA+kC,KAAArjC,EAAAW,mBACG,CACHrC,KAAA,eACA+kC,KAAArjC,EAAA83B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","file":"sheetforge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"mobx\"), require(\"mobx-state-tree\"), require(\"react\"), require(\"react-dom\"), require(\"mobx-react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sheetforge\", [\"mobx\", \"mobx-state-tree\", \"react\", \"react-dom\", \"mobx-react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sheetforge\"] = factory(require(\"mobx\"), require(\"mobx-state-tree\"), require(\"react\"), require(\"react-dom\"), require(\"mobx-react\"));\n\telse\n\t\troot[\"sheetforge\"] = factory(root[\"mobx\"], root[\"mobx-state-tree\"], root[\"react\"], root[\"react-dom\"], root[\"mobx-react\"]);\n})(global, function(__WEBPACK_EXTERNAL_MODULE_VBo9__, __WEBPACK_EXTERNAL_MODULE_YeEv__, __WEBPACK_EXTERNAL_MODULE_cDcd__, __WEBPACK_EXTERNAL_MODULE_faye__, __WEBPACK_EXTERNAL_MODULE_sGQ9__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"05fm\");\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor ParenthesisNode\n   * @extends {Node}\n   * A parenthesis node describes manual parenthesis from the user input\n   * @param {Node} content\n   * @extends {Node}\n   */\n\n  function ParenthesisNode(content) {\n    if (!(this instanceof ParenthesisNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (!type.isNode(content)) {\n      throw new TypeError('Node expected for parameter \"content\"');\n    }\n\n    this.content = content;\n  }\n\n  ParenthesisNode.prototype = new Node();\n  ParenthesisNode.prototype.type = 'ParenthesisNode';\n  ParenthesisNode.prototype.isParenthesisNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ParenthesisNode.prototype._compile = function (math, argNames) {\n    return this.content._compile(math, argNames);\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} content\n   * @override\n   **/\n\n\n  ParenthesisNode.prototype.getContent = function () {\n    return this.content.getContent();\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ParenthesisNode.prototype.forEach = function (callback) {\n    callback(this.content, 'content', this);\n  };\n  /**\n   * Create a new ParenthesisNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ParenthesisNode} Returns a clone of the node\n   */\n\n\n  ParenthesisNode.prototype.map = function (callback) {\n    var content = callback(this.content, 'content', this);\n    return new ParenthesisNode(content);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.prototype.clone = function () {\n    return new ParenthesisNode(this.content);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toString = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '(' + this.content.toString(options) + ')';\n    }\n\n    return this.content.toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ParenthesisNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ParenthesisNode',\n      content: this.content\n    };\n  };\n  /**\n   * Instantiate an ParenthesisNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n   *                       where mathjs is optional\n   * @returns {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.fromJSON = function (json) {\n    return new ParenthesisNode(json.content);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype.toHTML = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return this.content.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toTex = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n    }\n\n    return this.content.toTex(options);\n  };\n\n  return ParenthesisNode;\n}\n\nexports.name = 'ParenthesisNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm12 = function algorithm12(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  return algorithm12;\n}\n\nexports.name = 'algorithm12';\nexports.factory = factory;","export default () => {}\n","export default (array = []) => (\n  array.filter((item, index, all) => all.indexOf(item) === index)\n)\n","import { types } from 'mobx-state-tree'\nimport noop from '@/utilities/noop'\nimport unique from '@/utilities/unique'\n\nexport default (getValue = noop) => types.model({\n}).volatile(() => ({\n  isICategorizable: true,\n})).views((self) => {\n  function getCategories() {\n    if (!self.name) return []\n\n    const categories = self.name.split(':')\n    categories.pop() // remove the name\n\n    return unique(categories.map(category => category.trim()).filter(Boolean)).sort()\n  }\n  let lastUsedName = self.name\n  let categories = getCategories()\n\n  return {\n    get categories() {\n      if (!self.name || self.name === lastUsedName) return categories\n\n      lastUsedName = self.name\n      categories = getCategories()\n\n      return categories\n    },\n    get categoryValue() { return getValue(self) },\n  }\n})\n","const PATH_SPLITTER = /([a-z0-9-_]+)(?![[\"'\\].])*/ig\n\nexport default (path) => {\n  if (typeof path !== 'string') return null\n  return path.match(PATH_SPLITTER)\n}\n","import splitObjectPath from '@/utilities/splitObjectPath'\n\nexport default (object, path) => {\n  if (typeof path !== 'string') return undefined\n\n  const split = splitObjectPath(path)\n\n  if (!Array.isArray(split)) return undefined\n\n  const property = split.pop()\n  const target = split.reduce((o, key) => o[key] || {}, object)\n\n  if (target) return target[property]\n  return undefined\n}\n","import deepEqual from 'deep-equal'\nimport { isObservableArray } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport getPathValue from '@/utilities/getPathValue'\nimport setPathValue from '@/utilities/setPathValue'\n\nconst IEditable = types.model('IEditable', {\n  // Any\n}).volatile(() => ({\n  isIEditable: true,\n  savedVersion: {},\n})).views(self => ({\n  get isDirty() { return !deepEqual(self.toJSON(), self.savedVersion) },\n})).actions(self => ({\n  /* eslint-disable no-param-reassign */\n\n  afterCreate() { self.savedVersion = self.toJSON() },\n  isPathDirty: (path) => {\n    const current = getPathValue(self.toJSON(), path)\n    const initial = getPathValue(self.savedVersion, path)\n    return !deepEqual(current, initial)\n  },\n  markAsClean() {\n    self.savedVersion = self.toJSON()\n\n    Object.keys(self.savedVersion).forEach((key) => {\n      const value = self[key]\n      if (!value) { return }\n\n      if (value.isIEditable) {\n        value.markAsClean()\n      } else if (isObservableArray(value)) {\n        value.forEach(child => (child && child.isIEditable && child.markAsClean()))\n      }\n    })\n  },\n  reset() { Object.assign(self, self.savedVersion) },\n  set(key = {}, value = undefined) {\n    if (typeof key === 'string' && value !== undefined) {\n      // allows: model.set('foo.bar', 'bar')\n      if (self[key] !== undefined) {\n        self[key] = value\n      } else {\n        setPathValue(self, key, value)\n      }\n    } else if (typeof key === 'object' && value === undefined) {\n      // allows: model.set({ foo: 'Foo', bar: 'Bar' })\n      Object.assign(self, key)\n    }\n  },\n\n  /* eslint-enable no-param-reassign */\n}))\n\nexport default IEditable\n","import splitObjectPath from '@/utilities/splitObjectPath'\n\nexport default (object, path, value) => {\n  const split = splitObjectPath(path)\n  const property = split.pop()\n  const target = split.reduce((o, key) => o[key] || {}, object)\n\n  if (target && target.isIEditable) {\n    target.set(property, value)\n  } else {\n    target[property] = value\n  }\n}\n","export default function hash(value = '', radix = 16) {\n  const string = String(value)\n  let h = 0\n  string.split('').forEach((char) => {\n    /* eslint-disable no-bitwise */\n    h = ((h << 5) - h) + char.charCodeAt(0)\n    h &= h // Convert to 32-bit integer\n    /* eslint-enable no-bitwise */\n  })\n  return Math.abs(h).toString(radix)\n}\n\nexport const randomHash = () => hash(Math.random().toString())\n","import { types } from 'mobx-state-tree'\nimport { randomHash } from '@/utilities/hash'\n\nexport default types.model({\n  // Nothing\n}).volatile(() => ({\n  hash: '',\n})).actions(self => ({\n  afterCreate() { self.hash = randomHash() }, // eslint-disable-line no-param-reassign\n}))\n","import { getParent, hasParent } from 'mobx-state-tree'\n\nexport default (child, filterFunction = Boolean) => {\n  if (!hasParent(child)) { return null }\n\n  let parent = getParent(child)\n  while (parent) {\n    if (filterFunction(parent)) {\n      return parent\n    }\n\n    if (!hasParent(parent)) { return null }\n    parent = getParent(parent)\n  }\n\n  return null\n}\n","import core from 'mathjs/core'\n\nconst math = core.create()\nmath.import(require('mathjs/lib/expression/function/eval'))\nmath.import(require('mathjs/lib/expression/function/parse'))\nmath.import(require('mathjs/lib/function/arithmetic/add'))\nmath.import(require('mathjs/lib/function/arithmetic/ceil'))\nmath.import(require('mathjs/lib/function/arithmetic/divide'))\nmath.import(require('mathjs/lib/function/arithmetic/floor'))\nmath.import(require('mathjs/lib/function/arithmetic/mod'))\nmath.import(require('mathjs/lib/function/arithmetic/multiply'))\nmath.import(require('mathjs/lib/function/arithmetic/pow'))\nmath.import(require('mathjs/lib/function/arithmetic/round'))\nmath.import(require('mathjs/lib/function/arithmetic/subtract'))\nmath.import(require('mathjs/lib/function/logical'))\nmath.import(require('mathjs/lib/function/statistics/max'))\nmath.import(require('mathjs/lib/function/statistics/mean'))\nmath.import(require('mathjs/lib/function/statistics/min'))\nmath.import(require('mathjs/lib/function/statistics/sum'))\nmath.import(require('mathjs/lib/type/matrix/function/matrix'))\nmath.import(require('mathjs/lib/type/matrix/Matrix'))\nmath.import(require('mathjs/lib/type/matrix/DenseMatrix'))\n\nexport default math\n","import math from '@/utilities/math'\n\nexport default (expression) => {\n  const fns = []\n  const symbols = []\n\n  math.parse(expression).traverse((node) => {\n    if (node.fn) {\n      fns.push(node.fn.name)\n    }\n    if (\n      node.type === 'SymbolNode'\n      && !symbols.includes(node.name)\n      && !fns.includes(node.name)\n    ) {\n      symbols.push(node.name)\n    }\n  })\n  return symbols\n}\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport findParent from '@/utilities/findParent'\nimport math from '@/utilities/math'\nimport calculate from '@/utilities/math/calculate'\nimport toSymbols from '@/utilities/math/toSymbols'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.modifiedValue()),\n  IEditable,\n  types.model({\n    name: 'New Attribute...',\n    raw: types.optional(types.union(types.number, types.string), 0),\n  }).views(self => ({\n    get character() { return findParent(self, p => p.isCharacter) },\n    get id() {\n      return self.name.split(':').pop()\n        .trim().toLowerCase()\n        .replace(/[^a-z0-9]/ig, '')\n    },\n    get isComputed() { return typeof self.raw === 'string' },\n  })).actions((self) => {\n    let computing = false\n\n    return ({\n      effects() {\n        if (!self.character) return []\n        return self.character.activeEffects().filter(effect => effect.targetId === self.id)\n      },\n      modifiedValue() { return (self.value() || 0) + self.modifier() },\n      modifier() { return math.sum(self.effects().map(effect => effect.modifier)) },\n      modifierText() {\n        return self.effects().map(effect => `${effect.sourceName()}: ${effect.modifier}`).join(', ')\n      },\n      value() {\n        if (!self.isComputed) return self.raw\n        if (self.character === null) return 0\n        if (computing) return 0\n\n        computing = true\n        let computed = 0\n\n        try {\n          const values = toSymbols(self.raw).reduce((all, symbol) => {\n            const attribute = self.character.attributes.findBy('id', symbol)\n            return Object.assign(all, { [symbol]: attribute ? attribute.modifiedValue() : 0 })\n          }, {})\n\n          computed = calculate(self.raw, values)\n        } catch (error) {\n          // eslint-disable-next-line no-undef\n          if (process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.error(`Error computing: ${self.raw}`)\n          }\n          computed = 0\n        }\n\n        computing = false\n        return computed\n      },\n    })\n  }).preProcessSnapshot(({ value, ...snapshot }) => ({ ...snapshot, raw: value }))\n    .postProcessSnapshot(({ raw, ...snapshot }) => ({ ...snapshot, value: raw }))\n).named('Attribute')\n","import math from '@/utilities/math'\nimport toSymbols from '@/utilities/math/toSymbols'\n\nexport default (expression = '', data = {}, options = { defaultSymbolValue: 0 }) => {\n  const safeData = { ...data }\n  toSymbols(expression).forEach((symbol) => {\n    if (safeData[symbol] === undefined) {\n      safeData[symbol] = options.defaultSymbolValue\n    }\n  })\n\n  return math.eval(expression, safeData)\n}\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(),\n  IEditable,\n  types.model({\n    name: 'New Descriptor...',\n    value: '',\n  })\n).named('Descriptor')\n","import { isObservableArray } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport compareBy from '@/utilities/compareBy'\n\nexport default (TYPE, options = {}) => {\n  const TypedArrayWrapper = types.model({\n    values: types.array(TYPE),\n  }).views(self => ({\n    get asArray() { return self.values.slice() },\n    get first() { return self.length ? self.at(0) : undefined },\n    get last() { return self.length ? self.at(self.length - 1) : undefined },\n    get length() { return self.values.length },\n  })).actions(self => ({\n    /* eslint-disable no-param-reassign */\n\n    at: n => self.values[n],\n    clear: () => self.values.clear(),\n    delete: (object) => { self.values.replace(self.values.filter(item => item !== object)) },\n    deleteAt: (index) => { self.values.replace(self.values.filter((_, n) => n !== index)) },\n    every: fn => self.values.every(fn),\n    filter: fn => self.values.filter(fn),\n    find: fn => self.values.find(fn),\n    findBy: (key, value) => self.find(item => item[key] === value),\n    findById: (id) => {\n      if (!TYPE.identifierAttribute) return null\n      return self.find(item => item[TYPE.identifierAttribute] === id) || null\n    },\n    forEach: fn => self.values.forEach(fn),\n    includes: (searchElement, fromIndex) => self.values.includes(searchElement, fromIndex),\n    indexOf: element => self.values.indexOf(element),\n    insert: (object, index) => self.splice(index, 0, object),\n    map: fn => self.values.map(fn),\n    pop: () => self.values.pop(),\n    push: (...values) => self.values.replace([].concat(self.values, values)),\n    reduce: (fn, initial) => self.values.reduce(fn, initial),\n    replace: values => self.values.replace(values),\n    shift: () => self.values.shift(),\n    slice: (start, end) => self.values.slice(start, end),\n    some: fn => self.values.some(fn),\n    sortBy: (property, direction = 'asc') => {\n      if (!['asc', 'desc'].includes(direction)) {\n        throw new TypeError(`direction must be \"asc\" or \"desc\", got: \"${direction}\"`)\n      }\n      const values = self.values.slice().sort(compareBy(property))\n      self.values.replace(direction === 'desc' ? values.reverse() : values)\n      return self\n    },\n    splice: (index, deleteCount, value) => self.values.splice(index, deleteCount, value),\n    toObject: (keyProp, valueProp) => self.values.reduce((object, entry) => {\n      const key = entry[keyProp]\n      const value = valueProp !== undefined ? entry[valueProp] : entry\n      return { ...object, [key]: typeof value === 'function' ? value() : value }\n    }, {}),\n    unshift: (...values) => self.values.replace([].concat(values, self.values)),\n\n    /* eslint-enable no-param-reassign */\n  })).postProcessSnapshot(({ values }) => values)\n\n  return types.custom({\n    ...options,\n    fromSnapshot: (snapshot = []) => TypedArrayWrapper.create({ values: snapshot }),\n    getValidationMessage: (snapshot) => {\n      if (!snapshot) return ''\n      if (isObservableArray(snapshot) || Array.isArray(snapshot)) {\n        if (snapshot.every(f => TYPE.is(f))) return ''\n      }\n\n      return 'Collection types must be assigned an array of values or null'\n    },\n    isTargetType: target => TypedArrayWrapper.is(target),\n    name: options.name || 'Collection',\n  })\n}\n","export default (prop, reversed = false) => (objectA, objectB) => {\n  const a = String(objectA instanceof Map ? objectA.get(prop) : objectA[prop])\n  const b = String(objectB instanceof Map ? objectB.get(prop) : objectB[prop])\n\n  if (reversed) return b.localeCompare(a)\n  return a.localeCompare(b)\n}\n","import { types } from 'mobx-state-tree'\nimport Attribute from '@/models/Attribute'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    condition: '',\n    modifier: 0,\n    targetId: '',\n  }).actions(self => ({\n    afterAttach() {\n      if (!self.targetId && self.available().length) {\n        // eslint-disable-next-line no-param-reassign\n        self.targetId = self.available().first.id\n      }\n    },\n\n    available() {\n      const character = self.character()\n      return character ? character.attributes : CollectionOf(Attribute).create([])\n    },\n    character() { return findParent(self, p => p.isCharacter) },\n    isApplicable() {\n      const character = self.character()\n      return Boolean(\n        !self.condition ||\n        (character && character.conditions.includes(self.condition))\n      )\n    },\n    source() { return findParent(self, p => p.name) || null },\n    sourceName() { return self.source() ? self.source().name : 'Unknown' },\n    target() {\n      const character = self.character()\n      return character ? character.attributes.findBy('name', self.targetId) : null\n    },\n  }))\n).named('Effect')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(),\n  IEditable,\n  types.model({\n    description: '',\n    effects: CollectionOf(Effect),\n    equipped: false,\n    name: 'New Item...',\n  }),\n).named('Item')\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(),\n  IEditable,\n  types.model({\n    current: 0,\n    maximum: 10,\n    name: 'New Resource...',\n  })\n).named('Resource')\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.mastery),\n  IEditable,\n  types.model({\n    mastery: 1,\n    name: 'New Skill...',\n    theory: 0,\n  }).views(self => ({\n    get isComplex() { return self.theory !== 0 },\n    get isSimple() { return self.theory === 0 },\n  }))\n).named('Skill')\n","import { types } from 'mobx-state-tree'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport Resource from '@/models/Resource'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    amount: 0,\n    resourceName: '',\n  }).views(self => ({\n    get available() {\n      return self.character ? self.character.resources : CollectionOf(Resource).create([])\n    },\n    get character() { return findParent(self, p => p.isCharacter) },\n  })).actions(self => ({\n    afterAttach() {\n      if (!self.resourceName && self.available.length) {\n        // eslint-disable-next-line no-param-reassign\n        self.resourceName = self.available.first.name\n      }\n    },\n    resource() {\n      if (!self.character) return null\n      return self.character.resources.findBy('name', self.resourceName)\n    },\n  }))\n).named('Cost')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport ResourceCost from '@/models/ResourceCost'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.level),\n  IEditable,\n  types.model({\n    costs: CollectionOf(ResourceCost), // Resources\n    description: '',\n    effects: CollectionOf(Effect),\n    isActive: false,\n    level: 0,\n    name: 'New Spell...',\n  }).views(self => ({\n    get character() { return findParent(self, p => p.isCharacter) },\n  })).actions(self => ({\n    cast() {\n      if (self.isAffordable()) {\n        self.costs.forEach((cost) => {\n          const resource = cost.resource()\n          resource.set({ current: resource.current - cost.amount })\n        })\n      }\n    },\n    isAffordable() {\n      if (!self.character || !self.costs.length) return true\n      return self.costs.every(cost => (\n        cost.resource() && cost.resource().current >= cost.amount\n      ))\n    },\n  }))\n).named('Spell')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.value),\n  IEditable,\n  types.model('Trait', {\n    effects: CollectionOf(Effect),\n    name: 'New Trait...',\n    value: 0,\n  })\n).named('Trait')\n","import { types } from 'mobx-state-tree'\nimport Attribute from '@/models/Attribute'\nimport Descriptor from '@/models/Descriptor'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport Item from '@/models/Item'\nimport Resource from '@/models/Resource'\nimport Skill from '@/models/Skill'\nimport Spell from '@/models/Spell'\nimport Trait from '@/models/Trait'\nimport flatten from '@/utilities/flatten'\n\nexport default types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    attributes: CollectionOf(Attribute),\n    conditions: CollectionOf(types.string), // ['vs Goblins', 'Crinos Form']\n    descriptors: CollectionOf(Descriptor),\n    experience: 0,\n    items: CollectionOf(Item), // equipped / unequipped, have Effects\n    resources: CollectionOf(Resource),\n    skills: CollectionOf(Skill),\n    spells: CollectionOf(Spell),\n    traits: CollectionOf(Trait), // have Effects\n  }).volatile(() => ({\n    isCharacter: true,\n  })).actions(self => ({\n    activeEffects() {\n      return self.effects().filter(effect => effect && effect.isApplicable())\n    },\n    availableConditions() {\n      return self.effects()\n        .map(e => e.condition).concat(self.conditions.asArray)\n        .sort()\n        .filter((effect, i, all) => !i || effect !== all[i - 1])\n        .filter(Boolean)\n    },\n    effects() {\n      return flatten([\n        // Trait Effects first, because they're inherent\n        self.traits.filter(Boolean).map(trait => trait.effects.values),\n        // Direct Effects second, because they're cast on the character\n        self.spells.filter(spell => spell.isActive).map(spell => spell.effects.values),\n        // Item Effects third, because they're indirect\n        self.items.filter(item => item.equipped).map(item => item.effects.values),\n      ]).filter(Boolean)\n    },\n  }))\n).named('Character')\n","export default function flatten(array, depth = Infinity) {\n  if (!array || !Array.isArray(array)) {\n    throw new TypeError(`cannot flatten non-Array value ${JSON.stringify(array)}`)\n  }\n\n  return array.reduce((all, next) => {\n    if (depth > 1 && next && Array.isArray(next)) {\n      return all.concat(flatten(next, depth - 1))\n    }\n\n    return all.concat(next)\n  }, [])\n}\n","import { types } from 'mobx-state-tree'\n\nexport default (min, max, defaultTo = min) => (\n  types.optional(\n    types.refinement(\n      types.number,\n      n => n === undefined || (n >= min && n <= max)\n    ),\n    defaultTo\n  )\n)\n","import { types } from 'mobx-state-tree'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport between from '@/models/types/between'\n\nconst Layout = types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    categorize: false,\n    children: CollectionOf(types.late(() => Layout)),\n    colSpan: between(1, 4, 1),\n    columns: between(1, 4, 1),\n    filter: types.maybe(types.string),\n    sortOption: types.maybe(types.number),\n    title: types.union(types.maybe(types.string), types.literal(false)),\n    type: types.maybe(types.string),\n  })\n).named('Layout')\n\nexport default Layout\n","export default (value, { min, max }) => {\n  if (min !== undefined && value < min) return min\n  if (max !== undefined && value > max) return max\n  return value\n}\n","import React from 'react'\nimport bound from '@/utilities/bound'\nimport noop from '@/utilities/noop'\nimport './Editable.scss'\n\nconst TYPES = [\n  // Strings\n  'text', 'multiline',\n  // Checkboxes\n  'boolean',\n  // Numbers\n  'number', 'slider',\n]\n\nexport default class Editable extends React.Component {\n  static displayName = 'Editable'\n\n  static defaultProps = {\n    className: '',\n    forceEditMode: false,\n    max: undefined,\n    min: undefined,\n    onChange: noop,\n    onEditEnd: noop,\n    onEditStart: noop,\n    onKeyDown: noop,\n    onKeyPress: noop,\n    onKeyUp: noop,\n    placeholder: '',\n    readOnly: false,\n    readOnlyValue: undefined,\n    step: 1,\n    type: undefined,\n    value: '',\n  }\n\n  state = {\n    editing: false,\n    resetValue: this.props.value,\n  }\n\n  get editing() {\n    return this.props.forceEditMode || this.state.editing\n  }\n\n  getEditorType = () => {\n    const { value } = this.props\n    let { type } = this.props\n\n    if (type !== undefined && TYPES.includes(type)) { return type }\n\n    type = typeof value\n    if (type === 'string') { return value.includes('\\n') ? 'multiline' : 'text' }\n    if (['boolean', 'number'].includes(type)) { return type }\n\n    return 'text'\n  }\n\n  resetChanges = () => {\n    this.props.onChange(this.state.resetValue, this.props.value)\n    this.handleToggleEditing()\n  }\n\n  createRefWithAutoFocus = (editor) => {\n    if (!editor) { return }\n    this.editor = editor\n\n    const editorType = this.getEditorType()\n    if (editorType !== 'boolean' && typeof editor.focus === 'function') { editor.focus() }\n\n    if (['boolean', 'number'].includes(this.getEditorType())) { return }\n    if (this.props.forceEditMode && typeof editor.setSelectionRange === 'function') {\n      editor.setSelectionRange(editor.value.length, editor.value.length)\n    }\n  }\n\n  handleChange = ({ target }) => {\n    const { min, max } = this.props\n    let { value } = target\n\n    // eslint-disable-next-line default-case\n    switch (this.getEditorType()) {\n      case 'slider':\n      case 'number':\n        value = parseFloat(value || 0)\n        // eslint-disable-next-line prefer-destructuring\n        if (Number.isNaN(value)) { value = this.props.value }\n        value = bound(value, { max, min })\n    }\n    this.props.onChange(value, this.state.resetValue)\n  }\n\n  handleKeys = (event) => {\n    const { target, key, ctrlKey, metaKey } = event\n\n    if (this.props.onKeyDown !== noop) {\n      this.props.onKeyDown(event)\n      if (event.isDefaultPrevented()) return\n    }\n\n    if (key === 'Escape') { this.resetChanges() }\n    if (key === 'Enter') {\n      if (target.nodeName !== 'TEXTAREA' || ctrlKey || metaKey) {\n        this.handleToggleEditing()\n      }\n    }\n  }\n\n  handleReceivingFocus = () => {\n    if (this.props.readOnly) { return }\n    if (!this.state.editing) { this.handleToggleEditing() }\n  }\n\n  handleToggleEditing = () => {\n    if (this.props.readOnly) { return }\n\n    const editing = !this.editing\n\n    this.setState({ editing, resetValue: this.props.value }, () => {\n      if (this.state.editing) {\n        this.props.onEditStart()\n      } else {\n        this.props.onEditEnd()\n      }\n    })\n  }\n\n  selectOnFocus = event => event.target.select()\n\n  toggleBoolean = () => {\n    this.props.onEditStart()\n    this.props.onChange(!this.props.value, this.props.value)\n    this.props.onEditEnd()\n  }\n\n  renderBoolean = () => (\n    <input\n      type=\"checkbox\"\n      checked={Boolean(this.props.value)}\n      disabled={this.props.readOnly}\n      onChange={this.toggleBoolean}\n      ref={this.createRefWithAutoFocus}\n    />\n  )\n\n  renderMultiline = () => {\n    if (!this.editing) {\n      const lines = (this.props.value || this.props.placeholder).split('\\n')\n      const paragraphs = lines.map((line, index) => <p key={index}>{line}</p>\n      )\n      const className = ['multiline', this.props.value ? '' : 'placeholder'].join(' ').trim()\n      return <div className={className} onClick={this.handleToggleEditing}>{paragraphs}</div>\n    }\n\n    return (\n      <textarea\n        disabled={this.props.readOnly}\n        onBlur={this.handleToggleEditing}\n        onChange={this.handleChange}\n        onFocus={this.selectOnFocus}\n        onKeyDown={this.handleKeys}\n        onKeyPress={this.props.onKeyPress}\n        onKeyUp={this.props.onKeyUp}\n        placeholder={this.props.placeholder}\n        ref={this.createRefWithAutoFocus}\n        rows={this.props.value.split('\\n').length}\n        value={this.props.value}\n      />\n    )\n  }\n\n  renderNumber = () => {\n    if (!this.editing) { return this.renderStatic() }\n\n    return (\n      <input\n        type=\"number\"\n        disabled={this.props.readOnly}\n        max={this.props.max}\n        min={this.props.min}\n        onBlur={this.handleToggleEditing}\n        onChange={this.handleChange}\n        onFocus={this.selectOnFocus}\n        onKeyDown={this.handleKeys}\n        onKeyPress={this.props.onKeyPress}\n        onKeyUp={this.props.onKeyUp}\n        placeholder={this.props.placeholder}\n        ref={this.createRefWithAutoFocus}\n        step={this.props.step}\n        value={this.props.value}\n      />\n    )\n  }\n\n  renderSlider = () => (\n    <input\n      type=\"range\"\n      disabled={this.props.readOnly}\n      max={this.props.max}\n      min={this.props.min}\n      onBlur={this.handleToggleEditing}\n      onChange={this.handleChange}\n      onKeyDown={this.props.onKeyDown}\n      onKeyPress={this.props.onKeyPress}\n      onKeyUp={this.props.onKeyUp}\n      ref={this.createRefWithAutoFocus}\n      step={this.props.step}\n      value={this.props.value}\n    />\n  )\n\n  renderText = () => {\n    if (!this.editing) { return this.renderStatic() }\n\n    return (\n      <input\n        type=\"text\"\n        disabled={this.props.readOnly}\n        onBlur={this.handleToggleEditing}\n        onChange={this.handleChange}\n        onFocus={this.selectOnFocus}\n        onKeyDown={this.handleKeys}\n        onKeyPress={this.props.onKeyPress}\n        onKeyUp={this.props.onKeyUp}\n        placeholder={this.props.placeholder}\n        ref={this.createRefWithAutoFocus}\n        value={this.props.value}\n      />\n    )\n  }\n\n  renderStatic = () => {\n    const { placeholder, readOnlyValue, value } = this.props\n    const showPlaceholder = placeholder && !value\n    const displayValue = readOnlyValue !== undefined ? readOnlyValue : value\n    const className = showPlaceholder ? 'placeholder' : ''\n    return (\n      <span className={className} onClick={this.handleToggleEditing}>\n        {showPlaceholder ? placeholder : displayValue}\n      </span>\n    )\n  }\n\n  renderEditor = () => {\n    switch (this.getEditorType()) {\n      case 'boolean':\n        return this.renderBoolean()\n      case 'slider':\n        return this.renderSlider()\n      case 'multiline':\n        return this.renderMultiline()\n      case 'number':\n        return this.renderNumber()\n      default:\n        return this.renderText()\n    }\n  }\n\n  render = () => {\n    const { className, readOnly } = this.props\n\n    const classes = [\n      'editable',\n      this.editing ? 'editing' : '',\n      className || '',\n      readOnly ? 'readonly' : '',\n    ].filter(Boolean)\n\n    let props = {}\n    if (!readOnly && !this.editing) {\n      props = { onFocus: this.handleReceivingFocus, tabIndex: '0' }\n    }\n\n    return (\n      <div className={classes.join(' ')} {...props}>\n        {this.renderEditor()}\n      </div>\n    )\n  }\n}\n","export default (start, end) => {\n  const step = (start <= end) ? 1 : -1\n  const length = (Math.abs(end - start) / Math.abs(step)) + 1\n  return Array(...Array(length)).map((_, i) => start + (i * step))\n}\n","import React, { Component } from 'react'\nimport bound from '@/utilities/bound'\nimport math from '@/utilities/math'\nimport noop from '@/utilities/noop'\nimport range from '@/utilities/range'\nimport './Rating.scss'\n\nexport default class Rating extends Component {\n  static defaultProps = {\n    allowExcess: false,\n    current: 0,\n    iconExcess: <span className=\"dot excess icon-add\" />,\n    iconOff: <span className=\"dot empty\" />,\n    iconOn: <span className=\"dot filled\" />,\n    maximum: 5,\n    onChange: noop,\n  }\n\n  handleIconClick = (event) => {\n    const number = parseInt(event.target.getAttribute('data-number'), 10)\n    this.props.onChange(number === this.props.current ? number - 1 : number)\n  }\n\n  render = () => {\n    const { allowExcess, current, iconExcess, iconOff, iconOn, maximum } = this.props\n    const total = allowExcess ? math.max(current, maximum) : maximum\n\n    return (\n      <div className=\"rating\">\n        {(total > 0 || (allowExcess && current > 0))\n          ? range(1, bound(total, { min: 1 })).map(number => (\n            <span data-number={number} key={number} onClick={this.handleIconClick} title={number}>\n              {(number <= current && number <= maximum) && iconOn}\n              {(number > current && number <= maximum) && iconOff}\n              {(number > maximum) && iconExcess}\n            </span>\n          ))\n          : null\n        }\n      </div>\n    )\n  }\n}\n","import { observer } from 'mobx-react'\nimport { onSnapshot } from 'mobx-state-tree'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport Rating from '@/components/Rating'\nimport bound from '@/utilities/bound'\nimport math from '@/utilities/math'\nimport noop from '@/utilities/noop'\nimport './Attribute.scss'\n\n@observer class Attribute extends Component {\n  static defaultProps = {\n    model: {},\n    onDelete: noop,\n    rating: false,\n  }\n\n  static sortOptions = [{\n    display: 'icon-sort-name-asc',\n    getter: model => model.name,\n  }, {\n    display: 'icon-sort-value-asc',\n    getter: model => model.modifiedValue(),\n  }]\n\n  CACHE = {}\n\n  componentDidMount() {\n    this.onSnapshotDisposer = onSnapshot(this.props.model.character, this.handleSnapshot)\n  }\n  componentWillUnmount() { this.onSnapshotDisposer() }\n\n  handleSnapshot = (snapshot) => {\n    const effects = this.props.model.effects().map(e => e.toJSON())\n    if (\n      JSON.stringify(effects) !== JSON.stringify(this.CACHE.effects) ||\n      JSON.stringify(snapshot.conditions) !== this.CACHE.conditions ||\n      this.CACHE.value !== this.props.model.value()\n    ) {\n      this.CACHE.conditions = JSON.stringify(snapshot.conditions)\n      this.CACHE.effects = effects\n      this.CACHE.value = this.props.model.value()\n      this.forceUpdate()\n    }\n  }\n  handleChangeName = (name) => {\n    const { id } = this.props.model\n    this.props.model.set({ name })\n    this.props.model.character.effects()\n      .filter(effect => effect.targetId === id)\n      .forEach((effect) => {\n        effect.set({ targetId: '' })\n        effect.set({ targetId: this.props.model.id })\n      })\n  }\n  handleCommitName = () => (this.props.model.name === '' && this.props.onDelete(this.props.model))\n  handleChangeValue = (raw) => {\n    let value = String(raw).replace(/[^a-z0-9+*()\\-/, ]/gi, '')\n    if (!Number.isNaN(Number(raw))) {\n      value = bound(Number(raw) || '', { max: 999, min: -99 })\n    }\n    this.props.model.set({ raw: value })\n  }\n  handleCommitValue = () => {\n    if (String(this.props.model.raw) === '') this.props.model.set({ raw: 0 })\n  }\n  handleValueKeyDown = ({ key }) => {\n    const { model } = this.props\n    if (model.isComputed) return\n\n    switch (key) {\n      case 'ArrowUp':\n        model.set({ raw: model.value() + 1 }); break\n      case 'ArrowDown':\n        model.set({ raw: model.value() - 1 }); break\n      default:\n    }\n  }\n\n  render() {\n    const { model, rating } = this.props\n    const modifiedValue = model.modifiedValue()\n    const value = model.value()\n\n    const className = [\n      'attribute',\n      `as-${rating ? 'rating' : 'numeric'}`,\n      `${model.isComputed ? 'is' : 'not'}-computed`,\n    ].join(' ')\n\n    const modifier = model.modifier()\n    const modifierClassName = [\n      'modifier',\n      modifier > 0 && 'positive',\n      modifier < 0 && 'negative',\n      modifier === 0 && 'zero',\n    ].filter(Boolean).join(' ')\n\n    return (\n      <div className={className}>\n        <Editable\n          className=\"name\"\n          onChange={this.handleChangeName}\n          onEditEnd={this.handleCommitName}\n          value={model.name}\n        />\n        <Editable\n          className=\"value rating\"\n          onChange={this.handleChangeValue}\n          onEditEnd={this.handleCommitValue}\n          onKeyDown={this.handleValueKeyDown}\n          readOnlyValue={(\n            <Rating\n              allowExcess\n              current={modifiedValue}\n              maximum={value}\n            />\n          )}\n          type=\"text\"\n          value={model.raw}\n        />\n        <Editable\n          className=\"value numeric\"\n          onChange={this.handleChangeValue}\n          onEditEnd={this.handleCommitValue}\n          onKeyDown={this.handleValueKeyDown}\n          readOnlyValue={value}\n          type=\"text\"\n          value={model.raw}\n        />\n        {model.effects().length !== 0 && (\n          <div\n            className={modifierClassName}\n            title={model.modifierText()}\n          >\n            {modifiedValue}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Attribute\n","import { observer } from 'mobx-react'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport noop from '@/utilities/noop'\nimport './Descriptor.scss'\n\n@observer class Descriptor extends Component {\n  static defaultProps = {\n    model: {},\n    onDelete: noop,\n  }\n\n  static sortOptions = [{\n    display: 'icon-sort-name-asc',\n    getter: model => model.name,\n  }, {\n    display: 'icon-sort-value-asc',\n    getter: model => model.value,\n  }]\n\n  handleChangeName = name => this.props.model.set({ name })\n  handleChangeValue = value => this.props.model.set({ value })\n  handleCommitName = () => (this.props.model.name === '' && this.props.onDelete(this.props.model))\n\n  render() {\n    return (\n      <div className=\"descriptor\">\n        <Editable\n          className=\"name\"\n          onChange={this.handleChangeName}\n          onEditEnd={this.handleCommitName}\n          value={this.props.model.name}\n        />\n        <Editable\n          className=\"value\"\n          type=\"text\"\n          onChange={this.handleChangeValue}\n          value={this.props.model.value}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Descriptor\n","import { observer } from 'mobx-react'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport './Effect.scss'\n\n@observer class Effect extends Component {\n  static defaultProps = {\n    model: {},\n  }\n\n  static sortOptions = [{\n    display: 'icon-sort-name-asc',\n    getter: model => [!model.targetId, model.targetId],\n  }, {\n    display: 'icon-sort-value-asc',\n    getter: model => [!model.condition, model.modifier],\n  }]\n\n  handleChangeCondition = condition => this.props.model.set({ condition })\n  handleChangeModifier = modifier => this.props.model.set({ modifier })\n  handleChangeTarget = ({ target: { value } }) => this.props.model.set({ targetId: value })\n\n  render() {\n    const { available, condition = '', isApplicable, modifier, targetId } = this.props.model\n\n    return (\n      <div className={`effect ${isApplicable ? 'applicable' : ''}`.trim()}>\n        <select className=\"target\" value={targetId} onChange={this.handleChangeTarget}>\n          {available().map(({ hash, id, name }) => (\n            <option key={hash} value={id}>{name}</option>\n          ))}\n        </select>\n        <Editable\n          className=\"modifier\"\n          max={999}\n          min={-99}\n          onChange={this.handleChangeModifier}\n          value={modifier}\n        />\n        <Editable\n          className=\"condition\"\n          onChange={this.handleChangeCondition}\n          placeholder=\"Any\"\n          value={condition}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Effect\n","import React, { Component, Fragment } from 'react'\nimport { createPortal } from 'react-dom'\nimport noop from '@/utilities/noop'\nimport './Expandable.scss'\n\nexport default class Expandable extends Component {\n  static defaultProps = {\n    expandByDefault: false,\n    omitItemWrapper: false,\n    onToggle: noop,\n    toggleButtonParent: null,\n    toggleButtonText: '',\n  }\n\n  state = {\n    expanded: false,\n  }\n\n  expander = React.createRef()\n\n  componentWillMount() {\n    this.setState({ expanded: this.props.expandByDefault })\n  }\n  componentDidMount() {\n    this.expander.current.parentElement.classList.add('expandable-wrapper')\n  }\n\n  handleToggle = () => {\n    const { classList } = this.expander.current.parentElement\n    const { expanded } = this.state\n\n    // eslint-disable-next-line react/no-access-state-in-setstate\n    this.setState({ expanded: !expanded }, () => {\n      this.props.onToggle(!expanded)\n      classList[!expanded ? 'add' : 'remove']('expanded')\n    })\n  }\n\n  renderExpanded = () => {\n    const { children, omitItemWrapper } = this.props\n    return omitItemWrapper\n      ? children\n      : <div className=\"expandable\"> {children}</div>\n  }\n\n  render() {\n    const { toggleButtonParent, toggleButtonText } = this.props\n    const toggleState = this.state.expanded ? 'expanded' : 'collapsed'\n    const buttonProps = {\n      className: `expandable-toggle icon-${toggleState}`,\n      onClick: this.handleToggle,\n      ref: this.expander,\n    }\n\n    const toggleButton = <div {...buttonProps} text={toggleButtonText} />\n    return (\n      <Fragment>\n        {toggleButtonParent ? createPortal(toggleButton, toggleButtonParent) : toggleButton}\n        {this.state.expanded && this.renderExpanded()}\n      </Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport noop from '@/utilities/noop'\nimport './MultiToggle.scss'\n\nexport default class MultiToggle extends Component {\n  static defaultProps = {\n    className: '',\n    onChange: noop,\n    options: [],\n    selected: undefined,\n  }\n\n  state = { selected: null }\n\n  handleOptionClick = ({ target }) => {\n    const index = [...target.parentElement.children].indexOf(target)\n    const selected = this.props.options[index]\n\n    if (this.props.selected !== undefined) {\n      this.props.onChange(selected)\n    } else {\n      this.setState({ selected })\n    }\n  }\n\n  render() {\n    const { className, options } = this.props\n    const selected = this.props.selected !== undefined\n      ? this.props.selected\n      : this.state.selected\n\n    return (\n      <div className={`multi-toggle ${className}`.trim()}>\n        {options.map((option, key) => (\n          <div\n            className={`toggle ${option === selected ? 'on' : 'off'}`.trim()}\n            key={key}\n            onClick={this.handleOptionClick}\n          >\n            {option.display}\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","export default function debounce(func, wait, immediate) {\n  let timeout\n\n  return (...args) => {\n    const later = () => {\n      timeout = null\n      if (!immediate) func.apply(this, args)\n    }\n\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) func.apply(this, args)\n  }\n}\n","import { onSnapshot } from 'mobx-state-tree'\nimport React from 'react'\nimport Sortable from 'sortablejs'\nimport MultiToggle from '@/components/MultiToggle'\nimport CollectionOf from '@/models/generic/Collection'\nimport debounce from '@/utilities/debounce'\nimport noop from '@/utilities/noop'\nimport unique from '@/utilities/unique'\nimport './List.scss'\n\nconst NO_CATEGORY = 'Uncategorized'\n\nconst buildSorter = (getter, reversed = false) => (A, B) => {\n  const a = getter(A)\n  const b = getter(B)\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    for (let i = 0; i < a.length; i += 1) {\n      if (a[i] !== b[i]) {\n        if (reversed) return b[i] < a[i] ? -1 : 1\n        return a[i] < b[i] ? -1 : 1\n      }\n    }\n\n    return 0\n  }\n\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) return 0\n    if (reversed) return b < a ? -1 : 1\n    return a < b ? -1 : 1\n  }\n\n  const aString = String(a)\n  const bString = String(b)\n\n  if (reversed) return bString.localeCompare(aString)\n  return aString.localeCompare(bString)\n}\n\nexport default (Model, Component, props = {}) => {\n  const sortOptions = (Component.sortOptions || []).map(sorter => ({\n    ...sorter,\n    comparitor: buildSorter(sorter.getter),\n    display: typeof sorter.display === 'string'\n      ? <span className={sorter.display} />\n      : sorter.display,\n  }))\n\n  return class List extends React.Component {\n    static defaultProps = {\n      className: '',\n      collection: CollectionOf(Model).create([]),\n      columns: 1,\n      layout: undefined,\n      sortable: true,\n      title: props.title || '',\n      ...props,\n    }\n\n    Component = Component\n    Model = Model\n\n    container = React.createRef()\n    expandedItems = {}\n    filterEl = React.createRef()\n    onDataSnapshotDisposer = noop\n    onLayoutSnapshotDisposer = noop\n    sortable = null\n    state = {\n      expanded: {},\n      sortOption: null,\n    }\n\n    componentDidMount() {\n      if (this.props.layout) {\n        const { sortOption: sortOptionIndex } = this.props.layout\n        if (sortOptions.length && sortOptionIndex !== undefined) {\n          this.setState({ sortOption: sortOptions[sortOptionIndex] || null })\n        }\n        this.onLayoutSnapshotDisposer = onSnapshot(this.props.layout,\n          debounce(() => this.forceUpdate(), 100, true)\n        )\n      }\n\n      const { sortable } = this.props\n      if (sortable) {\n        this.sortable = Sortable.create(this.container.current, {\n          disabled: !sortable,\n          draggable: '.list-item-wrapper',\n          handle: '.drag-handle',\n          onEnd: () => {\n            this.container.current.classList.remove('dragging')\n            this.props.collection.replace(\n              [...this.container.current.querySelectorAll('.list-item-wrapper')]\n                .map(item => parseInt(item.getAttribute('data-index'), 10))\n                .map(targetIndex => this.props.collection.at(targetIndex))\n            )\n          },\n          onStart: () => this.container.current.classList.add('dragging'),\n        })\n      }\n      this.onDataSnapshotDisposer = onSnapshot(this.props.collection, () => this.forceUpdate())\n    }\n    componentWillReceiveProps() {\n      if (this.sortable) this.sortable.option('disabled', !this.props.sortable)\n    }\n    componentWillUnmount() {\n      this.onDataSnapshotDisposer()\n      this.onLayoutSnapshotDisposer()\n    }\n\n    get categories() {\n      const list = this.props.collection.asArray.reduce((all, next) => (\n        all.concat(next.categories || [])\n      ), [])\n\n\n      if (!list.length) return []\n      return unique(list.filter(item => item !== NO_CATEGORY)).sort().concat(NO_CATEGORY)\n    }\n\n    getCategoryItems = (items, category) => (\n      (category && category !== NO_CATEGORY)\n        ? items.filter(item => (item.categories || []).includes(category))\n        : items.filter(item => (item.categories || []).length === 0)\n    )\n\n    handleAdd = () => {\n      this.props.collection.push(Model.create({}))\n      this.forceUpdate()\n    }\n    handleDelete = ({ target }) => {\n      const index = parseInt(target.parentNode.getAttribute('data-index'), 10)\n      this.props.collection.deleteAt(index)\n      this.forceUpdate()\n    }\n    handleFilterChange = ({ target }) => this.props.layout.set({ filter: target.value })\n    handleSort = () => this.props.collection.sortBy('name')\n    handleSortChange = (clicked) => {\n      const { sortOption: current } = this.state\n      this.setState({ sortOption: current === clicked ? null : clicked }, () => {\n        this.props.layout.set({\n          sortOption: current === clicked ? undefined : sortOptions.indexOf(clicked),\n        })\n      })\n    }\n    handleToggleCategorized = () => {\n      this.props.layout.set({ categorize: !this.props.layout.categorize })\n    }\n    handleToggleExpanded = (hash, expanded) => {\n      this.setState(state => ({\n        ...state,\n        expanded: { ...state.expanded, [hash]: expanded },\n      }))\n    }\n\n    renderCategoryWidget = () => {\n      const { layout } = this.props\n      const { categories } = this\n      if (!categories.length) return null\n\n      const className = [\n        'categorize icon-categorize',\n        layout.categorize ? 'on' : 'off',\n      ].join(' ')\n\n      return <>\n        <div {...{ className }} onClick={this.handleToggleCategorized} />\n        <select\n          className=\"filter\"\n          onChange={this.handleFilterChange}\n          ref={this.filterEl}\n          tabIndex={-1}\n          value={layout.filter}\n        >\n          <option value=\"\">All</option>\n          {categories.map(name => <option key={name} value={name}>{name}</option>)}\n        </select>\n      </>\n    }\n    renderSortWidget = () => {\n      if (!this.props.sortable) return null\n      if (!sortOptions.length) return null\n\n      return (\n        <MultiToggle\n          className=\"sorter\"\n          onChange={this.handleSortChange}\n          options={sortOptions}\n          selected={this.state.sortOption}\n        />\n      )\n    }\n    renderCategory = (category, data) => {\n      const { columns } = this.props\n      const categoryItems = this.getCategoryItems(data, category)\n      if (!categoryItems.length) return null\n\n      const values = categoryItems.map(item => item.categoryValue)\n      const min = Math.min(...values)\n      const max = Math.max(...values)\n\n      return (\n        <div key={category} className=\"category\">\n          <div className=\"details\">\n            <div className=\"title\">Category: {category} ({categoryItems.length})</div>\n            {(!Number.isNaN(min) && !Number.isNaN(max)) && (\n              <div className=\"range\">{min}-{max}</div>\n            )}\n          </div>\n          <div className=\"category-items\" style={{ columns }}>\n            {categoryItems.map(this.renderItem)}\n          </div>\n        </div>\n      )\n    }\n    renderItem = (model) => {\n      const { collection, layout, sortable } = this.props\n      const { expanded, sortOption } = this.state\n      const sorted = sortable && sortOption !== null\n      const categorized = layout && layout.categorize\n\n      return (\n        <div\n          className={`list-item-wrapper ${expanded[model.hash] ? 'expanded' : ''}`.trim()}\n          data-index={collection.indexOf(model)}\n          key={model.hash}\n        >\n          {(!sorted && !categorized) && <div className=\"drag-handle\" />}\n          <Component\n            model={model}\n            onDelete={collection.delete}\n            onToggleExpanded={this.handleToggleExpanded}\n          />\n          <button className=\"icon-remove\" onClick={this.handleDelete} />\n        </div>\n      )\n    }\n\n    render() {\n      const { className = '', columns, layout = {}, title } = this.props\n      const { sortOption } = this.state\n      let { categories } = this\n      let data = this.props.collection.asArray\n      if (sortOption !== null) data = data.sort(sortOption.comparitor)\n\n      const hasCategories = Boolean(categories.length)\n      if (hasCategories && layout.filter) {\n        data = this.getCategoryItems(data, layout.filter)\n        categories = [layout.filter]\n      }\n      const listStyle = {\n        columns: layout.categorize ? 1 : columns,\n      }\n\n      return (\n        <div className={`list ${className}`.trim()} ref={this.container} style={listStyle}>\n          <div className=\"title-bar\">\n            {this.renderSortWidget()}\n            {this.renderCategoryWidget()}\n            <div className=\"text\">{title}</div>\n            <button className=\"add icon-add\" onClick={this.handleAdd} />\n          </div>\n          {(hasCategories && layout.categorize)\n            ? categories.map(category => this.renderCategory(category, data))\n            : data.map(this.renderItem)\n          }\n        </div>\n      )\n    }\n  }\n}\n","import { observer } from 'mobx-react'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport Effect from '@/components/Effect'\nimport Expandable from '@/components/Expandable'\nimport ListOf from '@/components/List'\nimport EffectModel from '@/models/Effect'\nimport noop from '@/utilities/noop'\nimport './Item.scss'\n\nconst EffectList = ListOf(EffectModel, Effect, { className: 'effect-list' })\n\n@observer class Item extends Component {\n  static defaultProps = {\n    model: {},\n    onDelete: noop,\n    onToggleExpanded: noop,\n  }\n\n  static sortOptions = [{\n    display: 'icon-sort-name-asc',\n    getter: model => model.name,\n  }, {\n    display: 'icon-backpack',\n    getter: model => [!model.equipped, model.name],\n  }]\n\n  handleChangeDescription = description => this.props.model.set({ description })\n  handleChangeName = name => this.props.model.set({ name })\n  handleCommitName = () => (this.props.model.name === '' && this.props.onDelete(this.props.model))\n  handleToggleEquipped = () => this.props.model.set({ equipped: !this.props.model.equipped })\n\n  render() {\n    const { description, hash, name, effects, equipped } = this.props.model\n\n    return (\n      <div className={`item ${equipped ? '' : 'un'}equipped`}>\n        <Editable className=\"equipped\" onChange={this.handleToggleEquipped} value={equipped} />\n        <Editable\n          className=\"name\"\n          onChange={this.handleChangeName}\n          onEditEnd={this.handleCommitName}\n          value={name}\n        />\n        <Expandable onToggle={expanded => this.props.onToggleExpanded(hash, expanded)}>\n          <Editable\n            className=\"description\"\n            type=\"multiline\"\n            onChange={this.handleChangeDescription}\n            placeholder=\"Description...\"\n            value={description}\n          />\n          <EffectList collection={effects} title=\"Effects\" />\n        </Expandable>\n      </div>\n    )\n  }\n}\n\nexport default Item\n","import { observer } from 'mobx-react'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport Rating from '@/components/Rating'\nimport noop from '@/utilities/noop'\nimport './Resource.scss'\n\n@observer class Resource extends Component {\n  static defaultProps = {\n    model: {},\n    onDelete: noop,\n  }\n\n  static sortOptions = [{\n    display: 'icon-sort-name-asc',\n    getter: model => model.name,\n  }]\n\n  handleChangeCurrent = current => this.props.model.set({ current })\n  handleChangeMaximum = maximum => this.props.model.set({ maximum })\n  handleChangeName = name => this.props.model.set({ name })\n  handleCommitName = () => (this.props.model.name === '' && this.props.onDelete(this.props.model))\n\n  render() {\n    const { current, name, maximum } = this.props.model\n\n    return (\n      <div className=\"resource\">\n        <div className=\"display\">\n          <Editable\n            className=\"name\"\n            onChange={this.handleChangeName}\n            onEditEnd={this.handleCommitName}\n            value={name}\n          />\n          <Editable\n            className=\"current\"\n            max={999}\n            min={0}\n            onChange={this.handleChangeCurrent}\n            value={current}\n          />\n          {'of'}\n          <Editable\n            className=\"maximum\"\n            max={999}\n            min={0}\n            onChange={this.handleChangeMaximum}\n            value={maximum}\n          />\n        </div>\n        <Rating\n          allowExcess\n          current={current}\n          maximum={maximum}\n          onChange={this.handleChangeCurrent}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Resource\n","import { observer } from 'mobx-react'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport noop from '@/utilities/noop'\nimport './Skill.scss'\n\n@observer class Skill extends Component {\n  static defaultProps = {\n    model: {},\n    onDelete: noop,\n  }\n\n  static sortOptions = [{\n    display: 'icon-sort-name-asc',\n    getter: model => model.name,\n  }, {\n    display: 'icon-sort-value-desc',\n    getter: model => [-model.theory, -model.mastery, model.name],\n  }, {\n    display: 'icon-sort-size-desc',\n    getter: model => [-model.mastery, -model.theory, model.name],\n  }]\n\n  onChangeName = name => this.props.model.set({ name })\n  onChangeMastery = mastery => this.props.model.set({ mastery })\n  handleCommitName = () => (this.props.model.name === '' && this.props.onDelete(this.props.model))\n  onChangeTheory = theory => this.props.model.set({ theory })\n\n  render() {\n    const { model } = this.props\n\n    return (\n      <div className=\"skill\">\n        <Editable\n          className=\"name\"\n          onChange={this.onChangeName}\n          onEditEnd={this.handleCommitName}\n          value={model.name}\n        />\n        <Editable\n          className={`theory ${(!model.theory && 'is-zero') || ''}`}\n          max={999}\n          min={-99}\n          onChange={this.onChangeTheory}\n          value={model.theory}\n        />\n        <Editable\n          className=\"mastery\"\n          max={999}\n          min={-99}\n          onChange={this.onChangeMastery}\n          value={model.mastery}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Skill\n","import { observer } from 'mobx-react'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport './ResourceCost.scss'\n\n@observer class ResourceCost extends Component {\n  static defaultProps = {\n    model: {},\n  }\n\n  static sortOptions = [{\n    display: 'icon-sort-name-asc',\n    getter: model => model.resourceName,\n  }, {\n    display: 'icon-sort-value-asc',\n    getter: model => model.amount,\n  }]\n\n  handleChangeAmount = amount => this.props.model.set({ amount })\n  handleChangeResource = ({ target: { value } }) => this.props.model.set({ resourceName: value })\n\n  render() {\n    const { amount, available, resourceName } = this.props.model\n\n    return (\n      <div className=\"resource-cost\">\n        <select className=\"resource-id\" value={resourceName} onChange={this.handleChangeResource}>\n          {available.map(({ name }) => (\n            <option key={name} value={name}>{name}</option>\n          ))}\n        </select>\n        <Editable\n          className=\"amount\"\n          max={999}\n          min={-99}\n          onChange={this.handleChangeAmount}\n          value={amount}\n        />\n      </div>\n    )\n  }\n}\n\nexport default ResourceCost\n","import { observer } from 'mobx-react'\nimport { onSnapshot } from 'mobx-state-tree'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport Effect from '@/components/Effect'\nimport Expandable from '@/components/Expandable'\nimport ListOf from '@/components/List'\nimport ResourceCost from '@/components/ResourceCost'\nimport EffectModel from '@/models/Effect'\nimport ResourceCostModel from '@/models/ResourceCost'\nimport noop from '@/utilities/noop'\nimport './Spell.scss'\n\nconst EffectList = ListOf(EffectModel, Effect, { className: 'effect-list' })\n\nconst ListOfCosts = ListOf(ResourceCostModel, ResourceCost, {\n  className: 'resource-cost-list',\n})\n\n@observer class Spell extends Component {\n  static defaultProps = {\n    model: {},\n    onDelete: noop,\n    onToggleExpanded: noop,\n  }\n\n  static sortOptions = [{\n    display: 'icon-sort-name-asc',\n    getter: model => [model.name, model.level],\n  }, {\n    display: 'icon-sort-value-asc',\n    getter: model => [model.level, model.name],\n  }, {\n    display: 'icon-sort-value-desc',\n    getter: model => [-model.level, model.name],\n  }]\n\n  onResourceSnapshotDisposer = noop\n\n  componentDidMount() {\n    const { resources } = this.props.model.character\n    this.onResourceSnapshotDisposer = onSnapshot(resources, () => this.forceUpdate())\n  }\n  componentWillUnmount() { this.onResourceSnapshotDisposer() }\n\n  handleCast = () => {\n    this.props.model.cast()\n    this.forceUpdate()\n  }\n\n  handleChangeDescription = description => this.props.model.set({ description })\n  handleChangeLevel = level => this.props.model.set({ level })\n  handleChangeName = name => this.props.model.set({ name })\n  handleCommitName = () => (this.props.model.name === '' && this.props.onDelete(this.props.model))\n  handleToggleActive = () => this.props.model.set({ isActive: !this.props.model.isActive })\n\n  render() {\n    const {\n      costs, description, name, effects, hash, isActive, isAffordable, level,\n    } = this.props.model\n\n    return (\n      <div className={`spell ${isActive ? '' : 'in'}active`}>\n        <Editable className=\"is-active\" onChange={this.handleToggleActive} value={isActive} />\n        <Editable\n          className=\"name\"\n          onChange={this.handleChangeName}\n          onEditEnd={this.handleCommitName}\n          value={name}\n        />\n        <Editable\n          className=\"level\"\n          onChange={this.handleChangeLevel}\n          value={level}\n        />\n        <button className=\"cast icon-magic\" onClick={this.handleCast} disabled={!isAffordable()} />\n        <Expandable onToggle={expanded => this.props.onToggleExpanded(hash, expanded)}>\n          <Editable\n            className=\"description\"\n            type=\"multiline\"\n            onChange={this.handleChangeDescription}\n            placeholder=\"Description...\"\n            value={description}\n          />\n          <ListOfCosts collection={costs} title=\"Casting Costs\" />\n          <EffectList collection={effects} title=\"Effects\" />\n        </Expandable>\n      </div>\n    )\n  }\n}\n\nexport default Spell\n","import { observer } from 'mobx-react'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport Effect from '@/components/Effect'\nimport Expandable from '@/components/Expandable'\nimport ListOf from '@/components/List'\nimport EffectModel from '@/models/Effect'\nimport noop from '@/utilities/noop'\nimport './Trait.scss'\n\nconst EffectList = ListOf(EffectModel, Effect)\n\n@observer class Trait extends Component {\n  static defaultProps = {\n    model: {},\n    onDelete: noop,\n    onToggleExpanded: noop,\n  }\n\n  static sortOptions = [{\n    display: 'icon-sort-name-asc',\n    getter: model => model.name,\n  }, {\n    display: 'icon-sort-value-asc',\n    getter: model => model.value,\n  }]\n\n  handleChangeName = name => this.props.model.set({ name })\n  handleChangeValue = value => this.props.model.set({ value })\n  handleCommitName = () => (this.props.model.name === '' && this.props.onDelete(this.props.model))\n\n  render() {\n    const { model } = this.props\n\n    return (\n      <div className=\"trait\">\n        <Editable\n          className=\"name\"\n          onChange={this.handleChangeName}\n          onEditEnd={this.handleCommitName}\n          value={model.name}\n        />\n        <Editable\n          className=\"value\"\n          max={999}\n          min={-99}\n          onChange={this.handleChangeValue}\n          value={model.value}\n        />\n        <Expandable onToggle={expanded => this.props.onToggleExpanded(model.hash, expanded)}>\n          <EffectList collection={model.effects} title=\"Effects\" />\n        </Expandable>\n      </div>\n    )\n  }\n}\n\nexport default Trait\n","import Attribute from '@/components/Attribute'\nimport Descriptor from '@/components/Descriptor'\nimport Effect from '@/components/Effect'\nimport Item from '@/components/Item'\nimport Resource from '@/components/Resource'\nimport Skill from '@/components/Skill'\nimport Spell from '@/components/Spell'\nimport Trait from '@/components/Trait'\n\nexport default {\n  Attribute,\n  Descriptor,\n  Effect,\n  Item,\n  Resource,\n  Skill,\n  Spell,\n  Trait,\n}\n","import { observer } from 'mobx-react'\nimport { onSnapshot } from 'mobx-state-tree'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport Expandable from '@/components/Expandable'\nimport './Conditions.scss'\n\nexport default observer(class Conditions extends Component {\n  static defaultProps = {\n    model: {},\n  }\n\n  CACHE = {}\n\n  componentDidMount() {\n    this.onSnapshotDisposer = onSnapshot(this.props.model, this.handleSnapshot)\n  }\n\n  componentWillUnmount() {\n    this.onSnapshotDisposer()\n  }\n\n  handleSnapshot = () => {\n    const availableConditions = this.props.model.availableConditions()\n    const conditions = this.props.model.conditions.asArray\n\n    if (\n      JSON.stringify(availableConditions) !== JSON.stringify(this.CACHE.availableConditions) ||\n      JSON.stringify(conditions) !== JSON.stringify(this.CACHE.conditions)\n    ) {\n      this.CACHE.availableConditions = availableConditions\n      this.CACHE.conditions = conditions\n      this.forceUpdate()\n    }\n  }\n\n  handleCheckbox = (condition, value) => {\n    const { conditions } = this.props.model\n\n    if (value && !conditions.includes(condition)) {\n      conditions.push(condition)\n    } else if (typeof conditions.delete === 'function') {\n      conditions.delete(condition)\n    } else {\n      conditions.splice(conditions.indexOf(condition), 1)\n    }\n    this.forceUpdate()\n  }\n\n  renderCondition = (condition) => {\n    const { conditions } = this.props.model\n    const isCurrent = conditions.includes(condition)\n    return (\n      <div key={condition} className={`condition ${isCurrent ? 'current' : 'available'}`}>\n        <Editable\n          className=\"current\"\n          onChange={value => this.handleCheckbox(condition, value)}\n          value={isCurrent}\n        />\n        <div className=\"name\">{condition}</div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"conditions\">\n        <Expandable>\n          {this.props.model.availableConditions().map(this.renderCondition)}\n        </Expandable>\n      </div>\n    )\n  }\n})\n","import { onSnapshot } from 'mobx-state-tree'\nimport React, { Component } from 'react'\nimport Editable from '@/components/Editable'\nimport Expandable from '@/components/Expandable'\nimport noop from '@/utilities/noop'\nimport './Layout.scss'\n\nexport default class Layout extends Component {\n  titleBar = React.createRef()\n\n  onSnapshotDisposer = noop\n  snapshot = null\n\n  componentDidMount() {\n    this.onSnapshotDisposer = onSnapshot(this.props.model, (snapshot) => {\n      const snapshotJSON = JSON.stringify(snapshot)\n      if (this.snapshot !== snapshotJSON) {\n        this.snapshot = snapshotJSON\n        this.forceUpdate()\n      }\n    })\n    this.forceUpdate() // Immediate redraw to place buttonParent\n  }\n  componentWillUnmount() { this.onSnapshotDisposer() }\n\n  handleChangeTitle = title => this.props.model.set({ title })\n\n  render() {\n    const { children, parentColumns } = this.props\n    const { colSpan, title } = this.props.model\n\n    return (\n      <div className=\"layout\" style={{ width: `calc(100%/${parentColumns}*${colSpan})` }}>\n        {title === undefined\n          ? children\n          : <>\n            <div className=\"title-bar\" ref={this.titleBar}>\n              <Editable\n                className=\"title\"\n                onChange={this.handleChangeTitle}\n                placeholder=\"Section Title\"\n                value={title}\n              />\n            </div>\n            <Expandable\n              expandByDefault\n              omitItemWrapper\n              toggleButtonParent={this.titleBar.current}\n            >\n              {children}\n            </Expandable>\n          </>\n        }\n      </div>\n    )\n  }\n}\n","import Attribute from '@/models/Attribute'\nimport Descriptor from '@/models/Descriptor'\nimport Effect from '@/models/Effect'\nimport Item from '@/models/Item'\nimport Resource from '@/models/Resource'\nimport Skill from '@/models/Skill'\nimport Spell from '@/models/Spell'\nimport Trait from '@/models/Trait'\n\nexport default {\n  Attribute,\n  Descriptor,\n  Effect,\n  Item,\n  Resource,\n  Skill,\n  Spell,\n  Trait,\n}\n","import { observer } from 'mobx-react'\nimport { onSnapshot } from 'mobx-state-tree'\nimport React from 'react'\nimport components from '@/components'\nimport Conditions from '@/components/Conditions'\nimport Layout from '@/components/Layout'\nimport ListOf from '@/components/List'\nimport models from '@/models'\nimport debounce from '@/utilities/debounce'\nimport noop from '@/utilities/noop'\nimport './Sheet.scss'\n\n@observer class Sheet extends React.Component {\n  static defaultProps = {\n    character: {},\n    layout: {},\n    onChange: noop,\n    onMount: noop,\n  }\n\n  state = { size: 'large' }\n\n  handleWindowResize = debounce(() => {\n    let size = 'large'\n    if (window.matchMedia('(min-width: 5in) and (max-width: 7.5in)').matches) {\n      size = 'medium'\n    } else if (window.matchMedia('(max-width: 5in)').matches) {\n      size = 'small'\n    }\n    if (size !== this.state.size) this.setState({ size })\n  }, 250)\n\n  constructor(props) {\n    super(props)\n    this.onCharacterSnapshotDisposer = onSnapshot(this.props.character, (snapshot) => {\n      this.props.onChange(snapshot, this.props.layout.toJSON(), this)\n    })\n    this.onLayoutSnapshotDisposer = onSnapshot(this.props.layout, (snapshot) => {\n      this.props.onChange(this.props.character.toJSON(), snapshot, this)\n    })\n  }\n\n  componentDidMount() {\n    this.handleWindowResize()\n    window.addEventListener('resize', this.handleWindowResize)\n    this.props.onMount(this)\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowResize)\n    this.onCharacterSnapshotDisposer()\n    this.onLayoutSnapshotDisposer()\n  }\n\n\n  renderComponent = (parent, model, key) => {\n    if (model.type) {\n      const { title } = model\n      const typename = model.type.toLowerCase()\n      const List = ListOf(\n        models[model.type],\n        components[model.type],\n        { className: `${typename}-list` }\n      )\n      const collection = this.props.character[`${typename}s`]\n      return (\n        <List {...{ key, layout: model, title }} collection={collection} columns={model.columns} />\n      )\n    }\n\n    return (\n      <Layout key={model.hash} model={model} parentColumns={parent.columns}>\n        {model.children.map((child, i) => this.renderComponent(model, child, i))}\n      </Layout>\n    )\n  }\n\n  render() {\n    const { character, layout } = this.props\n    const { size } = this.state\n\n    return (\n      <div className={`sheetforge sheet ${size}`}>\n        <Conditions model={character} />\n        {layout.children.map(this.renderComponent.bind(null, layout))}\n      </div>\n    )\n  }\n}\n\nexport default Sheet\n","import '@fontello/css/sheetforge-embedded'\n\nexport { default as AttributeModel } from '@/models/Attribute'\nexport { default as CharacterModel } from '@/models/Character'\nexport { default as DescriptorModel } from '@/models/Descriptor'\nexport { default as EffectModel } from '@/models/Effect'\nexport { default as ItemModel } from '@/models/Item'\nexport { default as LayoutModel } from '@/models/Layout'\nexport { default as ResourceCostModel } from '@/models/ResourceCost'\nexport { default as ResourceModel } from '@/models/Resource'\nexport { default as Sheet } from '@/components/Sheet'\nexport { default as SkillModel } from '@/models/Skill'\nexport { default as SpellModel } from '@/models/Spell'\nexport { default as TraitModel } from '@/models/Trait'\n","'use strict'; // function utils\n\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {function(args: Array)} [hasher]  A custom hash builder.\n *                                          Is JSON.stringify by default.\n * @return {function}                       Returns the memoized function\n */\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexports.memoize = function (fn, hasher) {\n  return function memoize() {\n    if (_typeof(memoize.cache) !== 'object') {\n      memoize.cache = {};\n    }\n\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher ? hasher(args) : JSON.stringify(args);\n\n    if (!(hash in memoize.cache)) {\n      memoize.cache[hash] = fn.apply(fn, args);\n    }\n\n    return memoize.cache[hash];\n  };\n};\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\n\nexports.maxArgumentCount = function (fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n};\n/**\n * Call a typed function with the\n * @param {function} fn   A function or typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\n\nexports.callWithRightArgumentCount = function (fn, args, argCount) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n};","'use strict';\n\nvar objectUtils = require('./object');\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Test whether value is a number\n * @param {*} value\n * @return {boolean} isNumber\n */\n\n\nexports.isNumber = function (value) {\n  return typeof value === 'number';\n};\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\n\nexports.isInteger = function (value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well\n};\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {*}\n */\n\n\nexports.sign = Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexports.format = function (value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (exports.isNumber(options)) {\n      precision = options;\n    } else if (exports.isNumber(options.precision)) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'engineering':\n      return exports.toEngineering(value, precision);\n\n    case 'auto':\n      // TODO: clean up some day. Deprecated since: 2018-01-24\n      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0\n      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {\n        var fixedOptions = objectUtils.map(options, function (x) {\n          return x;\n        });\n        fixedOptions.exponential = undefined;\n\n        if (options.exponential.lower !== undefined) {\n          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);\n        }\n\n        if (options.exponential.upper !== undefined) {\n          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);\n        }\n\n        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));\n        return exports.toPrecision(value, precision, fixedOptions);\n      }\n\n      return exports.toPrecision(value, precision, options && options) // remove trailing zeros after the decimal point\n      .replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\n\nexports.splitNumber = function (value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n};\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\n\nexports.toEngineering = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var rounded = exports.roundDigits(exports.splitNumber(value), precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if (exports.isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    if (precision > c.length) c = c.concat(zeros(precision - c.length));\n  } else {\n    // concatenate coefficients with necessary zeros\n    var significandsDiff = e >= 0 ? e : Math.abs(newExp); // add zeros if necessary (for ex: 1e+8)\n\n    if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (--expDiff >= 0) {\n    decimalIdx++;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = exports.isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n};\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\n\nexports.toFixed = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = exports.splitNumber(value);\n  var rounded = typeof precision === 'number' ? exports.roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n};\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\n\nexports.toExponential = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = exports.splitNumber(value);\n  var rounded = precision ? exports.roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n};\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\n\nexports.toPrecision = function (value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = exports.splitNumber(value);\n\n  if (split.exponent < lowerExp || split.exponent >= upperExp) {\n    // exponential notation\n    return exports.toExponential(value, precision);\n  } else {\n    var rounded = precision ? exports.roundDigits(split, precision) : split;\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n};\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\n\nexports.roundDigits = function (split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n};\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nexports.digits = function (value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n};\n/**\n * Minimum number added to one that makes the result different than one\n */\n\n\nexports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexports.nearlyEqual = function (x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < exports.DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n};","'use strict';\n\nvar scatter = require('./../../../utils/collection/scatter');\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm06 = function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      scatter(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace\n\n      scatter(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm06;\n}\n\nexports.name = 'algorithm06';\nexports.factory = factory;","'use strict';\n\nvar object = require('../../utils/object');\n\nfunction factory(type, config, load, typed, math) {\n  var MATRIX = ['Matrix', 'Array']; // valid values for option matrix\n\n  var NUMBER = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.eval('0.4')                    // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.eval('0.4')                    // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n\n  function _config(options) {\n    if (options) {\n      var prev = object.map(config, object.clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX);\n      validateOption(options, 'number', NUMBER); // merge options\n\n      object.deepExtend(config, options);\n      var curr = object.map(config, object.clone);\n      var changes = object.map(options, object.clone); // emit 'config' event\n\n      math.emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return object.map(config, object.clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX = MATRIX;\n  _config.NUMBER = NUMBER;\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Find a string in an array. Case insensitive search\n * @param {Array.<string>} array\n * @param {string} item\n * @return {number} Returns the index when found. Returns -1 when not found\n */\n\n\nfunction findIndex(array, item) {\n  return array.map(function (i) {\n    return i.toLowerCase();\n  }).indexOf(item.toLowerCase());\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    var index = findIndex(values, options[name]);\n\n    if (index !== -1) {\n      // right value, wrong casing\n      // TODO: lower case values are deprecated since v3, remove this warning some day.\n      console.warn('Warning: Wrong casing for configuration option \"' + name + '\", should be \"' + values[index] + '\" instead of \"' + options[name] + '\".');\n      options[name] = values[index]; // change the option to the right casing\n    } else {\n      // unknown value\n      console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". Available options: ' + values.map(JSON.stringify).join(', ') + '.');\n    }\n  }\n}\n\nexports.name = 'config';\nexports.math = true; // request the math namespace as fifth argument\n\nexports.factory = factory;","'use strict';\n/**\n * Execute the callback function element wise for each element in array and any\n * nested array\n * Returns an array with the results\n * @param {Array | Matrix} array\n * @param {Function} callback   The callback is called with two parameters:\n *                              value1 and value2, which contain the current\n *                              element of both arrays.\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n *\n * @return {Array | Matrix} res\n */\n\nmodule.exports = function deepMap(array, callback, skipZeros) {\n  if (array && typeof array.map === 'function') {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  } else {\n    return callback(array);\n  }\n};","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar errorTransform = require('../../transform/error.transform').transform;\n\nvar getSafeProperty = require('../../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  /**\n   * Retrieve part of an object:\n   *\n   * - Retrieve a property from an object\n   * - Retrieve a part of a string\n   * - Retrieve a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @return {Object | Array | Matrix | string} Returns the subset\n   */\n\n  return function access(object, index) {\n    try {\n      if (Array.isArray(object)) {\n        return subset(object, index);\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index);\n      } else if (typeof object === 'string') {\n        // TODO: move getStringSubset into a separate util file, use that\n        return subset(object, index);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw new TypeError('Cannot apply a numeric index as object property');\n        }\n\n        return getSafeProperty(object, index.getObjectProperty());\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}\n\nexports.factory = factory;","\"use strict\";\n\n// TODO: remove these polyfills as soon as we have a build process that transpiles the code to ES5\n// Polyfill for IE 11 (Number.isFinite is used in `complex.js`)\n// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\nNumber.isFinite = Number.isFinite || function (value) {\n  return typeof value === 'number' && isFinite(value);\n}; // Polyfill for IE 11\n// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\n\n\nNumber.isNaN = Number.isNaN || function (value) {\n  return value !== value; // eslint-disable-line no-self-compare\n};","'use strict';\n\nvar operators = require('../operators');\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var mathTypeOf = load(require('../../function/utils/typeof'));\n  /**\n   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n   *\n   * @param {Node} condition   Condition, must result in a boolean\n   * @param {Node} trueExpr    Expression evaluated when condition is true\n   * @param {Node} falseExpr   Expression evaluated when condition is true\n   *\n   * @constructor ConditionalNode\n   * @extends {Node}\n   */\n\n  function ConditionalNode(condition, trueExpr, falseExpr) {\n    if (!(this instanceof ConditionalNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!type.isNode(condition)) throw new TypeError('Parameter condition must be a Node');\n    if (!type.isNode(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');\n    if (!type.isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');\n    this.condition = condition;\n    this.trueExpr = trueExpr;\n    this.falseExpr = falseExpr;\n  }\n\n  ConditionalNode.prototype = new Node();\n  ConditionalNode.prototype.type = 'ConditionalNode';\n  ConditionalNode.prototype.isConditionalNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConditionalNode.prototype._compile = function (math, argNames) {\n    var evalCondition = this.condition._compile(math, argNames);\n\n    var evalTrueExpr = this.trueExpr._compile(math, argNames);\n\n    var evalFalseExpr = this.falseExpr._compile(math, argNames);\n\n    return function evalConditionalNode(scope, args, context) {\n      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConditionalNode.prototype.forEach = function (callback) {\n    callback(this.condition, 'condition', this);\n    callback(this.trueExpr, 'trueExpr', this);\n    callback(this.falseExpr, 'falseExpr', this);\n  };\n  /**\n   * Create a new ConditionalNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ConditionalNode} Returns a transformed copy of the node\n   */\n\n\n  ConditionalNode.prototype.map = function (callback) {\n    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConditionalNode}\n   */\n\n\n  ConditionalNode.prototype.clone = function () {\n    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConditionalNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode\n    // or have lower or equal precedence\n    // NOTE: enclosing all OperatorNodes in parentheses is a decision\n    // purely based on aesthetics and readability\n\n    var condition = this.condition.toString(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n\n    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n      condition = '(' + condition + ')';\n    }\n\n    var trueExpr = this.trueExpr.toString(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n      trueExpr = '(' + trueExpr + ')';\n    }\n\n    var falseExpr = this.falseExpr.toString(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n      falseExpr = '(' + falseExpr + ')';\n    }\n\n    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConditionalNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConditionalNode',\n      condition: this.condition,\n      trueExpr: this.trueExpr,\n      falseExpr: this.falseExpr\n    };\n  };\n  /**\n   * Instantiate an ConditionalNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ConditionalNode\", \"condition\": ..., \"trueExpr\": ..., \"falseExpr\": ...}`,\n   *                       where mathjs is optional\n   * @returns {ConditionalNode}\n   */\n\n\n  ConditionalNode.fromJSON = function (json) {\n    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConditionalNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode\n    // or have lower or equal precedence\n    // NOTE: enclosing all OperatorNodes in parentheses is a decision\n    // purely based on aesthetics and readability\n\n    var condition = this.condition.toHTML(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n\n    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n      condition = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + condition + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var trueExpr = this.trueExpr.toHTML(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n      trueExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + trueExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var falseExpr = this.falseExpr.toHTML(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n      falseExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + falseExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return condition + '<span class=\"math-operator math-conditional-operator\">?</span>' + trueExpr + '<span class=\"math-operator math-conditional-operator\">:</span>' + falseExpr;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConditionalNode.prototype._toTex = function (options) {\n    return '\\\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\\\quad{\\\\text{if }\\\\;' + this.condition.toTex(options) + '}\\\\\\\\{' + this.falseExpr.toTex(options) + '}, &\\\\quad{\\\\text{otherwise}}\\\\end{cases}';\n  };\n  /**\n   * Test whether a condition is met\n   * @param {*} condition\n   * @returns {boolean} true if condition is true or non-zero, else false\n   */\n\n\n  function testCondition(condition) {\n    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {\n      return !!condition;\n    }\n\n    if (condition) {\n      if (type.isBigNumber(condition)) {\n        return !condition.isZero();\n      }\n\n      if (type.isComplex(condition)) {\n        return !!(condition.re || condition.im);\n      }\n\n      if (type.isUnit(condition)) {\n        return !!condition.value;\n      }\n    }\n\n    if (condition === null || condition === undefined) {\n      return false;\n    }\n\n    throw new TypeError('Unsupported type of condition \"' + mathTypeOf(condition) + '\"');\n  }\n\n  return ConditionalNode;\n}\n\nexports.name = 'ConditionalNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar isMatrix = require('./isMatrix');\n/**\n * Recursively loop over all elements in a given multi dimensional array\n * and invoke the callback on each of the elements.\n * @param {Array | Matrix} array\n * @param {Function} callback     The callback method is invoked with one\n *                                parameter: the current element in the array\n */\n\n\nmodule.exports = function deepForEach(array, callback) {\n  if (isMatrix(array)) {\n    array = array.valueOf();\n  }\n\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    } else {\n      callback(value);\n    }\n  }\n};","'use strict';\n\nvar util = require('../../utils/index');\n\nvar object = util.object;\nvar string = util.string;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var unaryMinus = load(require('../arithmetic/unaryMinus'));\n  var lup = load(require('../algebra/decomposition/lup'));\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n\n  var det = typed('det', {\n    'any': function any(x) {\n      return object.clone(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n\n      if (type.isMatrix(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n\n      switch (size.length) {\n        case 0:\n          // scalar\n          return object.clone(x);\n\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return object.clone(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            return _det(x.clone().valueOf(), rows, cols);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + string.format(size) + ')');\n      }\n    }\n  });\n  det.toTex = {\n    1: \"\\\\det\\\\left(${args[0]}\\\\right)\"\n  };\n  return det;\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return object.clone(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Compute the LU decomposition\n      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)\n\n      var _det2 = decomp.U[0][0];\n\n      for (var _i = 1; _i < rows; _i++) {\n        _det2 = multiply(_det2, decomp.U[_i][_i]);\n      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.\n      // This can be determined by counting the cycles. This is roughly a linear time algorithm.\n\n\n      var evenCycles = 0;\n      var i = 0;\n      var visited = [];\n\n      while (true) {\n        while (visited[i]) {\n          i++;\n        }\n\n        if (i >= rows) break;\n        var j = i;\n        var cycleLen = 0;\n\n        while (!visited[decomp.p[j]]) {\n          visited[decomp.p[j]] = true;\n          j = decomp.p[j];\n          cycleLen++;\n        }\n\n        if (cycleLen % 2 === 0) {\n          evenCycles++;\n        }\n      }\n\n      return evenCycles % 2 === 0 ? _det2 : unaryMinus(_det2);\n    }\n  }\n}\n\nexports.name = 'det';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar hasOwnProperty = require('./object').hasOwnProperty;\n/**\n * Get a property of a plain object\n * Throws an error in case the object is not a plain object or the\n * property is not defined on the object itself\n * @param {Object} object\n * @param {string} prop\n * @return {*} Returns the property value when safe\n */\n\n\nfunction getSafeProperty(object, prop) {\n  // only allow getting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    return object[prop];\n  }\n\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\n * Set a property on a plain object.\n * Throws an error in case the object is not a plain object or the\n * property would override an inherited property like .constructor or .toString\n * @param {Object} object\n * @param {string} prop\n * @param {*} value\n * @return {*} Returns the value\n */\n// TODO: merge this function into access.js?\n\n\nfunction setSafeProperty(object, prop, value) {\n  // only allow setting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    object[prop] = value;\n    return value;\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\n * Test whether a property is safe to use for an object.\n * For example .toString and .constructor are not safe\n * @param {string} prop\n * @return {boolean} Returns true when safe\n */\n\n\nfunction isSafeProperty(object, prop) {\n  if (!object || _typeof(object) !== 'object') {\n    return false;\n  } // SAFE: whitelisted\n  // e.g length\n\n\n  if (hasOwnProperty(safeNativeProperties, prop)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (prop in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (prop in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n/**\n * Validate whether a method is safe.\n * Throws an error when that's not the case.\n * @param {Object} object\n * @param {string} method\n */\n// TODO: merge this function into assign.js?\n\n\nfunction validateSafeMethod(object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n}\n/**\n * Check whether a method is safe.\n * Throws an error when that's not the case (for example for `constructor`).\n * @param {Object} object\n * @param {string} method\n * @return {boolean} Returns true when safe, false otherwise\n */\n\n\nfunction isSafeMethod(object, method) {\n  if (!object || typeof object[method] !== 'function') {\n    return false;\n  } // UNSAFE: ghosted\n  // e.g overridden toString\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\n\n\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\n    return false;\n  } // SAFE: whitelisted\n  // e.g toString\n\n\n  if (hasOwnProperty(safeNativeMethods, method)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (method in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (method in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n\nfunction isPlainObject(object) {\n  return _typeof(object) === 'object' && object && object.constructor === Object;\n}\n\nvar safeNativeProperties = {\n  length: true,\n  name: true\n};\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\nexports.getSafeProperty = getSafeProperty;\nexports.setSafeProperty = setSafeProperty;\nexports.isSafeProperty = isSafeProperty;\nexports.validateSafeMethod = validateSafeMethod;\nexports.isSafeMethod = isSafeMethod;\nexports.isPlainObject = isPlainObject;","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  var algorithm02 = function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (SparseMatrix)\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update C(i,j)\n\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero\n\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  return algorithm02;\n}\n\nexports.name = 'algorithm02';\nexports.factory = factory;","'use strict';\n/**\n * Test whether a value is a Matrix\n * @param {*} x\n * @returns {boolean} returns true with input is a Matrix\n *                    (like a DenseMatrix or SparseMatrix)\n */\n\nmodule.exports = function isMatrix(x) {\n  return x && x.constructor.prototype.isMatrix || false;\n};","'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    'number': function number(x) {\n      return x;\n    },\n    'string': function string(x) {\n      if (x === 'NaN') return NaN;\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      return num;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.toNumber();\n    },\n    'Fraction': function Fraction(x) {\n      return x.valueOf();\n    },\n    'Unit': function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    'null': function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, number);\n    }\n  });\n  number.toTex = {\n    0: \"0\",\n    1: \"\\\\left(${args[0]}\\\\right)\",\n    2: \"\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)\"\n  };\n  return number;\n}\n\nexports.name = 'number';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n\n\n  var unaryMinus = typed('unaryMinus', {\n    'number': function number(x) {\n      return -x;\n    },\n    'Complex': function Complex(x) {\n      return x.neg();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.neg();\n    },\n    'Fraction': function Fraction(x) {\n      return x.neg();\n    },\n    'Unit': function Unit(x) {\n      var res = x.clone();\n      res.value = unaryMinus(x.value);\n      return res;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryMinus(0) = 0\n      return deepMap(x, unaryMinus, true);\n    } // TODO: add support for string\n\n  });\n  unaryMinus.toTex = {\n    1: \"\".concat(latex.operators['unaryMinus'], \"\\\\left(${args[0]}\\\\right)\")\n  };\n  return unaryMinus;\n}\n\nexports.name = 'unaryMinus';\nexports.factory = factory;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var getTypeOf = load(require('../function/utils/typeof'));\n  var validInputTypes = {\n    'string': true,\n    'number': true,\n    'BigNumber': true,\n    'Fraction': true // Load the conversion functions for each output type\n\n  };\n  var validOutputTypes = {\n    'number': load(require('./number')),\n    'BigNumber': load(require('./bignumber/function/bignumber')),\n    'Fraction': load(require('./fraction/function/fraction'))\n    /**\n     * Convert a numeric value to a specific type: number, BigNumber, or Fraction\n     *\n     * @param {string | number | BigNumber | Fraction } value\n     * @param {'number' | 'BigNumber' | 'Fraction'} outputType\n     * @return {number | BigNumber | Fraction} Returns an instance of the\n     *                                         numeric in the requested type\n     */\n\n  };\n\n  var numeric = function numeric(value, outputType) {\n    var inputType = getTypeOf(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n\n  numeric.toTex = function (node, options) {\n    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.\n    return node.args[0].toTex();\n  };\n\n  return numeric;\n} // FIXME: expose numeric in the math namespace after we've decided on a name and have written proper docs for this function. See https://github.com/josdejong/mathjs/pull/1270\n// exports.name = 'type._numeric'\n\n\nexports.path = 'type';\nexports.name = '_numeric';\nexports.factory = factory;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar resize = require('../../utils/array').resize;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros(3)                  // returns [0, 0, 0]\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n\n  var zeros = typed('zeros', {\n    '': function _() {\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\n    },\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      } else if (config.matrix === 'Array') {\n        return _zeros(size);\n      } else {\n        return _zeros(size, 'default');\n      }\n    },\n    'Array': _zeros,\n    'Matrix': function Matrix(size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _zeros(size.valueOf(), format);\n    }\n  });\n  zeros.toTex = undefined; // use default template\n\n  return zeros;\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (type.isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n} // TODO: zeros contains almost the same code as ones. Reuse this?\n\n\nexports.name = 'zeros';\nexports.factory = factory;","'use strict';\n\nvar map = require('../../utils/array').map;\n\nvar escape = require('../../utils/string').escape;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var Range = load(require('../../type/matrix/Range'));\n  var isArray = Array.isArray;\n  /**\n   * @constructor IndexNode\n   * @extends Node\n   *\n   * Describes a subset of a matrix or an object property.\n   * Cannot be used on its own, needs to be used within an AccessorNode or\n   * AssignmentNode.\n   *\n   * @param {Node[]} dimensions\n   * @param {boolean} [dotNotation=false]  Optional property describing whether\n   *                                       this index was written using dot\n   *                                       notation like `a.b`, or using bracket\n   *                                       notation like `a[\"b\"]` (default).\n   *                                       Used to stringify an IndexNode.\n   */\n\n  function IndexNode(dimensions, dotNotation) {\n    if (!(this instanceof IndexNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.dimensions = dimensions;\n    this.dotNotation = dotNotation || false; // validate input\n\n    if (!isArray(dimensions) || !dimensions.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');\n    }\n\n    if (this.dotNotation && !this.isObjectProperty()) {\n      throw new Error('dotNotation only applicable for object properties');\n    } // TODO: deprecated since v3, remove some day\n\n\n    var deprecated = function deprecated() {\n      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');\n    };\n\n    Object.defineProperty(this, 'object', {\n      get: deprecated,\n      set: deprecated\n    });\n  }\n\n  IndexNode.prototype = new Node();\n  IndexNode.prototype.type = 'IndexNode';\n  IndexNode.prototype.isIndexNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  IndexNode.prototype._compile = function (math, argNames) {\n    // TODO: implement support for bignumber (currently bignumbers are silently\n    //       reduced to numbers when changing the value to zero-based)\n    // TODO: Optimization: when the range values are ConstantNodes,\n    //       we can beforehand resolve the zero-based value\n    // optimization for a simple object property\n    var evalDimensions = map(this.dimensions, function (range, i) {\n      if (type.isRangeNode(range)) {\n        if (range.needsEnd()) {\n          // create a range containing end (like '4:end')\n          var childArgNames = Object.create(argNames);\n          childArgNames['end'] = true;\n\n          var evalStart = range.start._compile(math, childArgNames);\n\n          var evalEnd = range.end._compile(math, childArgNames);\n\n          var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {\n            return 1;\n          };\n          return function evalDimension(scope, args, context) {\n            var size = math.size(context).valueOf();\n            var childArgs = Object.create(args);\n            childArgs['end'] = size[i];\n            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));\n          };\n        } else {\n          // create range\n          var _evalStart = range.start._compile(math, argNames);\n\n          var _evalEnd = range.end._compile(math, argNames);\n\n          var _evalStep = range.step ? range.step._compile(math, argNames) : function () {\n            return 1;\n          };\n\n          return function evalDimension(scope, args, context) {\n            return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));\n          };\n        }\n      } else if (type.isSymbolNode(range) && range.name === 'end') {\n        // SymbolNode 'end'\n        var _childArgNames = Object.create(argNames);\n\n        _childArgNames['end'] = true;\n\n        var evalRange = range._compile(math, _childArgNames);\n\n        return function evalDimension(scope, args, context) {\n          var size = math.size(context).valueOf();\n          var childArgs = Object.create(args);\n          childArgs['end'] = size[i];\n          return evalRange(scope, childArgs, context);\n        };\n      } else {\n        // ConstantNode\n        var _evalRange = range._compile(math, argNames);\n\n        return function evalDimension(scope, args, context) {\n          return _evalRange(scope, args, context);\n        };\n      }\n    });\n    return function evalIndexNode(scope, args, context) {\n      var dimensions = map(evalDimensions, function (evalDimension) {\n        return evalDimension(scope, args, context);\n      });\n      return math.index.apply(math, dimensions);\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  IndexNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.dimensions.length; i++) {\n      callback(this.dimensions[i], 'dimensions[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new IndexNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {IndexNode} Returns a transformed copy of the node\n   */\n\n\n  IndexNode.prototype.map = function (callback) {\n    var dimensions = [];\n\n    for (var i = 0; i < this.dimensions.length; i++) {\n      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));\n    }\n\n    return new IndexNode(dimensions);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {IndexNode}\n   */\n\n\n  IndexNode.prototype.clone = function () {\n    return new IndexNode(this.dimensions.slice(0));\n  };\n  /**\n   * Test whether this IndexNode contains a single property name\n   * @return {boolean}\n   */\n\n\n  IndexNode.prototype.isObjectProperty = function () {\n    return this.dimensions.length === 1 && type.isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';\n  };\n  /**\n   * Returns the property name if IndexNode contains a property.\n   * If not, returns null.\n   * @return {string | null}\n   */\n\n\n  IndexNode.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this.dimensions[0].value : null;\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  IndexNode.prototype._toString = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  IndexNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'IndexNode',\n      dimensions: this.dimensions,\n      dotNotation: this.dotNotation\n    };\n  };\n  /**\n   * Instantiate an IndexNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"IndexNode\", dimensions: [...], dotNotation: false}`,\n   *                       where mathjs is optional\n   * @returns {IndexNode}\n   */\n\n\n  IndexNode.fromJSON = function (json) {\n    return new IndexNode(json.dimensions, json.dotNotation);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  IndexNode.prototype.toHTML = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n    var dimensions = [];\n\n    for (var i = 0; i < this.dimensions.length; i++) {\n      dimensions[i] = this.dimensions[i].toHTML();\n    }\n\n    if (this.dotNotation) {\n      return '<span class=\"math-operator math-accessor-operator\">.</span>' + '<span class=\"math-symbol math-property\">' + escape(this.getObjectProperty()) + '</span>';\n    } else {\n      return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + dimensions.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n    }\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  IndexNode.prototype._toTex = function (options) {\n    var dimensions = this.dimensions.map(function (range) {\n      return range.toTex(options);\n    });\n    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';\n  }; // helper function to create a Range from start, step and end\n\n\n  function createRange(start, end, step) {\n    return new Range(type.isBigNumber(start) ? start.toNumber() : start, type.isBigNumber(end) ? end.toNumber() : end, type.isBigNumber(step) ? step.toNumber() : step);\n  }\n\n  return IndexNode;\n}\n\nexports.name = 'IndexNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar clone = require('../../../utils/object').clone;\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n\n  var algorithm14 = function algorithm14(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix\n\n    return new DenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  }; // recursive function\n\n\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n\n    return cv;\n  }\n\n  return algorithm14;\n}\n\nexports.name = 'algorithm14';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [require('./and'), require('./not'), require('./or'), require('./xor')];","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n\n\n  var not = typed('not', {\n    'number': function number(x) {\n      return !x;\n    },\n    'Complex': function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    'Unit': function Unit(x) {\n      return x.value !== null ? not(x.value) : true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, not);\n    }\n  });\n  not.toTex = {\n    1: latex.operators['not'] + \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return not;\n}\n\nexports.name = 'not';\nexports.factory = factory;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","'use strict'; // Reserved keywords not allowed to use in the parser\n\nmodule.exports = {\n  end: true\n};","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar size = require('../../utils/array').size;\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var identity = load(require('../matrix/identity'));\n  var multiply = load(require('./multiply'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var fraction = load(require('../../type/fraction/function/fraction'));\n  var number = load(require('../../type/number'));\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   * Matrix exponentiation is supported for square matrices `x`, and positive\n   * integer exponents `y`.\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n\n  var pow = typed('pow', {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.d !== 1) {\n        if (config.predictable) {\n          throw new Error('Function pow does not support non-integer exponents for fractions.');\n        } else {\n          return _pow(x.valueOf(), y.valueOf());\n        }\n      } else {\n        return x.pow(y);\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {} // fraction() throws an error if y is Infinity, etc.\n      // Unable to express y as a fraction, so continue on\n\n    } // x^Infinity === 0 if -1 < x < 1\n    // A real number 0 is returned instead of complex(0)\n\n\n    if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n      return 0;\n    } // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n\n\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return Math.pow(x, y);\n    } else {\n      return new type.Complex(x, 0).pow(y, 0);\n    }\n  }\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Array}\n   * @private\n   */\n\n\n  function _powArray(x, y) {\n    if (!isInteger(y) || y < 0) {\n      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n    } // verify that A is a 2 dimensional square matrix\n\n\n    var s = size(x);\n\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n\n    var res = identity(s[0]).valueOf();\n    var px = x;\n\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n\n      y >>= 1;\n      px = multiply(px, px);\n    }\n\n    return res;\n  }\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n\n  pow.toTex = {\n    2: \"\\\\left(${args[0]}\\\\right)\".concat(latex.operators['pow'], \"{${args[1]}}\")\n  };\n  return pow;\n}\n\nexports.name = 'pow';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var getType = load(require('../../utils/typeof'));\n  /**\n   * Improve error messages for statistics functions. Errors are typically\n   * thrown in an internally used function like larger, causing the error\n   * not to mention the function (like max) which is actually used by the user.\n   *\n   * @param {Error} err\n   * @param {String} fnName\n   * @param {*} [value]\n   * @return {Error}\n   */\n\n  return function improveErrorMessage(err, fnName, value) {\n    // TODO: add information with the index (also needs transform in expression parser)\n    var details;\n\n    if (String(err).indexOf('Unexpected type') !== -1) {\n      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n      return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n    }\n\n    if (String(err).indexOf('complex numbers') !== -1) {\n      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n      return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n    }\n\n    return err;\n  };\n}\n\nexports.factory = factory;","'use strict';\n\nvar operators = require('../operators');\n\nvar latex = require('../../utils/latex');\n\nvar escape = require('../../utils/string').escape;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n\n  var getSafeProperty = require('../../utils/customs').getSafeProperty;\n  /**\n   * A node representing a chained conditional expression, such as 'x > y > z'\n   *\n   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters\n   * @param {Node[]} params   The parameters that will be compared\n   *\n   * @constructor RelationalNode\n   * @extends {Node}\n   */\n\n\n  function RelationalNode(conditionals, params) {\n    if (!(this instanceof RelationalNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');\n    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');\n    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');\n    this.conditionals = conditionals;\n    this.params = params;\n  }\n\n  RelationalNode.prototype = new Node();\n  RelationalNode.prototype.type = 'RelationalNode';\n  RelationalNode.prototype.isRelationalNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  RelationalNode.prototype._compile = function (math, argNames) {\n    var self = this;\n    var compiled = this.params.map(function (p) {\n      return p._compile(math, argNames);\n    });\n    return function evalRelationalNode(scope, args, context) {\n      var evalLhs;\n      var evalRhs = compiled[0](scope, args, context);\n\n      for (var i = 0; i < self.conditionals.length; i++) {\n        evalLhs = evalRhs;\n        evalRhs = compiled[i + 1](scope, args, context);\n        var condFn = getSafeProperty(math, self.conditionals[i]);\n\n        if (!condFn(evalLhs, evalRhs)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  RelationalNode.prototype.forEach = function (callback) {\n    var _this = this;\n\n    this.params.forEach(function (n, i) {\n      return callback(n, 'params[' + i + ']', _this);\n    }, this);\n  };\n  /**\n   * Create a new RelationalNode having its childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RelationalNode} Returns a transformed copy of the node\n   */\n\n\n  RelationalNode.prototype.map = function (callback) {\n    var _this2 = this;\n\n    return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {\n      return _this2._ifNode(callback(n, 'params[' + i + ']', _this2));\n    }, this));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RelationalNode}\n   */\n\n\n  RelationalNode.prototype.clone = function () {\n    return new RelationalNode(this.conditionals, this.params);\n  };\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = operators.getPrecedence(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n    });\n    var operatorMap = {\n      'equal': '==',\n      'unequal': '!=',\n      'smaller': '<',\n      'larger': '>',\n      'smallerEq': '<=',\n      'largerEq': '>='\n    };\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  RelationalNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'RelationalNode',\n      conditionals: this.conditionals,\n      params: this.params\n    };\n  };\n  /**\n   * Instantiate a RelationalNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"RelationalNode\", \"condition\": ..., \"trueExpr\": ..., \"falseExpr\": ...}`,\n   *                       where mathjs is optional\n   * @returns {RelationalNode}\n   */\n\n\n  RelationalNode.fromJSON = function (json) {\n    return new RelationalNode(json.conditionals, json.params);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = operators.getPrecedence(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n    });\n    var operatorMap = {\n      'equal': '==',\n      'unequal': '!=',\n      'smaller': '<',\n      'larger': '>',\n      'smallerEq': '<=',\n      'largerEq': '>='\n    };\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = operators.getPrecedence(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n    });\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += latex.operators[this.conditionals[i]] + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n\n  return RelationalNode;\n}\n\nexports.name = 'RelationalNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar objectUtils = require('../object');\n/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexports.format = function (value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'auto':\n      // TODO: clean up some day. Deprecated since: 2018-01-24\n      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0\n      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {\n        var fixedOptions = objectUtils.map(options, function (x) {\n          return x;\n        });\n        fixedOptions.exponential = undefined;\n\n        if (options.exponential.lower !== undefined) {\n          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);\n        }\n\n        if (options.exponential.upper !== undefined) {\n          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);\n        }\n\n        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));\n        return exports.format(value, fixedOptions);\n      } // determine lower and upper bound for exponential notation.\n      // TODO: implement support for upper and lower to be BigNumbers themselves\n\n\n      var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n      var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero\n\n      if (value.isZero()) return '0'; // determine whether or not to output exponential notation\n\n      var str;\n      var exp = value.e;\n\n      if (exp >= lowerExp && exp < upperExp) {\n        // normal number notation\n        str = value.toSignificantDigits(precision).toFixed();\n      } else {\n        // exponential notation\n        str = exports.toExponential(value, precision);\n      } // remove trailing zeros after the decimal point\n\n\n      return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\n\n\nexports.toExponential = function (value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n};\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=undefined] Optional number of decimals after the\n *                                       decimal point. Undefined by default.\n */\n\n\nexports.toFixed = function (value, precision) {\n  return value.toFixed(precision);\n};","'use strict';\n/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\n\nfunction ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';\n  this.stack = new Error().stack;\n}\n\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;\nmodule.exports = ArgumentsError;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var ceil = typed('ceil', {\n    'number': Math.ceil,\n    'Complex': function Complex(x) {\n      return x.ceil();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.ceil();\n    },\n    'Fraction': function Fraction(x) {\n      return x.ceil();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, ceil, true);\n    }\n  });\n  ceil.toTex = {\n    1: \"\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil\"\n  };\n  return ceil;\n}\n\nexports.name = 'ceil';\nexports.factory = factory;","'use strict';\n\nvar size = require('../../utils/array').size;\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var divide = load(require('../arithmetic/divide'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n\n  var mean = typed('mean', {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n  mean.toTex = undefined; // use default template\n\n  return mean;\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      var s = Array.isArray(array) ? size(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw improveErrorMessage(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n\n  function _mean(array) {\n    var sum = 0;\n    var num = 0;\n    deepForEach(array, function (value) {\n      try {\n        sum = add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'mean', value);\n      }\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n}\n\nexports.name = 'mean';\nexports.factory = factory;","'use strict';\n\nvar latex = require('../../utils/latex');\n\nvar escape = require('../../utils/string').escape;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed, math) {\n  var Node = load(require('./Node'));\n  /**\n   * Check whether some name is a valueless unit like \"inch\".\n   * @param {string} name\n   * @return {boolean}\n   */\n\n  function isValuelessUnit(name) {\n    return type.Unit ? type.Unit.isValuelessUnit(name) : false;\n  }\n  /**\n   * @constructor SymbolNode\n   * @extends {Node}\n   * A symbol node can hold and resolve a symbol\n   * @param {string} name\n   * @extends {Node}\n   */\n\n\n  function SymbolNode(name) {\n    if (!(this instanceof SymbolNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    this.name = name;\n  }\n\n  SymbolNode.prototype = new Node();\n  SymbolNode.prototype.type = 'SymbolNode';\n  SymbolNode.prototype.isSymbolNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  SymbolNode.prototype._compile = function (math, argNames) {\n    var name = this.name;\n\n    if (hasOwnProperty(argNames, name)) {\n      // this is a FunctionAssignment argument\n      // (like an x when inside the expression of a function assignment `f(x) = ...`)\n      return function (scope, args, context) {\n        return args[name];\n      };\n    } else if (name in math) {\n      return function (scope, args, context) {\n        return name in scope ? getSafeProperty(scope, name) : getSafeProperty(math, name);\n      };\n    } else {\n      var isUnit = isValuelessUnit(name);\n      return function (scope, args, context) {\n        return name in scope ? getSafeProperty(scope, name) : isUnit ? new type.Unit(null, name) : undef(name);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  SymbolNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs\n\n  /**\n   * Create a new SymbolNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {SymbolNode} Returns a clone of the node\n   */\n  ;\n\n  SymbolNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Throws an error 'Undefined symbol {name}'\n   * @param {string} name\n   */\n\n\n  function undef(name) {\n    throw new Error('Undefined symbol ' + name);\n  }\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {SymbolNode}\n   */\n\n\n  SymbolNode.prototype.clone = function () {\n    return new SymbolNode(this.name);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  SymbolNode.prototype._toString = function (options) {\n    return this.name;\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  SymbolNode.prototype.toHTML = function (options) {\n    var name = escape(this.name);\n\n    if (name === 'true' || name === 'false') {\n      return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n    } else if (name === 'i') {\n      return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n    } else if (name === 'Infinity') {\n      return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n    } else if (name === 'NaN') {\n      return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n    } else if (name === 'null') {\n      return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n    } else if (name === 'undefined') {\n      return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\n    }\n\n    return '<span class=\"math-symbol\">' + name + '</span>';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  SymbolNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'SymbolNode',\n      name: this.name\n    };\n  };\n  /**\n   * Instantiate a SymbolNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\n   *                       where mathjs is optional\n   * @returns {SymbolNode}\n   */\n\n\n  SymbolNode.fromJSON = function (json) {\n    return new SymbolNode(json.name);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  SymbolNode.prototype._toTex = function (options) {\n    var isUnit = false;\n\n    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\n      isUnit = true;\n    }\n\n    var symbol = latex.toSymbol(this.name, isUnit);\n\n    if (symbol[0] === '\\\\') {\n      // no space needed if the symbol starts with '\\'\n      return symbol;\n    } // the space prevents symbols from breaking stuff like '\\cdot' if it's written right before the symbol\n\n\n    return ' ' + symbol;\n  };\n\n  return SymbolNode;\n}\n\nexports.name = 'SymbolNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.factory = factory;","'use strict';\n\nvar isCollection = require('./isCollection');\n/**\n * Test whether an array contains collections\n * @param {Array} array\n * @returns {boolean} Returns true when the array contains one or multiple\n *                    collections (Arrays or Matrices). Returns false otherwise.\n */\n\n\nmodule.exports = function containsCollections(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n};","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3)             // returns false\n   *    math.larger(5, 2 + 2)         // returns true\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.larger(a, b)             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n\n\n  var larger = typed('larger', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x > y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === 1;\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return larger(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, larger);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, larger, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, larger, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, larger);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return larger(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return larger(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return larger(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, larger, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, larger, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, larger, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, larger, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, larger, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, larger, true).valueOf();\n    }\n  });\n  larger.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['larger'], \"${args[1]}\\\\right)\")\n  };\n  return larger;\n}\n\nexports.name = 'larger';\nexports.factory = factory;","'use strict';\n\nvar isMatrix = require('./isMatrix');\n/**\n * Test whether a value is a collection: an Array or Matrix\n * @param {*} x\n * @returns {boolean} isCollection\n */\n\n\nmodule.exports = function isCollection(x) {\n  return Array.isArray(x) || isMatrix(x);\n};","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var smaller = load(require('../relational/smaller'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the minimum value of a matrix or a  list of values.\n   * In case of a multi dimensional array, the minimum of the flattened array\n   * will be calculated. When `dim` is provided, the minimum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dim)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3)                  // returns 1\n   *     math.min([2, 1, 4, 3])                // returns 1\n   *\n   *     // minimum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n\n  var min = typed('min', {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n\n      return _min(args);\n    }\n  });\n  min.toTex = \"\\\\min\\\\left(${args}\\\\right)\";\n  return min;\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n\n\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    return min;\n  }\n}\n\nexports.name = 'min';\nexports.factory = factory;","'use strict';\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var access = load(require('./utils/access'));\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!type.isNode(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n\n    if (!type.isIndexNode(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index._compile(math, argNames);\n\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        return getSafeProperty(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n\n    if (needParenthesis(this.object)) {\n      object = \"\\\\left(' + object + '\\\\right)\";\n    }\n\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(type.isAccessorNode(node) || type.isArrayNode(node) || type.isConstantNode(node) || type.isFunctionNode(node) || type.isObjectNode(node) || type.isParenthesisNode(node) || type.isSymbolNode(node));\n  }\n\n  return AccessorNode;\n}\n\nexports.name = 'AccessorNode';\nexports.path = 'expression.node';\nexports.factory = factory;","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","'use strict';\n\nvar Emitter = require('tiny-emitter');\n/**\n * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n * @param {Object} obj\n * @return {Object} obj\n */\n\n\nexports.mixin = function (obj) {\n  // create event emitter\n  var emitter = new Emitter(); // bind methods to obj (we don't want to expose the emitter.e Array...)\n\n  obj.on = emitter.on.bind(emitter);\n  obj.off = emitter.off.bind(emitter);\n  obj.once = emitter.once.bind(emitter);\n  obj.emit = emitter.emit.bind(emitter);\n  return obj;\n};","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar keywords = require('../keywords');\n\nvar deepEqual = require('../../utils/object').deepEqual;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory(type, config, load, typed, math) {\n  /**\n   * Node\n   */\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n\n\n  Node.prototype.eval = function (scope) {\n    return this.compile().eval(scope);\n  };\n\n  Node.prototype.type = 'Node';\n  Node.prototype.isNode = true;\n  Node.prototype.comment = '';\n  /**\n   * Compile the node into an optimized, evauatable JavaScript function\n   * @return {{eval: function([Object])}} expr  Returns an object with a function 'eval',\n   *                                  which can be invoked as expr.eval([scope: Object]),\n   *                                  where scope is an optional object with\n   *                                  variables.\n   */\n\n  Node.prototype.compile = function () {\n    var expr = this._compile(math.expression.mathWithTransform, {});\n\n    var args = {};\n    var context = null;\n    return {\n      eval: function evalNode(scope) {\n        var s = scope || {};\n\n        _validateScope(s);\n\n        return expr(s, args, context);\n      }\n    };\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  Node.prototype._compile = function (math, argNames) {\n    throw new Error('Method _compile should be implemented by type ' + this.type);\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n\n\n  Node.prototype._ifNode = function (node) {\n    if (!type.isNode(node)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n\n    return node;\n  };\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n\n\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    callback(this, null, null); // eslint-disable-line standard/no-callback-literal\n    // recursively traverse over all childs of a node\n\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n\n        _traverse(child, callback);\n      });\n    }\n\n    _traverse(this, callback);\n  };\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     const res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n   *         return new ConstantNode(2)\n   *       }\n   *       else {\n   *         return node\n   *       }\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n\n\n  Node.prototype.transform = function (callback) {\n    // traverse over all childs\n    function _transform(node, callback) {\n      return node.map(function (child, path, parent) {\n        var replacement = callback(child, path, parent);\n        return _transform(replacement, callback);\n      });\n    }\n\n    var replacement = callback(this, null, null); // eslint-disable-line standard/no-callback-literal\n\n    return _transform(replacement, callback);\n  };\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     const results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name === 'x')\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n\n\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  }; // TODO: deprecated since version 1.1.0, remove this some day\n\n\n  Node.prototype.find = function () {\n    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');\n  }; // TODO: deprecated since version 1.1.0, remove this some day\n\n\n  Node.prototype.match = function () {\n    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');\n  };\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n\n\n  Node.prototype.equals = function (other) {\n    return other ? deepEqual(this, other) : false;\n  };\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toString = function (options) {\n    var customString;\n\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          break;\n\n        case 'function':\n          customString = options.handler(this, options);\n          break;\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n   * implementations of Node\n   * @returns {Object}\n   */\n\n\n  Node.prototype.toJSON = function () {\n    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n  };\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toHTML = function (options) {\n    var customString;\n\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          break;\n\n        case 'function':\n          customString = options.handler(this, options);\n          break;\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this.toHTML(options);\n  };\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toString = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          break;\n\n        case 'function':\n          customTex = options.handler(this, options);\n          break;\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    }\n\n    return this._toTex(options);\n  };\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toTex = function (options) {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n\n\n  Node.prototype.getContent = function () {\n    return this;\n  };\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n\n\n  function _validateScope(scope) {\n    for (var symbol in scope) {\n      if (hasOwnProperty(scope, symbol)) {\n        if (symbol in keywords) {\n          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n        }\n      }\n    }\n  }\n\n  return Node;\n}\n\nexports.name = 'Node';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.factory = factory;","'use strict';\n\nexports.array = require('./array');\nexports['boolean'] = require('./boolean');\nexports['function'] = require('./function');\nexports.number = require('./number');\nexports.object = require('./object');\nexports.string = require('./string');\nexports.emitter = require('./emitter');","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  var bignumber = typed('bignumber', {\n    '': function _() {\n      return new type.BigNumber(0);\n    },\n    'number': function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new type.BigNumber(x + '');\n    },\n    'string': function string(x) {\n      return new type.BigNumber(x);\n    },\n    'BigNumber': function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    'Fraction': function Fraction(x) {\n      return new type.BigNumber(x.n).div(x.d).times(x.s);\n    },\n    'null': function _null(x) {\n      return new type.BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, bignumber);\n    }\n  });\n  bignumber.toTex = {\n    0: '0',\n    1: \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return bignumber;\n}\n\nexports.name = 'bignumber';\nexports.factory = factory;","'use strict';\n\nvar array = require('../../utils/array');\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.identity(n)\n   *    math.identity(n, format)\n   *    math.identity(m, n)\n   *    math.identity(m, n, format)\n   *    math.identity([m, n])\n   *    math.identity([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n\n  var identity = typed('identity', {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    'string': function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    'Array': function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    'Matrix': function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n  identity.toTex = undefined; // use default template\n\n  return identity;\n\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n\n      case 1:\n        return _identity(size[0], size[0], format);\n\n      case 2:\n        return _identity(size[0], size[1], format);\n\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = type.isBigNumber(rows) || type.isBigNumber(cols) ? type.BigNumber : null;\n    if (type.isBigNumber(rows)) rows = rows.toNumber();\n    if (type.isBigNumber(cols)) cols = cols.toNumber();\n\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    var one = Big ? new type.BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols]; // check we need to return a matrix\n\n    if (format) {\n      // get matrix storage constructor\n      var F = type.Matrix.storage(format); // create diagonal matrix (use optimized implementation for storage format)\n\n      return F.diagonal(size, one, 0, defaultValue);\n    } // create and resize array\n\n\n    var res = array.resize([], size, defaultValue); // fill in ones on the diagonal\n\n    var minimum = rows < cols ? rows : cols; // fill diagonal\n\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n\n    return res;\n  }\n}\n\nexports.name = 'identity';\nexports.factory = factory;","'use strict';\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar ArgumentsError = require('../error/ArgumentsError');\n\nvar deepMap = require('../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var numeric = load(require('../type/numeric'));\n  var AccessorNode = load(require('./node/AccessorNode'));\n  var ArrayNode = load(require('./node/ArrayNode'));\n  var AssignmentNode = load(require('./node/AssignmentNode'));\n  var BlockNode = load(require('./node/BlockNode'));\n  var ConditionalNode = load(require('./node/ConditionalNode'));\n  var ConstantNode = load(require('./node/ConstantNode'));\n  var FunctionAssignmentNode = load(require('./node/FunctionAssignmentNode'));\n  var IndexNode = load(require('./node/IndexNode'));\n  var ObjectNode = load(require('./node/ObjectNode'));\n  var OperatorNode = load(require('./node/OperatorNode'));\n  var ParenthesisNode = load(require('./node/ParenthesisNode'));\n  var FunctionNode = load(require('./node/FunctionNode'));\n  var RangeNode = load(require('./node/RangeNode'));\n  var RelationalNode = load(require('./node/RelationalNode'));\n  var SymbolNode = load(require('./node/SymbolNode'));\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval().\n   *\n   * Syntax:\n   *\n   *     parse(expr)\n   *     parse(expr, options)\n   *     parse([expr1, expr2, expr3, ...])\n   *     parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     const node = parse('sqrt(3^2 + 4^2)')\n   *     node.compile(math).eval() // 5\n   *\n   *     let scope = {a:3, b:4}\n   *     const node = parse('a * b') // 12\n   *     const code = node.compile(math)\n   *     code.eval(scope) // 12\n   *     scope.a = 5\n   *     code.eval(scope) // 20\n   *\n   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].compile(math).eval() // 12\n   *\n   * @param {string | string[] | Matrix} expr\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n\n  function parse(expr, options) {\n    if (arguments.length !== 1 && arguments.length !== 2) {\n      throw new ArgumentsError('parse', arguments.length, 1, 2);\n    } // pass extra nodes\n\n\n    var extraNodes = options && options.nodes ? options.nodes : {};\n\n    if (typeof expr === 'string') {\n      // parse a single expression\n      return parseStart(expr, extraNodes);\n    } else if (Array.isArray(expr) || expr instanceof type.Matrix) {\n      // parse an array or matrix with expressions\n      return deepMap(expr, function (elem) {\n        if (typeof elem !== 'string') throw new TypeError('String expected');\n        return parseStart(elem, extraNodes);\n      });\n    } else {\n      // oops\n      throw new TypeError('String or matrix expected');\n    }\n  } // token types enumeration\n\n\n  var TOKENTYPE = {\n    NULL: 0,\n    DELIMITER: 1,\n    NUMBER: 2,\n    SYMBOL: 3,\n    UNKNOWN: 4 // map with all delimiters\n\n  };\n  var DELIMITERS = {\n    ',': true,\n    '(': true,\n    ')': true,\n    '[': true,\n    ']': true,\n    '{': true,\n    '}': true,\n    '\"': true,\n    '\\'': true,\n    ';': true,\n    '+': true,\n    '-': true,\n    '*': true,\n    '.*': true,\n    '/': true,\n    './': true,\n    '%': true,\n    '^': true,\n    '.^': true,\n    '~': true,\n    '!': true,\n    '&': true,\n    '|': true,\n    '^|': true,\n    '=': true,\n    ':': true,\n    '?': true,\n    '==': true,\n    '!=': true,\n    '<': true,\n    '>': true,\n    '<=': true,\n    '>=': true,\n    '<<': true,\n    '>>': true,\n    '>>>': true // map with all named delimiters\n\n  };\n  var NAMED_DELIMITERS = {\n    'mod': true,\n    'to': true,\n    'in': true,\n    'and': true,\n    'xor': true,\n    'or': true,\n    'not': true\n  };\n  var CONSTANTS = {\n    'true': true,\n    'false': false,\n    'null': null,\n    'undefined': undefined\n  };\n  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];\n\n  function initialState() {\n    return {\n      extraNodes: {},\n      // current extra nodes, must be careful not to mutate\n      expression: '',\n      // current expression\n      comment: '',\n      // last parsed comment\n      index: 0,\n      // current index in expr\n      token: '',\n      // current token\n      tokenType: TOKENTYPE.NULL,\n      // type of the token\n      nestingLevel: 0,\n      // level of nesting inside parameters, used to ignore newline characters\n      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here\n\n    };\n  }\n  /**\n   * View upto `length` characters of the expression starting at the current character.\n   *\n   * @param {State} state\n   * @param {number} [length=1] Number of characters to view\n   * @returns {string}\n   * @private\n   */\n\n\n  function currentString(state, length) {\n    return state.expression.substr(state.index, length);\n  }\n  /**\n   * View the current character. Returns '' if end of expression is reached.\n   *\n   * @param {State} state\n   * @returns {string}\n   * @private\n   */\n\n\n  function currentCharacter(state) {\n    return currentString(state, 1);\n  }\n  /**\n   * Get the next character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n\n\n  function next(state) {\n    state.index++;\n  }\n  /**\n   * Preview the previous character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n\n  function prevCharacter(state) {\n    return state.expression.charAt(state.index - 1);\n  }\n  /**\n   * Preview the next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n\n  function nextCharacter(state) {\n    return state.expression.charAt(state.index + 1);\n  }\n  /**\n   * Get next token in the current string expr.\n   * The token and token type are available as token and tokenType\n   * @private\n   */\n\n\n  function getToken(state) {\n    state.tokenType = TOKENTYPE.NULL;\n    state.token = '';\n    state.comment = ''; // skip over whitespaces\n    // space, tab, and newline when inside parameters\n\n    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {\n      next(state);\n    } // skip comment\n\n\n    if (currentCharacter(state) === '#') {\n      while (currentCharacter(state) !== '\\n' && currentCharacter(state) !== '') {\n        state.comment += currentCharacter(state);\n        next(state);\n      }\n    } // check for end of expression\n\n\n    if (currentCharacter(state) === '') {\n      // token is still empty\n      state.tokenType = TOKENTYPE.DELIMITER;\n      return;\n    } // check for new line character\n\n\n    if (currentCharacter(state) === '\\n' && !state.nestingLevel) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = currentCharacter(state);\n      next(state);\n      return;\n    }\n\n    var c1 = currentCharacter(state);\n    var c2 = currentString(state, 2);\n    var c3 = currentString(state, 3);\n\n    if (c3.length === 3 && DELIMITERS[c3]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c3;\n      next(state);\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 2 characters\n\n\n    if (c2.length === 2 && DELIMITERS[c2]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c2;\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 1 character\n\n\n    if (DELIMITERS[c1]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c1;\n      next(state);\n      return;\n    } // check for a number\n\n\n    if (parse.isDigitDot(c1)) {\n      state.tokenType = TOKENTYPE.NUMBER; // get number, can have a single dot\n\n      if (currentCharacter(state) === '.') {\n        state.token += currentCharacter(state);\n        next(state);\n\n        if (!parse.isDigit(currentCharacter(state))) {\n          // this is no number, it is just a dot (can be dot notation)\n          state.tokenType = TOKENTYPE.DELIMITER;\n        }\n      } else {\n        while (parse.isDigit(currentCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n\n        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n      }\n\n      while (parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      } // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"\n\n\n      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {\n        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {\n          state.token += currentCharacter(state);\n          next(state);\n\n          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {\n            state.token += currentCharacter(state);\n            next(state);\n          } // Scientific notation MUST be followed by an exponent\n\n\n          if (!parse.isDigit(currentCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n\n          while (parse.isDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n\n          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n        } else if (nextCharacter(state) === '.') {\n          next(state);\n          throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n        }\n      }\n\n      return;\n    } // check for variables, functions, named operators\n\n\n    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {\n      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      }\n\n      if (NAMED_DELIMITERS.hasOwnProperty(state.token)) {\n        state.tokenType = TOKENTYPE.DELIMITER;\n      } else {\n        state.tokenType = TOKENTYPE.SYMBOL;\n      }\n\n      return;\n    } // something unknown is found, wrong characters -> a syntax error\n\n\n    state.tokenType = TOKENTYPE.UNKNOWN;\n\n    while (currentCharacter(state) !== '') {\n      state.token += currentCharacter(state);\n      next(state);\n    }\n\n    throw createSyntaxError(state, 'Syntax error in part \"' + state.token + '\"');\n  }\n  /**\n   * Get next token and skip newline tokens\n   */\n\n\n  function getTokenSkipNewline(state) {\n    do {\n      getToken(state);\n    } while (state.token === '\\n'); // eslint-disable-line no-unmodified-loop-condition\n\n  }\n  /**\n   * Open parameters.\n   * New line characters will be ignored until closeParams(state) is called\n   */\n\n\n  function openParams(state) {\n    state.nestingLevel++;\n  }\n  /**\n   * Close parameters.\n   * New line characters will no longer be ignored\n   */\n\n\n  function closeParams(state) {\n    state.nestingLevel--;\n  }\n  /**\n   * Checks whether the current character `c` is a valid alpha character:\n   *\n   * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n   * - An underscore                        Ascii: _\n   * - A dollar sign                        Ascii: $\n   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n   * - A greek letter                       Unicode: \\u0370 - \\u03FF\n   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n   *\n   * The previous and next characters are needed to determine whether\n   * this character is part of a unicode surrogate pair.\n   *\n   * @param {string} c      Current character in the expression\n   * @param {string} cPrev  Previous character\n   * @param {string} cNext  Next character\n   * @return {boolean}\n   */\n\n\n  parse.isAlpha = function isAlpha(c, cPrev, cNext) {\n    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);\n  };\n  /**\n   * Test whether a character is a valid latin, greek, or letter-like character\n   * @param {string} c\n   * @return {boolean}\n   */\n\n\n  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {\n    return /^[a-zA-Z_$\\u00C0-\\u02AF\\u0370-\\u03FF\\u2100-\\u214F]$/.test(c);\n  };\n  /**\n   * Test whether two given 16 bit characters form a surrogate pair of a\n   * unicode math symbol.\n   *\n   * https://unicode-table.com/en/\n   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n   *\n   * Note: In ES6 will be unicode aware:\n   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes\n   * https://mathiasbynens.be/notes/es6-unicode-regex\n   *\n   * @param {string} high\n   * @param {string} low\n   * @return {boolean}\n   */\n\n\n  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {\n    return /^[\\uD835]$/.test(high) && /^[\\uDC00-\\uDFFF]$/.test(low) && /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);\n  };\n  /**\n   * Check whether given character c is a white space character: space, tab, or enter\n   * @param {string} c\n   * @param {number} nestingLevel\n   * @return {boolean}\n   */\n\n\n  parse.isWhitespace = function isWhitespace(c, nestingLevel) {\n    // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?\n    return c === ' ' || c === '\\t' || c === '\\n' && nestingLevel > 0;\n  };\n  /**\n   * Test whether the character c is a decimal mark (dot).\n   * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n   * @param {string} c\n   * @param {string} cNext\n   * @return {boolean}\n   */\n\n\n  parse.isDecimalMark = function isDecimalMark(c, cNext) {\n    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';\n  };\n  /**\n   * checks if the given char c is a digit or dot\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n\n  parse.isDigitDot = function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  };\n  /**\n   * checks if the given char c is a digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n\n  parse.isDigit = function isDigit(c) {\n    return c >= '0' && c <= '9';\n  };\n  /**\n   * Start of the parse levels below, in order of precedence\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseStart(expression, extraNodes) {\n    var state = initialState();\n\n    _extends(state, {\n      expression: expression,\n      extraNodes: extraNodes\n    });\n\n    getToken(state);\n    var node = parseBlock(state); // check for garbage at the end of the expression\n    // an expression ends with a empty character '' and tokenType DELIMITER\n\n    if (state.token !== '') {\n      if (state.tokenType === TOKENTYPE.DELIMITER) {\n        // user entered a not existing operator like \"//\"\n        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean !== ?\"\n        throw createError(state, 'Unexpected operator ' + state.token);\n      } else {\n        throw createSyntaxError(state, 'Unexpected part \"' + state.token + '\"');\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Parse a block with expressions. Expressions can be separated by a newline\n   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output\n   * of the preceding line is returned.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBlock(state) {\n    var node;\n    var blocks = [];\n    var visible;\n\n    if (state.token !== '' && state.token !== '\\n' && state.token !== ';') {\n      node = parseAssignment(state);\n      node.comment = state.comment;\n    } // TODO: simplify this loop\n\n\n    while (state.token === '\\n' || state.token === ';') {\n      // eslint-disable-line no-unmodified-loop-condition\n      if (blocks.length === 0 && node) {\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n\n      getToken(state);\n\n      if (state.token !== '\\n' && state.token !== ';' && state.token !== '') {\n        node = parseAssignment(state);\n        node.comment = state.comment;\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n    }\n\n    if (blocks.length > 0) {\n      return new BlockNode(blocks);\n    } else {\n      if (!node) {\n        node = new ConstantNode(undefined);\n        node.comment = state.comment;\n      }\n\n      return node;\n    }\n  }\n  /**\n   * Assignment of a function or variable,\n   * - can be a variable like 'a=2.3'\n   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n   * - defining a function like 'f(x) = x^2'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAssignment(state) {\n    var name, args, value, valid;\n    var node = parseConditional(state);\n\n    if (state.token === '=') {\n      if (type.isSymbolNode(node)) {\n        // parse a variable assignment like 'a = 2/3'\n        name = node.name;\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(new SymbolNode(name), value);\n      } else if (type.isAccessorNode(node)) {\n        // parse a matrix subset assignment like 'A[1,2] = 4'\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(node.object, node.index, value);\n      } else if (type.isFunctionNode(node) && type.isSymbolNode(node.fn)) {\n        // parse function assignment like 'f(x) = x^2'\n        valid = true;\n        args = [];\n        name = node.name;\n        node.args.forEach(function (arg, index) {\n          if (type.isSymbolNode(arg)) {\n            args[index] = arg.name;\n          } else {\n            valid = false;\n          }\n        });\n\n        if (valid) {\n          getTokenSkipNewline(state);\n          value = parseAssignment(state);\n          return new FunctionAssignmentNode(name, args, value);\n        }\n      }\n\n      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');\n    }\n\n    return node;\n  }\n  /**\n   * conditional operation\n   *\n   *     condition ? truePart : falsePart\n   *\n   * Note: conditional operator is right-associative\n   *\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseConditional(state) {\n    var node = parseLogicalOr(state);\n\n    while (state.token === '?') {\n      // eslint-disable-line no-unmodified-loop-condition\n      // set a conditional level, the range operator will be ignored as long\n      // as conditionalLevel === state.nestingLevel.\n      var prev = state.conditionalLevel;\n      state.conditionalLevel = state.nestingLevel;\n      getTokenSkipNewline(state);\n      var condition = node;\n      var trueExpr = parseAssignment(state);\n      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');\n      state.conditionalLevel = null;\n      getTokenSkipNewline(state);\n      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity\n\n      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level\n\n      state.conditionalLevel = prev;\n    }\n\n    return node;\n  }\n  /**\n   * logical or, 'x or y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalOr(state) {\n    var node = parseLogicalXor(state);\n\n    while (state.token === 'or') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * logical exclusive or, 'x xor y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalXor(state) {\n    var node = parseLogicalAnd(state);\n\n    while (state.token === 'xor') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * logical and, 'x and y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalAnd(state) {\n    var node = parseBitwiseOr(state);\n\n    while (state.token === 'and') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise or, 'x | y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseOr(state) {\n    var node = parseBitwiseXor(state);\n\n    while (state.token === '|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise exclusive or (xor), 'x ^| y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseXor(state) {\n    var node = parseBitwiseAnd(state);\n\n    while (state.token === '^|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise and, 'x & y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseAnd(state) {\n    var node = parseRelational(state);\n\n    while (state.token === '&') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * Parse a chained conditional, like 'a > b >= c'\n   * @return {Node} node\n   */\n\n\n  function parseRelational(state) {\n    var params = [parseShift(state)];\n    var conditionals = [];\n    var operators = {\n      '==': 'equal',\n      '!=': 'unequal',\n      '<': 'smaller',\n      '>': 'larger',\n      '<=': 'smallerEq',\n      '>=': 'largerEq'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      var cond = {\n        name: state.token,\n        fn: operators[state.token]\n      };\n      conditionals.push(cond);\n      getTokenSkipNewline(state);\n      params.push(parseShift(state));\n    }\n\n    if (params.length === 1) {\n      return params[0];\n    } else if (params.length === 2) {\n      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);\n    } else {\n      return new RelationalNode(conditionals.map(function (c) {\n        return c.fn;\n      }), params);\n    }\n  }\n  /**\n   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseShift(state) {\n    var node, operators, name, fn, params;\n    node = parseConversion(state);\n    operators = {\n      '<<': 'leftShift',\n      '>>': 'rightArithShift',\n      '>>>': 'rightLogShift'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseConversion(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * conversion operators 'to' and 'in'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseConversion(state) {\n    var node, operators, name, fn, params;\n    node = parseRange(state);\n    operators = {\n      'to': 'to',\n      'in': 'to' // alias of 'to'\n\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n\n      if (name === 'in' && state.token === '') {\n        // end of expression -> this is the unit 'in' ('inch')\n        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);\n      } else {\n        // operator 'a to b' or 'a in b'\n        params = [node, parseRange(state)];\n        node = new OperatorNode(name, fn, params);\n      }\n    }\n\n    return node;\n  }\n  /**\n   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseRange(state) {\n    var node;\n    var params = [];\n\n    if (state.token === ':') {\n      // implicit start=1 (one-based)\n      node = new ConstantNode(1);\n    } else {\n      // explicit start\n      node = parseAddSubtract(state);\n    }\n\n    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {\n      // we ignore the range operator when a conditional operator is being processed on the same level\n      params.push(node); // parse step and end\n\n      while (state.token === ':' && params.length < 3) {\n        // eslint-disable-line no-unmodified-loop-condition\n        getTokenSkipNewline(state);\n\n        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {\n          // implicit end\n          params.push(new SymbolNode('end'));\n        } else {\n          // explicit end\n          params.push(parseAddSubtract(state));\n        }\n      }\n\n      if (params.length === 3) {\n        // params = [start, step, end]\n        node = new RangeNode(params[0], params[2], params[1]); // start, end, step\n      } else {\n        // length === 2\n        // params = [start, end]\n        node = new RangeNode(params[0], params[1]); // start, end\n      }\n    }\n\n    return node;\n  }\n  /**\n   * add or subtract\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAddSubtract(state) {\n    var node, operators, name, fn, params;\n    node = parseMultiplyDivide(state);\n    operators = {\n      '+': 'add',\n      '-': 'subtract'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseMultiplyDivide(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * multiply, divide, modulus\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseMultiplyDivide(state) {\n    var node, last, operators, name, fn;\n    node = parseImplicitMultiplication(state);\n    last = node;\n    operators = {\n      '*': 'multiply',\n      '.*': 'dotMultiply',\n      '/': 'divide',\n      './': 'dotDivide',\n      '%': 'mod',\n      'mod': 'mod'\n    };\n\n    while (true) {\n      if (operators.hasOwnProperty(state.token)) {\n        // explicit operators\n        name = state.token;\n        fn = operators[name];\n        getTokenSkipNewline(state);\n        last = parseImplicitMultiplication(state);\n        node = new OperatorNode(name, fn, [node, last]);\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * implicit multiplication\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseImplicitMultiplication(state) {\n    var node, last;\n    node = parseRule2(state);\n    last = node;\n\n    while (true) {\n      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && type.isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !type.isConstantNode(last) && (!type.isOperatorNode(last) || last.op === '!') || state.token === '(') {\n        // parse implicit multiplication\n        //\n        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'\n        // number:      implicit multiplication like '(2+3)2'\n        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'\n        last = parseRule2(state);\n        node = new OperatorNode('*', 'multiply', [node, last], true\n        /* implicit */\n        );\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Infamous \"rule 2\" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370\n   * Explicit division gets higher precedence than implicit multiplication\n   * when the division matches this pattern: [number] / [number] [symbol]\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseRule2(state) {\n    var node = parseUnary(state);\n    var last = node;\n    var tokenStates = [];\n\n    while (true) {\n      // Match the \"number /\" part of the pattern \"number / number symbol\"\n      if (state.token === '/' && type.isConstantNode(last)) {\n        // Look ahead to see if the next token is a number\n        tokenStates.push(_extends({}, state));\n        getTokenSkipNewline(state); // Match the \"number / number\" part of the pattern\n\n        if (state.tokenType === TOKENTYPE.NUMBER) {\n          // Look ahead again\n          tokenStates.push(_extends({}, state));\n          getTokenSkipNewline(state); // Match the \"symbol\" part of the pattern, or a left parenthesis\n\n          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {\n            // We've matched the pattern \"number / number symbol\".\n            // Rewind once and build the \"number / number\" node; the symbol will be consumed later\n            _extends(state, tokenStates.pop());\n\n            tokenStates.pop();\n            last = parseUnary(state);\n            node = new OperatorNode('/', 'divide', [node, last]);\n          } else {\n            // Not a match, so rewind\n            tokenStates.pop();\n\n            _extends(state, tokenStates.pop());\n\n            break;\n          }\n        } else {\n          // Not a match, so rewind\n          _extends(state, tokenStates.pop());\n\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Unary plus and minus, and logical and bitwise not\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseUnary(state) {\n    var name, params, fn;\n    var operators = {\n      '-': 'unaryMinus',\n      '+': 'unaryPlus',\n      '~': 'bitNot',\n      'not': 'not'\n    };\n\n    if (operators.hasOwnProperty(state.token)) {\n      fn = operators[state.token];\n      name = state.token;\n      getTokenSkipNewline(state);\n      params = [parseUnary(state)];\n      return new OperatorNode(name, fn, params);\n    }\n\n    return parsePow(state);\n  }\n  /**\n   * power\n   * Note: power operator is right associative\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parsePow(state) {\n    var node, name, fn, params;\n    node = parseLeftHandOperators(state);\n\n    if (state.token === '^' || state.token === '.^') {\n      name = state.token;\n      fn = name === '^' ? 'pow' : 'dotPow';\n      getTokenSkipNewline(state);\n      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'\n\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * Left hand operators: factorial x!, ctranspose x'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLeftHandOperators(state) {\n    var node, operators, name, fn, params;\n    node = parseCustomNodes(state);\n    operators = {\n      '!': 'factorial',\n      '\\'': 'ctranspose'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getToken(state);\n      params = [node];\n      node = new OperatorNode(name, fn, params);\n      node = parseAccessors(state, node);\n    }\n\n    return node;\n  }\n  /**\n   * Parse a custom node handler. A node handler can be used to process\n   * nodes in a custom way, for example for handling a plot.\n   *\n   * A handler must be passed as second argument of the parse function.\n   * - must extend math.expression.node.Node\n   * - must contain a function _compile(defs: Object) : string\n   * - must contain a function find(filter: Object) : Node[]\n   * - must contain a function toString() : string\n   * - the constructor is called with a single argument containing all parameters\n   *\n   * For example:\n   *\n   *     nodes = {\n   *       'plot': PlotHandler\n   *     }\n   *\n   * The constructor of the handler is called as:\n   *\n   *     node = new PlotHandler(params)\n   *\n   * The handler will be invoked when evaluating an expression like:\n   *\n   *     node = math.parse('plot(sin(x), x)', nodes)\n   *\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseCustomNodes(state) {\n    var params = [];\n\n    if (state.tokenType === TOKENTYPE.SYMBOL && state.extraNodes.hasOwnProperty(state.token)) {\n      var CustomNode = state.extraNodes[state.token];\n      getToken(state); // parse parameters\n\n      if (state.token === '(') {\n        params = [];\n        openParams(state);\n        getToken(state);\n\n        if (state.token !== ')') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n\n        if (state.token !== ')') {\n          throw createSyntaxError(state, 'Parenthesis ) expected');\n        }\n\n        closeParams(state);\n        getToken(state);\n      } // create a new custom node\n      // noinspection JSValidateTypes\n\n\n      return new CustomNode(params);\n    }\n\n    return parseSymbol(state);\n  }\n  /**\n   * parse symbols: functions, variables, constants, units\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseSymbol(state) {\n    var node, name;\n\n    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {\n      name = state.token;\n      getToken(state);\n\n      if (CONSTANTS.hasOwnProperty(name)) {\n        // true, false, null, ...\n        node = new ConstantNode(CONSTANTS[name]);\n      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {\n        // NaN, Infinity\n        node = new ConstantNode(numeric(name, 'number'));\n      } else {\n        node = new SymbolNode(name);\n      } // parse function parameters and matrix index\n\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseDoubleQuotesString(state);\n  }\n  /**\n   * parse accessors:\n   * - function invocation in round brackets (...), for example sqrt(2)\n   * - index enclosed in square brackets [...], for example A[2,3]\n   * - dot notation for properties, like foo.bar\n   * @param {Node} node    Node on which to apply the parameters. If there\n   *                       are no parameters in the expression, the node\n   *                       itself is returned\n   * @param {string[]} [types]  Filter the types of notations\n   *                            can be ['(', '[', '.']\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAccessors(state, node, types) {\n    var params;\n\n    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      params = [];\n\n      if (state.token === '(') {\n        if (type.isSymbolNode(node) || type.isAccessorNode(node)) {\n          // function invocation like fn(2, 3) or obj.fn(2, 3)\n          openParams(state);\n          getToken(state);\n\n          if (state.token !== ')') {\n            params.push(parseAssignment(state)); // parse a list with parameters\n\n            while (state.token === ',') {\n              // eslint-disable-line no-unmodified-loop-condition\n              getToken(state);\n              params.push(parseAssignment(state));\n            }\n          }\n\n          if (state.token !== ')') {\n            throw createSyntaxError(state, 'Parenthesis ) expected');\n          }\n\n          closeParams(state);\n          getToken(state);\n          node = new FunctionNode(node, params);\n        } else {\n          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)\n          // don't parse it here but let it be handled by parseImplicitMultiplication\n          // with correct precedence\n          return node;\n        }\n      } else if (state.token === '[') {\n        // index notation like variable[2, 3]\n        openParams(state);\n        getToken(state);\n\n        if (state.token !== ']') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n\n        if (state.token !== ']') {\n          throw createSyntaxError(state, 'Parenthesis ] expected');\n        }\n\n        closeParams(state);\n        getToken(state);\n        node = new AccessorNode(node, new IndexNode(params));\n      } else {\n        // dot notation like variable.prop\n        getToken(state);\n\n        if (state.tokenType !== TOKENTYPE.SYMBOL) {\n          throw createSyntaxError(state, 'Property name expected after dot');\n        }\n\n        params.push(new ConstantNode(state.token));\n        getToken(state);\n        var dotNotation = true;\n        node = new AccessorNode(node, new IndexNode(params, dotNotation));\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Parse a double quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseDoubleQuotesString(state) {\n    var node, str;\n\n    if (state.token === '\"') {\n      str = parseDoubleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseSingleQuotesString(state);\n  }\n  /**\n   * Parse a string surrounded by double quotes \"...\"\n   * @return {string}\n   */\n\n\n  function parseDoubleQuotesStringToken(state) {\n    var str = '';\n\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\"') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\\"'\n        str += currentCharacter(state);\n        next(state);\n      }\n\n      str += currentCharacter(state);\n      next(state);\n    }\n\n    getToken(state);\n\n    if (state.token !== '\"') {\n      throw createSyntaxError(state, 'End of string \" expected');\n    }\n\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * Parse a single quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseSingleQuotesString(state) {\n    var node, str;\n\n    if (state.token === '\\'') {\n      str = parseSingleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseMatrix(state);\n  }\n  /**\n   * Parse a string surrounded by single quotes '...'\n   * @return {string}\n   */\n\n\n  function parseSingleQuotesStringToken(state) {\n    var str = '';\n\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\\'') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\''\n        str += currentCharacter(state);\n        next(state);\n      }\n\n      str += currentCharacter(state);\n      next(state);\n    }\n\n    getToken(state);\n\n    if (state.token !== '\\'') {\n      throw createSyntaxError(state, 'End of string \\' expected');\n    }\n\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * parse the matrix\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseMatrix(state) {\n    var array, params, rows, cols;\n\n    if (state.token === '[') {\n      // matrix [...]\n      openParams(state);\n      getToken(state);\n\n      if (state.token !== ']') {\n        // this is a non-empty matrix\n        var row = parseRow(state);\n\n        if (state.token === ';') {\n          // 2 dimensional array\n          rows = 1;\n          params = [row]; // the rows of the matrix are separated by dot-comma's\n\n          while (state.token === ';') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params[rows] = parseRow(state);\n            rows++;\n          }\n\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n\n          closeParams(state);\n          getToken(state); // check if the number of columns matches in all rows\n\n          cols = params[0].items.length;\n\n          for (var r = 1; r < rows; r++) {\n            if (params[r].items.length !== cols) {\n              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');\n            }\n          }\n\n          array = new ArrayNode(params);\n        } else {\n          // 1 dimensional vector\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n\n          closeParams(state);\n          getToken(state);\n          array = row;\n        }\n      } else {\n        // this is an empty matrix \"[ ]\"\n        closeParams(state);\n        getToken(state);\n        array = new ArrayNode([]);\n      }\n\n      return parseAccessors(state, array);\n    }\n\n    return parseObject(state);\n  }\n  /**\n   * Parse a single comma-separated row from a matrix, like 'a, b, c'\n   * @return {ArrayNode} node\n   */\n\n\n  function parseRow(state) {\n    var params = [parseAssignment(state)];\n    var len = 1;\n\n    while (state.token === ',') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getToken(state); // parse expression\n\n      params[len] = parseAssignment(state);\n      len++;\n    }\n\n    return new ArrayNode(params);\n  }\n  /**\n   * parse an object, enclosed in angle brackets{...}, for example {value: 2}\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseObject(state) {\n    if (state.token === '{') {\n      openParams(state);\n      var key;\n      var properties = {};\n\n      do {\n        getToken(state);\n\n        if (state.token !== '}') {\n          // parse key\n          if (state.token === '\"') {\n            key = parseDoubleQuotesStringToken(state);\n          } else if (state.token === '\\'') {\n            key = parseSingleQuotesStringToken(state);\n          } else if (state.tokenType === TOKENTYPE.SYMBOL) {\n            key = state.token;\n            getToken(state);\n          } else {\n            throw createSyntaxError(state, 'Symbol or string expected as object key');\n          } // parse key/value separator\n\n\n          if (state.token !== ':') {\n            throw createSyntaxError(state, 'Colon : expected after object key');\n          }\n\n          getToken(state); // parse key\n\n          properties[key] = parseAssignment(state);\n        }\n      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition\n\n\n      if (state.token !== '}') {\n        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');\n      }\n\n      closeParams(state);\n      getToken(state);\n      var node = new ObjectNode(properties); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseNumber(state);\n  }\n  /**\n   * parse a number\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseNumber(state) {\n    var numberStr;\n\n    if (state.tokenType === TOKENTYPE.NUMBER) {\n      // this is a number\n      numberStr = state.token;\n      getToken(state);\n      return new ConstantNode(numeric(numberStr, config.number));\n    }\n\n    return parseParentheses(state);\n  }\n  /**\n   * parentheses\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseParentheses(state) {\n    var node; // check if it is a parenthesized expression\n\n    if (state.token === '(') {\n      // parentheses (...)\n      openParams(state);\n      getToken(state);\n      node = parseAssignment(state); // start again\n\n      if (state.token !== ')') {\n        throw createSyntaxError(state, 'Parenthesis ) expected');\n      }\n\n      closeParams(state);\n      getToken(state);\n      node = new ParenthesisNode(node);\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseEnd(state);\n  }\n  /**\n   * Evaluated when the expression is not yet ended but expected to end\n   * @return {Node} res\n   * @private\n   */\n\n\n  function parseEnd(state) {\n    if (state.token === '') {\n      // syntax error or unexpected end of expression\n      throw createSyntaxError(state, 'Unexpected end of expression');\n    } else {\n      throw createSyntaxError(state, 'Value expected');\n    }\n  }\n  /**\n   * Shortcut for getting the current row value (one based)\n   * Returns the line of the currently handled expression\n   * @private\n   */\n\n  /* TODO: implement keeping track on the row number\n  function row () {\n    return null\n  }\n  */\n\n  /**\n   * Shortcut for getting the current col value (one based)\n   * Returns the column (position) where the last state.token starts\n   * @private\n   */\n\n\n  function col(state) {\n    return state.index - state.token.length + 1;\n  }\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {SyntaxError} instantiated error\n   * @private\n   */\n\n\n  function createSyntaxError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n    return error;\n  }\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {Error} instantiated error\n   * @private\n   */\n\n\n  function createError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n    return error;\n  }\n\n  return parse;\n}\n\nexports.name = 'parse';\nexports.path = 'expression';\nexports.factory = factory;","var defineProperty = require(\"./defineProperty\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread;","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  B(i,j)       ; B(i,j) !== 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm04 = function algorithm04(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspace\n\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop A(:,j)\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // update c\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop B(:,j)\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row exists in A\n\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]); // check for zero\n\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i); // update workspace\n\n          wb[i] = mark; // check we need to process values\n\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // check workspace has value @ i\n\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i]; // increment pointer\n\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i]; // increment pointer\n\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm04;\n}\n\nexports.name = 'algorithm04';\nexports.factory = factory;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar toFixed = require('../../utils/number').toFixed;\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nvar NO_INT = 'Number of decimals in function round must be an integer';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.2)              // returns number 3\n   *    math.round(3.8)              // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  var round = typed('round', {\n    'number': function number(x) {\n      return _round(x, 0);\n    },\n    'number, number': function numberNumber(x, n) {\n      if (!isInteger(n)) {\n        throw new TypeError(NO_INT);\n      }\n\n      if (n < 0 || n > 15) {\n        throw new Error('Number of decimals in function round must be in te range of 0-15');\n      }\n\n      return _round(x, n);\n    },\n    'Complex': function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    'Fraction': function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, round, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, round, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, round, false);\n    },\n    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, round, true);\n    },\n    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, round, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, round, false).valueOf();\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, round, true).valueOf();\n    }\n  });\n  round.toTex = {\n    1: \"\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil\",\n    2: undefined // use default template\n\n  };\n  return round;\n}\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n * @private\n */\n\n\nfunction _round(value, decimals) {\n  return parseFloat(toFixed(value, decimals));\n}\n\nexports.name = 'round';\nexports.factory = factory;","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n\n  var latex = require('../../utils/latex.js');\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3)               // returns number 5\n   *    math.add(2, 3, 4)            // returns number 9\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(-4, 1)\n   *    math.add(a, b)               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   *    const c = math.unit('5 cm')\n   *    const d = math.unit('2.1 mm')\n   *    math.add(c, d)               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n\n  var add = typed('add', extend({\n    // we extend the signatures of addScalar with signatures dealing with matrices\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, addScalar);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, addScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, addScalar, true);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, addScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return add(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return add(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return add(x, matrix(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, addScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, y, addScalar, false);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, addScalar, true);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, addScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, addScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, addScalar, true).valueOf();\n    },\n    'any, any': addScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = add(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = add(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, addScalar.signatures));\n  add.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['add'], \"${args[1]}\\\\right)\")\n  };\n  return add;\n}\n\nexports.name = 'add';\nexports.factory = factory;","'use strict';\n/**\n * Test whether value is a boolean\n * @param {*} value\n * @return {boolean} isBoolean\n */\n\nexports.isBoolean = function (value) {\n  return typeof value === 'boolean';\n};","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nvar array = require('../../utils/array');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var multiplyScalar = load(require('./multiplyScalar'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  var DenseMatrix = type.DenseMatrix;\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n  var multiply = typed('multiply', extend({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': function ArrayArray(x, y) {\n      // check dimensions\n      _validateMatrixDimensions(array.size(x), array.size(y)); // use dense matrix implementation\n\n\n      var m = multiply(matrix(x), matrix(y)); // return array or scalar\n\n      return type.isMatrix(m) ? m.valueOf() : m;\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(x, matrix(y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(matrix(x, y.storage()), y);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = multiply(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = multiply(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, multiplyScalar.signatures));\n\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n\n            break;\n\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n\n            break;\n\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    } // a dense\n\n\n    var adata = a._data;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result (do not initialize it with zero)\n\n\n    var c = mf(adata[0], bdata[0]); // loop data\n\n    for (var i = 1; i < n; i++) {\n      // multiply and accumulate\n      c = af(c, mf(adata[i], bdata[i]));\n    }\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n\n      c[j] = sum;\n    } // return matrix\n\n\n    return new DenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n\n      c[i] = sum;\n    } // return matrix\n\n\n    return new DenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n\n    return new DenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n\n  multiply.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['multiply'], \"${args[1]}\\\\right)\")\n  };\n  return multiply;\n}\n\nexports.name = 'multiply';\nexports.factory = factory;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var zeros = load(require('../matrix/zeros'));\n  var not = load(require('./not'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n\n  var and = typed('and', {\n    'number, number': function numberNumber(x, y) {\n      return !!(x && y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return and(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, and, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, and, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, and, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, and);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return and(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return and(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return and(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(x, y, and, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(x, y, and, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(y, x, and, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(y, x, and, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return and(matrix(x), y).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return and(x, matrix(y)).valueOf();\n    }\n  });\n  and.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['and'], \"${args[1]}\\\\right)\")\n  };\n  return and;\n}\n\nexports.name = 'and';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var unaryMinus = load(require('./unaryMinus'));\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14')); // TODO: split function subtract in two: subtract and subtractScalar\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  var subtract = typed('subtract', {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = subtract(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, subtract);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, subtract, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, subtract, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, subtract);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return subtract(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, subtract);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, subtract, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, subtract, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, subtract, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, subtract, true).valueOf();\n    }\n  });\n  subtract.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['subtract'], \"${args[1]}\\\\right)\")\n  };\n  return subtract;\n}\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}\n\nexports.name = 'subtract';\nexports.factory = factory;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar formatNumber = require('./number').format;\n\nvar formatBigNumber = require('./bignumber/formatter').format;\n\nvar isBigNumber = require('./bignumber/isBigNumber');\n/**\n * Test whether value is a string\n * @param {*} value\n * @return {boolean} isString\n */\n\n\nexports.isString = function (value) {\n  return typeof value === 'string';\n};\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\n\n\nexports.endsWith = function (text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n};\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\n\n\nexports.format = function (value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if (exports.isString(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && _typeof(value) === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString() !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString();\n    } else {\n      var entries = [];\n\n      for (var key in value) {\n        if (value.hasOwnProperty(key)) {\n          entries.push('\"' + key + '\": ' + exports.format(value[key], options));\n        }\n      }\n\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n};\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\n\nexports.stringify = function (value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n};\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\n\nexports.escape = function (value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n};\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n\n      str += formatArray(array[i], options);\n    }\n\n    str += ']';\n    return str;\n  } else {\n    return exports.format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\n\nfunction looksLikeFraction(value) {\n  return value && _typeof(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","'use strict';\n\nvar util = require('../../utils/index');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var divideScalar = load(require('../arithmetic/divideScalar'));\n  var addScalar = load(require('../arithmetic/addScalar'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var unaryMinus = load(require('../arithmetic/unaryMinus'));\n  var det = load(require('../matrix/det'));\n  var identity = load(require('./identity'));\n  var abs = load(require('../arithmetic/abs'));\n  /**\n   * Calculate the inverse of a square matrix.\n   *\n   * Syntax:\n   *\n   *     math.inv(x)\n   *\n   * Examples:\n   *\n   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]\n   *     math.inv(4)                 // returns 0.25\n   *     1 / 4                       // returns 0.25\n   *\n   * See also:\n   *\n   *     det, transpose\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n\n  var inv = typed('inv', {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = type.isMatrix(x) ? x.size() : util.array.size(x);\n\n      switch (size.length) {\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            if (type.isMatrix(x)) {\n              return matrix([divideScalar(1, x.valueOf()[0])]);\n            } else {\n              return [divideScalar(1, x[0])];\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            if (type.isMatrix(x)) {\n              return matrix(_inv(x.valueOf(), rows, cols), x.storage());\n            } else {\n              // return an Array\n              return _inv(x, rows, cols);\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + util.string.format(size) + ')');\n      }\n    },\n    'any': function any(x) {\n      // scalar\n      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n    }\n  });\n  /**\n   * Calculate the inverse of a square matrix\n   * @param {Array[]} mat     A square matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns, must equal rows\n   * @return {Array[]} inv    Inverse matrix\n   * @private\n   */\n\n  function _inv(mat, rows, cols) {\n    var r, s, f, value, temp;\n\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      value = mat[0][0];\n\n      if (value === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n\n      return [[divideScalar(1, value)]];\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      var d = det(mat);\n\n      if (d === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n\n      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];\n    } else {\n      // this is a matrix of 3 x 3 or larger\n      // calculate inverse using gauss-jordan elimination\n      //      https://en.wikipedia.org/wiki/Gaussian_elimination\n      //      http://mathworld.wolfram.com/MatrixInverse.html\n      //      http://math.uww.edu/~mcfarlat/inverse.htm\n      // make a copy of the matrix (only the arrays, not of the elements)\n      var A = mat.concat();\n\n      for (r = 0; r < rows; r++) {\n        A[r] = A[r].concat();\n      } // create an identity matrix which in the end will contain the\n      // matrix inverse\n\n\n      var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions\n\n      for (var c = 0; c < cols; c++) {\n        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]\n        var ABig = abs(A[c][c]);\n        var rBig = c;\n        r = c + 1;\n\n        while (r < rows) {\n          if (abs(A[r][c]) > ABig) {\n            ABig = abs(A[r][c]);\n            rBig = r;\n          }\n\n          r++;\n        }\n\n        if (ABig === 0) {\n          throw Error('Cannot calculate inverse, determinant is zero');\n        }\n\n        r = rBig;\n\n        if (r !== c) {\n          temp = A[c];\n          A[c] = A[r];\n          A[r] = temp;\n          temp = B[c];\n          B[c] = B[r];\n          B[r] = temp;\n        } // eliminate non-zero values on the other rows at column c\n\n\n        var Ac = A[c];\n        var Bc = B[c];\n\n        for (r = 0; r < rows; r++) {\n          var Ar = A[r];\n          var Br = B[r];\n\n          if (r !== c) {\n            // eliminate value at column c and row r\n            if (Ar[c] !== 0) {\n              f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value\n              // at column c\n\n              for (s = c; s < cols; s++) {\n                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n              }\n\n              for (s = 0; s < cols; s++) {\n                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));\n              }\n            }\n          } else {\n            // normalize value at Acc to 1,\n            // divide each value on row r with the value at Acc\n            f = Ac[c];\n\n            for (s = c; s < cols; s++) {\n              Ar[s] = divideScalar(Ar[s], f);\n            }\n\n            for (s = 0; s < cols; s++) {\n              Br[s] = divideScalar(Br[s], f);\n            }\n          }\n        }\n      }\n\n      return B;\n    }\n  }\n\n  inv.toTex = {\n    1: \"\\\\left(${args[0]}\\\\right)^{-1}\"\n  };\n  return inv;\n}\n\nexports.name = 'inv';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.floor(c)                // returns Complex 3 - 3i\n   *\n   *    math.floor([3.2, 3.8, -4.7]) // returns Array [3, 3, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var floor = typed('floor', {\n    'number': Math.floor,\n    'Complex': function Complex(x) {\n      return x.floor();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.floor();\n    },\n    'Fraction': function Fraction(x) {\n      return x.floor();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, floor, true);\n    }\n  });\n  floor.toTex = {\n    1: \"\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor\"\n  };\n  return floor;\n}\n\nexports.name = 'floor';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format\n   *\n   * @return {Matrix} The created matrix\n   */\n  var matrix = typed('matrix', {\n    '': function _() {\n      return _create([]);\n    },\n    'string': function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    'Array': function Array(data) {\n      return _create(data);\n    },\n    'Matrix': function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n  matrix.toTex = {\n    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',\n    1: \"\\\\left(${args[0]}\\\\right)\",\n    2: \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return matrix;\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    var M = type.Matrix.storage(format || 'default'); // create instance\n\n    return new M(data, datatype);\n  }\n}\n\nexports.name = 'matrix';\nexports.factory = factory;","\"use strict\";\n\n// Map the characters to escape to their escaped values. The list is derived\n// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar defaultEscapes = {\n  \"{\": \"\\\\{\",\n  \"}\": \"\\\\}\",\n  \"\\\\\": \"\\\\textbackslash{}\",\n  \"#\": \"\\\\#\",\n  $: \"\\\\$\",\n  \"%\": \"\\\\%\",\n  \"&\": \"\\\\&\",\n  \"^\": \"\\\\textasciicircum{}\",\n  _: \"\\\\_\",\n  \"~\": \"\\\\textasciitilde{}\"\n};\nvar formatEscapes = {\n  \"\\u2013\": \"\\\\--\",\n  \"\\u2014\": \"\\\\---\",\n  \" \": \"~\",\n  \"\\t\": \"\\\\qquad{}\",\n  \"\\r\\n\": \"\\\\newline{}\",\n  \"\\n\": \"\\\\newline{}\"\n};\n\nvar defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {\n  return _extends({}, defaultEscapes, formatEscapes);\n};\n\n/**\n * Escape a string to be used in LaTeX documents.\n * @param {string} str the string to be escaped.\n * @param {boolean} params.preserveFormatting whether formatting escapes should\n *  be performed (default: false).\n * @param {function} params.escapeMapFn the function to modify the escape maps.\n * @return {string} the escaped string, ready to be used in LaTeX.\n */\nmodule.exports = function (str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$preserveFormatti = _ref.preserveFormatting,\n      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,\n      _ref$escapeMapFn = _ref.escapeMapFn,\n      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;\n\n  var runningStr = String(str);\n  var result = \"\";\n\n  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});\n  var escapeKeys = Object.keys(escapes); // as it is reused later on\n\n  // Algorithm: Go through the string character by character, if it matches\n  // with one of the special characters then we'll replace it with the escaped\n  // version.\n\n  var _loop = function _loop() {\n    var specialCharFound = false;\n    escapeKeys.forEach(function (key, index) {\n      if (specialCharFound) {\n        return;\n      }\n      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {\n        result += escapes[escapeKeys[index]];\n        runningStr = runningStr.slice(key.length, runningStr.length);\n        specialCharFound = true;\n      }\n    });\n    if (!specialCharFound) {\n      result += runningStr.slice(0, 1);\n      runningStr = runningStr.slice(1, runningStr.length);\n    }\n  };\n\n  while (runningStr) {\n    _loop();\n  }\n  return result;\n};","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar stringify = require('../../utils/string').stringify;\n\nvar escape = require('../../utils/string').escape;\n\nvar isSafeProperty = require('../../utils/customs').isSafeProperty;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor ObjectNode\n   * @extends {Node}\n   * Holds an object with keys/values\n   * @param {Object.<string, Node>} [properties]   object with key/value pairs\n   */\n\n  function ObjectNode(properties) {\n    if (!(this instanceof ObjectNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.properties = properties || {}; // validate input\n\n    if (properties) {\n      if (!(_typeof(properties) === 'object') || !Object.keys(properties).every(function (key) {\n        return type.isNode(properties[key]);\n      })) {\n        throw new TypeError('Object containing Nodes expected');\n      }\n    }\n  }\n\n  ObjectNode.prototype = new Node();\n  ObjectNode.prototype.type = 'ObjectNode';\n  ObjectNode.prototype.isObjectNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ObjectNode.prototype._compile = function (math, argNames) {\n    var evalEntries = {};\n\n    for (var key in this.properties) {\n      if (hasOwnProperty(this.properties, key)) {\n        // we stringify/parse the key here to resolve unicode characters,\n        // so you cannot create a key like {\"co\\\\u006Estructor\": null}\n        var stringifiedKey = stringify(key);\n        var parsedKey = JSON.parse(stringifiedKey);\n\n        if (!isSafeProperty(this.properties, parsedKey)) {\n          throw new Error('No access to property \"' + parsedKey + '\"');\n        }\n\n        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);\n      }\n    }\n\n    return function evalObjectNode(scope, args, context) {\n      var obj = {};\n\n      for (var _key in evalEntries) {\n        if (hasOwnProperty(evalEntries, _key)) {\n          obj[_key] = evalEntries[_key](scope, args, context);\n        }\n      }\n\n      return obj;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ObjectNode.prototype.forEach = function (callback) {\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);\n      }\n    }\n  };\n  /**\n   * Create a new ObjectNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ObjectNode} Returns a transformed copy of the node\n   */\n\n\n  ObjectNode.prototype.map = function (callback) {\n    var properties = {};\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));\n      }\n    }\n\n    return new ObjectNode(properties);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ObjectNode}\n   */\n\n\n  ObjectNode.prototype.clone = function () {\n    var properties = {};\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this.properties[key];\n      }\n    }\n\n    return new ObjectNode(properties);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ObjectNode.prototype._toString = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));\n      }\n    }\n\n    return '{' + entries.join(', ') + '}';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ObjectNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ObjectNode',\n      properties: this.properties\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ObjectNode\", \"properties\": {...}}`,\n   *                       where mathjs is optional\n   * @returns {ObjectNode}\n   */\n\n\n  ObjectNode.fromJSON = function (json) {\n    return new ObjectNode(json.properties);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ObjectNode.prototype.toHTML = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push('<span class=\"math-symbol math-property\">' + escape(key) + '</span>' + '<span class=\"math-operator math-assignment-operator math-property-assignment-operator math-binary-operator\">:</span>' + this.properties[key].toHTML(options));\n      }\n    }\n\n    return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ObjectNode.prototype._toTex = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push('\\\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\\\\\');\n      }\n    }\n\n    return \"\\\\left\\\\{\\\\begin{array}{ll}\".concat(entries.join('\\n'), \"\\\\end{array}\\\\right\\\\}\");\n  };\n\n  return ObjectNode;\n}\n\nexports.name = 'ObjectNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\n\nfunction IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = new Error().stack;\n}\n\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;\nmodule.exports = IndexError;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar lazy = require('../../utils/object').lazy;\n\nvar isFactory = require('../../utils/object').isFactory;\n\nvar traverse = require('../../utils/object').traverse;\n\nvar ArgumentsError = require('../../error/ArgumentsError');\n\nfunction factory(type, config, load, typed, math) {\n  /**\n   * Import functions from an object or a module\n   *\n   * Syntax:\n   *\n   *    math.import(object)\n   *    math.import(object, options)\n   *\n   * Where:\n   *\n   * - `object: Object`\n   *   An object with functions to be imported.\n   * - `options: Object` An object with import options. Available options:\n   *   - `override: boolean`\n   *     If true, existing functions will be overwritten. False by default.\n   *   - `silent: boolean`\n   *     If true, the function will not throw errors on duplicates or invalid\n   *     types. False by default.\n   *   - `wrap: boolean`\n   *     If true, the functions will be wrapped in a wrapper function\n   *     which converts data types like Matrix to primitive data types like Array.\n   *     The wrapper is needed when extending math.js with libraries which do not\n   *     support these data type. False by default.\n   *\n   * Examples:\n   *\n   *    // define new functions and variables\n   *    math.import({\n   *      myvalue: 42,\n   *      hello: function (name) {\n   *        return 'hello, ' + name + '!'\n   *      }\n   *    })\n   *\n   *    // use the imported function and variable\n   *    math.myvalue * 2               // 84\n   *    math.hello('user')             // 'hello, user!'\n   *\n   *    // import the npm module 'numbers'\n   *    // (must be installed first with `npm install numbers`)\n   *    math.import(require('numbers'), {wrap: true})\n   *\n   *    math.fibonacci(7) // returns 13\n   *\n   * @param {Object | Array} object   Object with functions to be imported.\n   * @param {Object} [options]        Import options.\n   */\n  function mathImport(object, options) {\n    var num = arguments.length;\n\n    if (num !== 1 && num !== 2) {\n      throw new ArgumentsError('import', num, 1, 2);\n    }\n\n    if (!options) {\n      options = {};\n    } // TODO: allow a typed-function with name too\n\n\n    if (isFactory(object)) {\n      _importFactory(object, options);\n    } else if (Array.isArray(object)) {\n      object.forEach(function (entry) {\n        mathImport(entry, options);\n      });\n    } else if (_typeof(object) === 'object') {\n      // a map with functions\n      for (var name in object) {\n        if (object.hasOwnProperty(name)) {\n          var value = object[name];\n\n          if (isSupportedType(value)) {\n            _import(name, value, options);\n          } else if (isFactory(object)) {\n            _importFactory(object, options);\n          } else {\n            mathImport(value, options);\n          }\n        }\n      }\n    } else {\n      if (!options.silent) {\n        throw new TypeError('Factory, Object, or Array expected');\n      }\n    }\n  }\n  /**\n   * Add a property to the math namespace and create a chain proxy for it.\n   * @param {string} name\n   * @param {*} value\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n\n\n  function _import(name, value, options) {\n    // TODO: refactor this function, it's to complicated and contains duplicate code\n    if (options.wrap && typeof value === 'function') {\n      // create a wrapper around the function\n      value = _wrap(value);\n    }\n\n    if (isTypedFunction(math[name]) && isTypedFunction(value)) {\n      if (options.override) {\n        // give the typed function the right name\n        value = typed(name, value.signatures);\n      } else {\n        // merge the existing and typed function\n        value = typed(math[name], value);\n      }\n\n      math[name] = value;\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (math[name] === undefined || options.override) {\n      math[name] = value;\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (!options.silent) {\n      throw new Error('Cannot import \"' + name + '\": already exists');\n    }\n  }\n\n  function _importTransform(name, value) {\n    if (value && typeof value.transform === 'function') {\n      math.expression.transform[name] = value.transform;\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value.transform;\n      }\n    } else {\n      // remove existing transform\n      delete math.expression.transform[name];\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value;\n      }\n    }\n  }\n\n  function _deleteTransform(name) {\n    delete math.expression.transform[name];\n\n    if (allowedInExpressions(name)) {\n      math.expression.mathWithTransform[name] = math[name];\n    } else {\n      delete math.expression.mathWithTransform[name];\n    }\n  }\n  /**\n   * Create a wrapper a round an function which converts the arguments\n   * to their primitive values (like convert a Matrix to Array)\n   * @param {Function} fn\n   * @return {Function} Returns the wrapped function\n   * @private\n   */\n\n\n  function _wrap(fn) {\n    var wrapper = function wrapper() {\n      var args = [];\n\n      for (var i = 0, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        args[i] = arg && arg.valueOf();\n      }\n\n      return fn.apply(math, args);\n    };\n\n    if (fn.transform) {\n      wrapper.transform = fn.transform;\n    }\n\n    return wrapper;\n  }\n  /**\n   * Import an instance of a factory into math.js\n   * @param {{factory: Function, name: string, path: string, math: boolean}} factory\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n\n\n  function _importFactory(factory, options) {\n    if (typeof factory.name === 'string') {\n      var name = factory.name;\n      var existingTransform = name in math.expression.transform;\n      var namespace = factory.path ? traverse(math, factory.path) : math;\n      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;\n\n      var resolver = function resolver() {\n        var instance = load(factory);\n\n        if (instance && typeof instance.transform === 'function') {\n          throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path=\"expression.transform\"');\n        }\n\n        if (isTypedFunction(existing) && isTypedFunction(instance)) {\n          if (options.override) {// replace the existing typed function (nothing to do)\n          } else {\n            // merge the existing and new typed function\n            instance = typed(existing, instance);\n          }\n\n          return instance;\n        }\n\n        if (existing === undefined || options.override) {\n          return instance;\n        }\n\n        if (!options.silent) {\n          throw new Error('Cannot import \"' + name + '\": already exists');\n        }\n      };\n\n      if (factory.lazy !== false) {\n        lazy(namespace, name, resolver);\n\n        if (existingTransform) {\n          _deleteTransform(name);\n        } else {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            lazy(math.expression.mathWithTransform, name, resolver);\n          }\n        }\n      } else {\n        namespace[name] = resolver();\n\n        if (existingTransform) {\n          _deleteTransform(name);\n        } else {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            math.expression.mathWithTransform[name] = resolver();\n          }\n        }\n      }\n\n      math.emit('import', name, resolver, factory.path);\n    } else {\n      // unnamed factory.\n      // no lazy loading\n      load(factory);\n    }\n  }\n  /**\n   * Check whether given object is a type which can be imported\n   * @param {Function | number | string | boolean | null | Unit | Complex} object\n   * @return {boolean}\n   * @private\n   */\n\n\n  function isSupportedType(object) {\n    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || object && type.isUnit(object) || object && type.isComplex(object) || object && type.isBigNumber(object) || object && type.isFraction(object) || object && type.isMatrix(object) || object && Array.isArray(object);\n  }\n  /**\n   * Test whether a given thing is a typed-function\n   * @param {*} fn\n   * @return {boolean} Returns true when `fn` is a typed-function\n   */\n\n\n  function isTypedFunction(fn) {\n    return typeof fn === 'function' && _typeof(fn.signatures) === 'object';\n  }\n\n  function allowedInExpressions(name) {\n    return !unsafe.hasOwnProperty(name);\n  }\n\n  function factoryAllowedInExpressions(factory) {\n    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);\n  } // namespaces and functions not available in the parser for safety reasons\n\n\n  var unsafe = {\n    'expression': true,\n    'type': true,\n    'docs': true,\n    'error': true,\n    'json': true,\n    'chain': true // chain method not supported. Note that there is a unit chain too.\n\n  };\n  return mathImport;\n}\n\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.name = 'import';\nexports.factory = factory;\nexports.lazy = true;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","'use strict'; // list of identifiers of nodes in order of their precedence\n// also contains information about left/right associativity\n// and which other operator the operator is associative with\n// Example:\n// addition is associative with addition and subtraction, because:\n// (a+b)+c=a+(b+c)\n// (a+b)-c=a+(b-c)\n//\n// postfix operators are left associative, prefix operators\n// are right associative\n//\n// It's also possible to set the following properties:\n// latexParens: if set to false, this node doesn't need to be enclosed\n//              in parentheses when using LaTeX\n// latexLeftParens: if set to false, this !OperatorNode's!\n//                  left argument doesn't need to be enclosed\n//                  in parentheses\n// latexRightParens: the same for the right argument\n\nvar properties = [{\n  // assignment\n  'AssignmentNode': {},\n  'FunctionAssignmentNode': {}\n}, {\n  // conditional expression\n  'ConditionalNode': {\n    latexLeftParens: false,\n    latexRightParens: false,\n    latexParens: false // conditionals don't need parentheses in LaTeX because\n    // they are 2 dimensional\n\n  }\n}, {\n  // logical or\n  'OperatorNode:or': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // logical xor\n  'OperatorNode:xor': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // logical and\n  'OperatorNode:and': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise or\n  'OperatorNode:bitOr': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise xor\n  'OperatorNode:bitXor': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise and\n  'OperatorNode:bitAnd': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // relational operators\n  'OperatorNode:equal': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:unequal': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:smaller': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:larger': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:smallerEq': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:largerEq': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'RelationalNode': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitshift operators\n  'OperatorNode:leftShift': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:rightArithShift': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:rightLogShift': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // unit conversion\n  'OperatorNode:to': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // range\n  'RangeNode': {}\n}, {\n  // addition, subtraction\n  'OperatorNode:add': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n  },\n  'OperatorNode:subtract': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // multiply, divide, modulus\n  'OperatorNode:multiply': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']\n  },\n  'OperatorNode:divide': {\n    associativity: 'left',\n    associativeWith: [],\n    latexLeftParens: false,\n    latexRightParens: false,\n    latexParens: false // fractions don't require parentheses because\n    // they're 2 dimensional, so parens aren't needed\n    // in LaTeX\n\n  },\n  'OperatorNode:dotMultiply': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']\n  },\n  'OperatorNode:dotDivide': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:mod': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // unary prefix operators\n  'OperatorNode:unaryPlus': {\n    associativity: 'right'\n  },\n  'OperatorNode:unaryMinus': {\n    associativity: 'right'\n  },\n  'OperatorNode:bitNot': {\n    associativity: 'right'\n  },\n  'OperatorNode:not': {\n    associativity: 'right'\n  }\n}, {\n  // exponentiation\n  'OperatorNode:pow': {\n    associativity: 'right',\n    associativeWith: [],\n    latexRightParens: false // the exponent doesn't need parentheses in\n    // LaTeX because it's 2 dimensional\n    // (it's on top)\n\n  },\n  'OperatorNode:dotPow': {\n    associativity: 'right',\n    associativeWith: []\n  }\n}, {\n  // factorial\n  'OperatorNode:factorial': {\n    associativity: 'left'\n  }\n}, {\n  // matrix transpose\n  'OperatorNode:transpose': {\n    associativity: 'left'\n  }\n}];\n/**\n * Get the precedence of a Node.\n * Higher number for higher precedence, starting with 0.\n * Returns null if the precedence is undefined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {number|null}\n */\n\nfunction getPrecedence(_node, parenthesis) {\n  var node = _node;\n\n  if (parenthesis !== 'keep') {\n    // ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n\n  var identifier = node.getIdentifier();\n\n  for (var i = 0; i < properties.length; i++) {\n    if (identifier in properties[i]) {\n      return i;\n    }\n  }\n\n  return null;\n}\n/**\n * Get the associativity of an operator (left or right).\n * Returns a string containing 'left' or 'right' or null if\n * the associativity is not defined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {string|null}\n * @throws {Error}\n */\n\n\nfunction getAssociativity(_node, parenthesis) {\n  var node = _node;\n\n  if (parenthesis !== 'keep') {\n    // ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n\n  var identifier = node.getIdentifier();\n  var index = getPrecedence(node, parenthesis);\n\n  if (index === null) {\n    // node isn't in the list\n    return null;\n  }\n\n  var property = properties[index][identifier];\n\n  if (property.hasOwnProperty('associativity')) {\n    if (property.associativity === 'left') {\n      return 'left';\n    }\n\n    if (property.associativity === 'right') {\n      return 'right';\n    } // associativity is invalid\n\n\n    throw Error('\\'' + identifier + '\\' has the invalid associativity \\'' + property.associativity + '\\'.');\n  } // associativity is undefined\n\n\n  return null;\n}\n/**\n * Check if an operator is associative with another operator.\n * Returns either true or false or null if not defined.\n *\n * @param {Node} nodeA\n * @param {Node} nodeB\n * @param {string} parenthesis\n * @return {bool|null}\n */\n\n\nfunction isAssociativeWith(nodeA, nodeB, parenthesis) {\n  // ParenthesisNodes are only ignored when not in 'keep' mode\n  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;\n  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;\n  var identifierA = a.getIdentifier();\n  var identifierB = b.getIdentifier();\n  var index = getPrecedence(a, parenthesis);\n\n  if (index === null) {\n    // node isn't in the list\n    return null;\n  }\n\n  var property = properties[index][identifierA];\n\n  if (property.hasOwnProperty('associativeWith') && property.associativeWith instanceof Array) {\n    for (var i = 0; i < property.associativeWith.length; i++) {\n      if (property.associativeWith[i] === identifierB) {\n        return true;\n      }\n    }\n\n    return false;\n  } // associativeWith is not defined\n\n\n  return null;\n}\n\nmodule.exports.properties = properties;\nmodule.exports.getPrecedence = getPrecedence;\nmodule.exports.getAssociativity = getAssociativity;\nmodule.exports.isAssociativeWith = isAssociativeWith;","/**!\n * Sortable\n * @author\tRubaXa   <trash@rubaxa.org>\n * @author\towenm    <owen23355@gmail.com>\n * @license MIT\n */\n\n(function sortableModule(factory) {\n\t\"use strict\";\n\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine(factory);\n\t}\n\telse if (typeof module != \"undefined\" && typeof module.exports != \"undefined\") {\n\t\tmodule.exports = factory();\n\t}\n\telse {\n\t\t/* jshint sub:true */\n\t\twindow[\"Sortable\"] = factory();\n\t}\n})(function sortableFactory() {\n\t\"use strict\";\n\n\tif (typeof window === \"undefined\" || !window.document) {\n\t\treturn function sortableError() {\n\t\t\tthrow new Error(\"Sortable.js requires a window with a document\");\n\t\t};\n\t}\n\n\tvar dragEl,\n\t\tparentEl,\n\t\tghostEl,\n\t\tcloneEl,\n\t\trootEl,\n\t\tnextEl,\n\t\tlastDownEl,\n\n\t\tscrollEl,\n\t\tscrollParentEl,\n\t\tscrollCustomFn,\n\n\t\toldIndex,\n\t\tnewIndex,\n\n\t\tactiveGroup,\n\t\tputSortable,\n\n\t\tautoScrolls = [],\n\t\tscrolling = false,\n\n\t\tawaitingDragStarted = false,\n\t\tignoreNextClick = false,\n\t\tsortables = [],\n\n\t\tpointerElemChangedInterval,\n\t\tlastPointerElemX,\n\t\tlastPointerElemY,\n\n\t\ttapEvt,\n\t\ttouchEvt,\n\n\t\tmoved,\n\n\n\t\tlastTarget,\n\t\tlastDirection,\n\t\tpastFirstInvertThresh = false,\n\t\tisCircumstantialInvert = false,\n\t\tlastMode, // 'swap' or 'insert'\n\n\t\ttargetMoveDistance,\n\n\n\t\tforRepaintDummy,\n\t\trealDragElRect, // dragEl rect after current animation\n\n\t\t/** @const */\n\t\tR_SPACE = /\\s+/g,\n\n\t\texpando = 'Sortable' + (new Date).getTime(),\n\n\t\twin = window,\n\t\tdocument = win.document,\n\t\tparseInt = win.parseInt,\n\t\tsetTimeout = win.setTimeout,\n\n\t\t$ = win.jQuery || win.Zepto,\n\t\tPolymer = win.Polymer,\n\n\t\tcaptureMode = {\n\t\t\tcapture: false,\n\t\t\tpassive: false\n\t\t},\n\n\t\tIE11OrLess = !!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\\.|msie|iemobile)/i),\n\t\tEdge = !!navigator.userAgent.match(/Edge/i),\n\t\t// FireFox = !!navigator.userAgent.match(/firefox/i),\n\n\t\tCSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\n\n\t\t// This will not pass for IE9, because IE9 DnD only works on anchors\n\t\tsupportDraggable = ('draggable' in document.createElement('div')),\n\n\t\tsupportCssPointerEvents = (function() {\n\t\t\t// false when <= IE11\n\t\t\tif (IE11OrLess) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar el = document.createElement('x');\n\t\t\tel.style.cssText = 'pointer-events:auto';\n\t\t\treturn el.style.pointerEvents === 'auto';\n\t\t})(),\n\n\t\t_silent = false,\n\t\t_alignedSilent = false,\n\n\t\tabs = Math.abs,\n\t\tmin = Math.min,\n\n\t\tsavedInputChecked = [],\n\n\t\t_detectDirection = function(el, options) {\n\t\t\tvar elCSS = _css(el),\n\t\t\t\telWidth = parseInt(elCSS.width),\n\t\t\t\tchild1 = _getChild(el, 0, options),\n\t\t\t\tchild2 = _getChild(el, 1, options),\n\t\t\t\tfirstChildCSS = child1 && _css(child1),\n\t\t\t\tsecondChildCSS = child2 && _css(child2),\n\t\t\t\tfirstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + _getRect(child1).width,\n\t\t\t\tsecondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + _getRect(child2).width;\n\t\t\tif (elCSS.display === 'flex') {\n\t\t\t\treturn elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse'\n\t\t\t\t? 'vertical' : 'horizontal';\n\t\t\t}\n\t\t\tif (child1 && firstChildCSS.float !== 'none') {\n\t\t\t\tvar touchingSideChild2 = firstChildCSS.float === 'left' ? 'left' : 'right';\n\n\t\t\t\treturn child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ?\n\t\t\t\t\t'vertical' : 'horizontal';\n\t\t\t}\n\t\t\treturn (child1 &&\n\t\t\t\t(\n\t\t\t\t\tfirstChildCSS.display === 'block' ||\n\t\t\t\t\tfirstChildCSS.display === 'flex' ||\n\t\t\t\t\tfirstChildCSS.display === 'table' ||\n\t\t\t\t\tfirstChildCSS.display === 'grid' ||\n\t\t\t\t\tfirstChildWidth >= elWidth &&\n\t\t\t\t\telCSS[CSSFloatProperty] === 'none' ||\n\t\t\t\t\tchild2 &&\n\t\t\t\t\telCSS[CSSFloatProperty] === 'none' &&\n\t\t\t\t\tfirstChildWidth + secondChildWidth > elWidth\n\t\t\t\t) ?\n\t\t\t\t'vertical' : 'horizontal'\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n\t\t * @param  {Number} x      X position\n\t\t * @param  {Number} y      Y position\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\n\t\t */\n\t\t_detectNearestEmptySortable = function(x, y) {\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\n\t\t\t\tif (sortables[i].children.length) continue;\n\n\t\t\t\tvar rect = _getRect(sortables[i]),\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\n\n\t\t\t\tif (insideHorizontally && insideVertically) {\n\t\t\t\t\treturn sortables[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_isClientInRowColumn = function(x, y, el, axis, options) {\n\t\t\tvar targetRect = _getRect(el),\n\t\t\t\ttargetS1Opp = axis === 'vertical' ? targetRect.left : targetRect.top,\n\t\t\t\ttargetS2Opp = axis === 'vertical' ? targetRect.right : targetRect.bottom,\n\t\t\t\tmouseOnOppAxis = axis === 'vertical' ? x : y;\n\n\t\t\treturn targetS1Opp < mouseOnOppAxis && mouseOnOppAxis < targetS2Opp;\n\t\t},\n\n\t\t_isElInRowColumn = function(el1, el2, axis) {\n\t\t\tvar el1Rect = el1 === dragEl && realDragElRect || _getRect(el1),\n\t\t\t\tel2Rect = el2 === dragEl && realDragElRect || _getRect(el2),\n\t\t\t\tel1S1Opp = axis === 'vertical' ? el1Rect.left : el1Rect.top,\n\t\t\t\tel1S2Opp = axis === 'vertical' ? el1Rect.right : el1Rect.bottom,\n\t\t\t\tel1OppLength = axis === 'vertical' ? el1Rect.width : el1Rect.height,\n\t\t\t\tel2S1Opp = axis === 'vertical' ? el2Rect.left : el2Rect.top,\n\t\t\t\tel2S2Opp = axis === 'vertical' ? el2Rect.right : el2Rect.bottom,\n\t\t\t\tel2OppLength = axis === 'vertical' ? el2Rect.width : el2Rect.height;\n\n\t\t\treturn (\n\t\t\t\tel1S1Opp === el2S1Opp ||\n\t\t\t\tel1S2Opp === el2S2Opp ||\n\t\t\t\t(el1S1Opp + el1OppLength / 2) === (el2S1Opp + el2OppLength / 2)\n\t\t\t);\n\t\t},\n\n\t\t_getParentAutoScrollElement = function(el, includeSelf) {\n\t\t\t// skip to window\n\t\t\tif (!el || !el.getBoundingClientRect) return win;\n\n\t\t\tvar elem = el;\n\t\t\tvar gotSelf = false;\n\t\t\tdo {\n\t\t\t\t// we don't need to get elem css if it isn't even overflowing in the first place (performance)\n\t\t\t\tif (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\n\t\t\t\t\tvar elemCSS = _css(elem);\n\t\t\t\t\tif (\n\t\t\t\t\t\telem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') ||\n\t\t\t\t\t\telem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!elem || !elem.getBoundingClientRect || elem === document.body) return win;\n\n\t\t\t\t\t\tif (gotSelf || includeSelf) return elem;\n\t\t\t\t\t\tgotSelf = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t/* jshint boss:true */\n\t\t\t} while (elem = elem.parentNode);\n\n\t\t\treturn win;\n\t\t},\n\n\t\t_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl, /**Boolean*/isFallback) {\n\t\t\t// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n\t\t\tif (options.scroll) {\n\t\t\t\tvar _this = rootEl ? rootEl[expando] : window,\n\t\t\t\t\tsens = options.scrollSensitivity,\n\t\t\t\t\tspeed = options.scrollSpeed,\n\n\t\t\t\t\tx = evt.clientX,\n\t\t\t\t\ty = evt.clientY,\n\n\t\t\t\t\twinWidth = window.innerWidth,\n\t\t\t\t\twinHeight = window.innerHeight,\n\n\t\t\t\t\tscrollThisInstance = false;\n\n\t\t\t\t// Detect scrollEl\n\t\t\t\tif (scrollParentEl !== rootEl) {\n\t\t\t\t\t_clearAutoScrolls();\n\n\t\t\t\t\tscrollEl = options.scroll;\n\t\t\t\t\tscrollCustomFn = options.scrollFn;\n\n\t\t\t\t\tif (scrollEl === true) {\n\t\t\t\t\t\tscrollEl = _getParentAutoScrollElement(rootEl, true);\n\t\t\t\t\t\tscrollParentEl = scrollEl;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tvar layersOut = 0;\n\t\t\t\tvar currentParent = scrollEl;\n\t\t\t\tdo {\n\t\t\t\t\tvar\tel = currentParent,\n\t\t\t\t\t\trect = _getRect(el),\n\n\t\t\t\t\t\ttop = rect.top,\n\t\t\t\t\t\tbottom = rect.bottom,\n\t\t\t\t\t\tleft = rect.left,\n\t\t\t\t\t\tright = rect.right,\n\n\t\t\t\t\t\twidth = rect.width,\n\t\t\t\t\t\theight = rect.height,\n\n\t\t\t\t\t\tscrollWidth,\n\t\t\t\t\t\tscrollHeight,\n\n\t\t\t\t\t\tcss,\n\n\t\t\t\t\t\tvx,\n\t\t\t\t\t\tvy,\n\n\t\t\t\t\t\tcanScrollX,\n\t\t\t\t\t\tcanScrollY,\n\n\t\t\t\t\t\tscrollPosX,\n\t\t\t\t\t\tscrollPosY;\n\n\n\t\t\t\t\tif (el !== win) {\n\t\t\t\t\t\tscrollWidth = el.scrollWidth;\n\t\t\t\t\t\tscrollHeight = el.scrollHeight;\n\n\t\t\t\t\t\tcss = _css(el);\n\n\t\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll');\n\t\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll');\n\n\t\t\t\t\t\tscrollPosX = el.scrollLeft;\n\t\t\t\t\t\tscrollPosY = el.scrollTop;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscrollWidth = document.documentElement.scrollWidth;\n\t\t\t\t\t\tscrollHeight = document.documentElement.scrollHeight;\n\n\t\t\t\t\t\tcss = _css(document.documentElement);\n\n\t\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll' || css.overflowX === 'visible');\n\t\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll' || css.overflowY === 'visible');\n\n\t\t\t\t\t\tscrollPosX = document.documentElement.scrollLeft;\n\t\t\t\t\t\tscrollPosY = document.documentElement.scrollTop;\n\t\t\t\t\t}\n\n\t\t\t\t\tvx = canScrollX && (abs(right - x) <= sens && (scrollPosX + width) < scrollWidth) - (abs(left - x) <= sens && !!scrollPosX);\n\n\t\t\t\t\tvy = canScrollY && (abs(bottom - y) <= sens && (scrollPosY + height) < scrollHeight) - (abs(top - y) <= sens && !!scrollPosY);\n\n\n\t\t\t\t\tif (!autoScrolls[layersOut]) {\n\t\t\t\t\t\tfor (var i = 0; i <= layersOut; i++) {\n\t\t\t\t\t\t\tif (!autoScrolls[i]) {\n\t\t\t\t\t\t\t\tautoScrolls[i] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\n\t\t\t\t\t\tautoScrolls[layersOut].el = el;\n\t\t\t\t\t\tautoScrolls[layersOut].vx = vx;\n\t\t\t\t\t\tautoScrolls[layersOut].vy = vy;\n\n\t\t\t\t\t\tclearInterval(autoScrolls[layersOut].pid);\n\n\t\t\t\t\t\tif (el && (vx != 0 || vy != 0)) {\n\t\t\t\t\t\t\tscrollThisInstance = true;\n\t\t\t\t\t\t\t/* jshint loopfunc:true */\n\t\t\t\t\t\t\tautoScrolls[layersOut].pid = setInterval((function () {\n\t\t\t\t\t\t\t\t// emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n\t\t\t\t\t\t\t\tif (isFallback && this.layer === 0) {\n\t\t\t\t\t\t\t\t\tSortable.active._emulateDragOver(true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\n\t\t\t\t\t\t\t\tvar scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\n\n\t\t\t\t\t\t\t\tif ('function' === typeof(scrollCustomFn)) {\n\t\t\t\t\t\t\t\t\tif (scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt, touchEvt, autoScrolls[this.layer].el) !== 'continue') {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (autoScrolls[this.layer].el === win) {\n\t\t\t\t\t\t\t\t\twin.scrollTo(win.pageXOffset + scrollOffsetX, win.pageYOffset + scrollOffsetY);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tautoScrolls[this.layer].el.scrollTop += scrollOffsetY;\n\t\t\t\t\t\t\t\t\tautoScrolls[this.layer].el.scrollLeft += scrollOffsetX;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}).bind({layer: layersOut}), 24);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlayersOut++;\n\t\t\t\t} while (options.bubbleScroll && currentParent !== win && (currentParent = _getParentAutoScrollElement(currentParent, false)));\n\t\t\t\tscrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n\t\t\t}\n\t\t}, 30),\n\n\t\t_clearAutoScrolls = function () {\n\t\t\tautoScrolls.forEach(function(autoScroll) {\n\t\t\t\tclearInterval(autoScroll.pid);\n\t\t\t});\n\t\t\tautoScrolls = [];\n\t\t},\n\n\t\t_prepareGroup = function (options) {\n\t\t\tfunction toFn(value, pull) {\n\t\t\t\treturn function(to, from, dragEl, evt) {\n\t\t\t\t\tvar sameGroup = to.options.group.name &&\n\t\t\t\t\t\t\t\t\tfrom.options.group.name &&\n\t\t\t\t\t\t\t\t\tto.options.group.name === from.options.group.name;\n\n\t\t\t\t\tif (value == null && (pull || sameGroup)) {\n\t\t\t\t\t\t// Default pull value\n\t\t\t\t\t\t// Default pull and put value if same group\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (value == null || value === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (pull && value === 'clone') {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else if (typeof value === 'function') {\n\t\t\t\t\t\treturn toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar otherGroup = (pull ? to : from).options.group.name;\n\n\t\t\t\t\t\treturn (value === true ||\n\t\t\t\t\t\t(typeof value === 'string' && value === otherGroup) ||\n\t\t\t\t\t\t(value.join && value.indexOf(otherGroup) > -1));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar group = {};\n\t\t\tvar originalGroup = options.group;\n\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\n\t\t\t\toriginalGroup = {name: originalGroup};\n\t\t\t}\n\n\t\t\tgroup.name = originalGroup.name;\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\n\t\t\tgroup.revertClone = originalGroup.revertClone;\n\n\t\t\toptions.group = group;\n\t\t},\n\n\t\t_checkAlignment = function(evt) {\n\t\t\tif (!dragEl || !dragEl.parentNode) return;\n\t\t\tdragEl.parentNode[expando] && dragEl.parentNode[expando]._computeIsAligned(evt);\n\t\t},\n\n\t\t_isTrueParentSortable = function(el, target) {\n\t\t\tvar trueParent = target;\n\t\t\twhile (!trueParent[expando]) {\n\t\t\t\ttrueParent = trueParent.parentNode;\n\t\t\t}\n\n\t\t\treturn el === trueParent;\n\t\t},\n\n\t\t_artificalBubble = function(sortable, originalEvt, method) {\n\t\t\t// Artificial IE bubbling\n\t\t\tvar nextParent = sortable.parentNode;\n\t\t\twhile (nextParent && !nextParent[expando]) {\n\t\t\t\tnextParent = nextParent.parentNode;\n\t\t\t}\n\n\t\t\tif (nextParent) {\n\t\t\t\tnextParent[expando][method](_extend(originalEvt, {\n\t\t\t\t\tartificialBubble: true\n\t\t\t\t}));\n\t\t\t}\n\t\t},\n\n\t\t_hideGhostForTarget = function() {\n\t\t\tif (!supportCssPointerEvents && ghostEl) {\n\t\t\t\t_css(ghostEl, 'display', 'none');\n\t\t\t}\n\t\t},\n\n\t\t_unhideGhostForTarget = function() {\n\t\t\tif (!supportCssPointerEvents && ghostEl) {\n\t\t\t\t_css(ghostEl, 'display', '');\n\t\t\t}\n\t\t};\n\n\n\t// #1184 fix - Prevent click event on fallback if dragged but item not changed position\n\tdocument.addEventListener('click', function(evt) {\n\t\tif (ignoreNextClick) {\n\t\t\tevt.preventDefault();\n\t\t\tevt.stopPropagation && evt.stopPropagation();\n\t\t\tevt.stopImmediatePropagation && evt.stopImmediatePropagation();\n\t\t\tignoreNextClick = false;\n\t\t\treturn false;\n\t\t}\n\t}, true);\n\n\tvar nearestEmptyInsertDetectEvent = function(evt) {\n\t\tevt = evt.touches ? evt.touches[0] : evt;\n\t\tif (dragEl) {\n\t\t\tvar nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n\t\t\tif (nearest) {\n\t\t\t\tnearest[expando]._onDragOver({\n\t\t\t\t\tclientX: evt.clientX,\n\t\t\t\t\tclientY: evt.clientY,\n\t\t\t\t\ttarget: nearest,\n\t\t\t\t\trootEl: nearest\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\t// We do not want this to be triggered if completed (bubbling canceled), so only define it here\n\t_on(document, 'dragover', nearestEmptyInsertDetectEvent);\n\t_on(document, 'mousemove', nearestEmptyInsertDetectEvent);\n\t_on(document, 'touchmove', nearestEmptyInsertDetectEvent);\n\n\t/**\n\t * @class  Sortable\n\t * @param  {HTMLElement}  el\n\t * @param  {Object}       [options]\n\t */\n\tfunction Sortable(el, options) {\n\t\tif (!(el && el.nodeType && el.nodeType === 1)) {\n\t\t\tthrow 'Sortable: `el` must be HTMLElement, not ' + {}.toString.call(el);\n\t\t}\n\n\t\tthis.el = el; // root element\n\t\tthis.options = options = _extend({}, options);\n\n\n\t\t// Export instance\n\t\tel[expando] = this;\n\n\t\t// Default options\n\t\tvar defaults = {\n\t\t\tgroup: null,\n\t\t\tsort: true,\n\t\t\tdisabled: false,\n\t\t\tstore: null,\n\t\t\thandle: null,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 30,\n\t\t\tscrollSpeed: 10,\n\t\t\tbubbleScroll: true,\n\t\t\tdraggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',\n\t\t\tswapThreshold: 1, // percentage; 0 <= x <= 1\n\t\t\tinvertSwap: false, // invert always\n\t\t\tinvertedSwapThreshold: null, // will be set to same as swapThreshold if default\n\t\t\tremoveCloneOnHide: true,\n\t\t\tdirection: function() {\n\t\t\t\treturn _detectDirection(el, this.options);\n\t\t\t},\n\t\t\tghostClass: 'sortable-ghost',\n\t\t\tchosenClass: 'sortable-chosen',\n\t\t\tdragClass: 'sortable-drag',\n\t\t\tignore: 'a, img',\n\t\t\tfilter: null,\n\t\t\tpreventOnFilter: true,\n\t\t\tanimation: 0,\n\t\t\teasing: null,\n\t\t\tsetData: function (dataTransfer, dragEl) {\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\n\t\t\t},\n\t\t\tdropBubble: false,\n\t\t\tdragoverBubble: false,\n\t\t\tdataIdAttr: 'data-id',\n\t\t\tdelay: 0,\n\t\t\ttouchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,\n\t\t\tforceFallback: false,\n\t\t\tfallbackClass: 'sortable-fallback',\n\t\t\tfallbackOnBody: false,\n\t\t\tfallbackTolerance: 0,\n\t\t\tfallbackOffset: {x: 0, y: 0},\n\t\t\tsupportPointer: Sortable.supportPointer !== false && (\n\t\t\t\t('PointerEvent' in window) ||\n\t\t\t\twindow.navigator && ('msPointerEnabled' in window.navigator) // microsoft\n\t\t\t),\n\t\t\temptyInsertThreshold: 5\n\t\t};\n\n\n\t\t// Set default options\n\t\tfor (var name in defaults) {\n\t\t\t!(name in options) && (options[name] = defaults[name]);\n\t\t}\n\n\t\t_prepareGroup(options);\n\n\t\t// Bind all private methods\n\t\tfor (var fn in this) {\n\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n\t\t\t\tthis[fn] = this[fn].bind(this);\n\t\t\t}\n\t\t}\n\n\t\t// Setup drag mode\n\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n\t\t// Bind events\n\t\tif (options.supportPointer) {\n\t\t\t_on(el, 'pointerdown', this._onTapStart);\n\t\t} else {\n\t\t\t_on(el, 'mousedown', this._onTapStart);\n\t\t\t_on(el, 'touchstart', this._onTapStart);\n\t\t}\n\n\t\tif (this.nativeDraggable) {\n\t\t\t_on(el, 'dragover', this);\n\t\t\t_on(el, 'dragenter', this);\n\t\t}\n\n\t\tsortables.push(this.el);\n\n\t\t// Restore sorting\n\t\toptions.store && options.store.get && this.sort(options.store.get(this) || []);\n\t}\n\n\tSortable.prototype = /** @lends Sortable.prototype */ {\n\t\tconstructor: Sortable,\n\n\t\t_computeIsAligned: function(evt) {\n\t\t\tvar target;\n\n\t\t\tif (ghostEl && !supportCssPointerEvents) {\n\t\t\t\t_hideGhostForTarget();\n\t\t\t\ttarget = document.elementFromPoint(evt.clientX, evt.clientY);\n\t\t\t\t_unhideGhostForTarget();\n\t\t\t} else {\n\t\t\t\ttarget = evt.target;\n\t\t\t}\n\n\t\t\ttarget = _closest(target, this.options.draggable, this.el, false);\n\t\t\tif (_alignedSilent) return;\n\t\t\tif (!dragEl || dragEl.parentNode !== this.el) return;\n\n\t\t\tvar children = this.el.children;\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t// Don't change for target in case it is changed to aligned before onDragOver is fired\n\t\t\t\tif (_closest(children[i], this.options.draggable, this.el, false) && children[i] !== target) {\n\t\t\t\t\tchildren[i].sortableMouseAligned = _isClientInRowColumn(evt.clientX, evt.clientY, children[i], this._getDirection(evt, null), this.options);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Used for nulling last target when not in element, nothing to do with checking if aligned\n\t\t\tif (!_closest(target, this.options.draggable, this.el, true)) {\n\t\t\t\tlastTarget = null;\n\t\t\t}\n\n\t\t\t_alignedSilent = true;\n\t\t\tsetTimeout(function() {\n\t\t\t\t_alignedSilent = false;\n\t\t\t}, 30);\n\n\t\t},\n\n\t\t_getDirection: function(evt, target) {\n\t\t\treturn (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;\n\t\t},\n\n\t\t_onTapStart: function (/** Event|TouchEvent */evt) {\n\t\t\tif (!evt.cancelable) return;\n\t\t\tvar _this = this,\n\t\t\t\tel = this.el,\n\t\t\t\toptions = this.options,\n\t\t\t\tpreventOnFilter = options.preventOnFilter,\n\t\t\t\ttype = evt.type,\n\t\t\t\ttouch = evt.touches && evt.touches[0],\n\t\t\t\ttarget = (touch || evt).target,\n\t\t\t\toriginalTarget = evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0])) || target,\n\t\t\t\tfilter = options.filter,\n\t\t\t\tstartIndex;\n\n\t\t\t_saveInputCheckedState(el);\n\n\n\t\t\t// IE: Calls events in capture mode if event element is nested. This ensures only correct element's _onTapStart goes through.\n\t\t\t// This process is also done in _onDragOver\n\t\t\tif (IE11OrLess && !evt.artificialBubble && !_isTrueParentSortable(el, target)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\t\t\tif (dragEl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\n\t\t\t\treturn; // only left button and enabled\n\t\t\t}\n\n\t\t\t// cancel dnd if original target is content editable\n\t\t\tif (originalTarget.isContentEditable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttarget = _closest(target, options.draggable, el, false);\n\n\t\t\tif (!target) {\n\t\t\t\tif (IE11OrLess) {\n\t\t\t\t\t_artificalBubble(el, evt, '_onTapStart');\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (lastDownEl === target) {\n\t\t\t\t// Ignoring duplicate `down`\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the index of the dragged element within its parent\n\t\t\tstartIndex = _index(target, options.draggable);\n\n\t\t\t// Check filter\n\t\t\tif (typeof filter === 'function') {\n\t\t\t\tif (filter.call(this, evt, target, this)) {\n\t\t\t\t\t_dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex);\n\t\t\t\t\tpreventOnFilter && evt.cancelable && evt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (filter) {\n\t\t\t\tfilter = filter.split(',').some(function (criteria) {\n\t\t\t\t\tcriteria = _closest(originalTarget, criteria.trim(), el, false);\n\n\t\t\t\t\tif (criteria) {\n\t\t\t\t\t\t_dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (filter) {\n\t\t\t\t\tpreventOnFilter && evt.cancelable && evt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.handle && !_closest(originalTarget, options.handle, el, false)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare `dragstart`\n\t\t\tthis._prepareDragStart(evt, touch, target, startIndex);\n\t\t},\n\n\n\t\t_handleAutoScroll: function(evt, fallback) {\n\t\t\tif (!dragEl || !this.options.scroll) return;\n\t\t\tvar x = evt.clientX,\n\t\t\t\ty = evt.clientY,\n\n\t\t\t\telem = document.elementFromPoint(x, y),\n\t\t\t\t_this = this;\n\n\t\t\t// IE does not seem to have native autoscroll,\n\t\t\t// Edge's autoscroll seems too conditional,\n\t\t\t// Firefox and Chrome are good\n\t\t\tif (fallback || Edge || IE11OrLess) {\n\t\t\t\t_autoScroll(evt, _this.options, elem, fallback);\n\n\t\t\t\t// Listener for pointer element change\n\t\t\t\tvar ogElemScroller = _getParentAutoScrollElement(elem, true);\n\t\t\t\tif (\n\t\t\t\t\tscrolling &&\n\t\t\t\t\t(\n\t\t\t\t\t\t!pointerElemChangedInterval ||\n\t\t\t\t\t\tx !== lastPointerElemX ||\n\t\t\t\t\t\ty !== lastPointerElemY\n\t\t\t\t\t)\n\t\t\t\t) {\n\n\t\t\t\t\tpointerElemChangedInterval && clearInterval(pointerElemChangedInterval);\n\t\t\t\t\t// Detect for pointer elem change, emulating native DnD behaviour\n\t\t\t\t\tpointerElemChangedInterval = setInterval(function() {\n\t\t\t\t\t\tif (!dragEl) return;\n\t\t\t\t\t\t// could also check if scroll direction on newElem changes due to parent autoscrolling\n\t\t\t\t\t\tvar newElem = _getParentAutoScrollElement(document.elementFromPoint(x, y), true);\n\t\t\t\t\t\tif (newElem !== ogElemScroller) {\n\t\t\t\t\t\t\togElemScroller = newElem;\n\t\t\t\t\t\t\t_clearAutoScrolls();\n\t\t\t\t\t\t\t_autoScroll(evt, _this.options, ogElemScroller, fallback);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 10);\n\t\t\t\t\tlastPointerElemX = x;\n\t\t\t\t\tlastPointerElemY = y;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n\t\t\t\tif (!_this.options.bubbleScroll || _getParentAutoScrollElement(elem, true) === window) {\n\t\t\t\t\t_clearAutoScrolls();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t_autoScroll(evt, _this.options, _getParentAutoScrollElement(elem, false), false);\n\t\t\t}\n\t\t},\n\n\t\t_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex) {\n\t\t\tvar _this = this,\n\t\t\t\tel = _this.el,\n\t\t\t\toptions = _this.options,\n\t\t\t\townerDocument = el.ownerDocument,\n\t\t\t\tdragStartFn;\n\n\t\t\tif (target && !dragEl && (target.parentNode === el)) {\n\t\t\t\trootEl = el;\n\t\t\t\tdragEl = target;\n\t\t\t\tparentEl = dragEl.parentNode;\n\t\t\t\tnextEl = dragEl.nextSibling;\n\t\t\t\tlastDownEl = target;\n\t\t\t\tactiveGroup = options.group;\n\t\t\t\toldIndex = startIndex;\n\n\t\t\t\ttapEvt = {\n\t\t\t\t\ttarget: dragEl,\n\t\t\t\t\tclientX: (touch || evt).clientX,\n\t\t\t\t\tclientY: (touch || evt).clientY\n\t\t\t\t};\n\n\t\t\t\tthis._lastX = (touch || evt).clientX;\n\t\t\t\tthis._lastY = (touch || evt).clientY;\n\n\t\t\t\tdragEl.style['will-change'] = 'all';\n\t\t\t\t// undo animation if needed\n\t\t\t\tdragEl.style.transition = '';\n\t\t\t\tdragEl.style.transform = '';\n\n\t\t\t\tdragStartFn = function () {\n\t\t\t\t\t// Delayed drag has been triggered\n\t\t\t\t\t// we can re-enable the events: touchmove/mousemove\n\t\t\t\t\t_this._disableDelayedDrag();\n\n\t\t\t\t\t// Make the element draggable\n\t\t\t\t\tdragEl.draggable = _this.nativeDraggable;\n\n\t\t\t\t\t// Bind the events: dragstart/dragend\n\t\t\t\t\t_this._triggerDragStart(evt, touch);\n\n\t\t\t\t\t// Drag start event\n\t\t\t\t\t_dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex);\n\n\t\t\t\t\t// Chosen item\n\t\t\t\t\t_toggleClass(dragEl, options.chosenClass, true);\n\t\t\t\t};\n\n\t\t\t\t// Disable \"draggable\"\n\t\t\t\toptions.ignore.split(',').forEach(function (criteria) {\n\t\t\t\t\t_find(dragEl, criteria.trim(), _disableDraggable);\n\t\t\t\t});\n\n\t\t\t\tif (options.supportPointer) {\n\t\t\t\t\t_on(ownerDocument, 'pointerup', _this._onDrop);\n\t\t\t\t} else {\n\t\t\t\t\t_on(ownerDocument, 'mouseup', _this._onDrop);\n\t\t\t\t\t_on(ownerDocument, 'touchend', _this._onDrop);\n\t\t\t\t\t_on(ownerDocument, 'touchcancel', _this._onDrop);\n\t\t\t\t}\n\n\t\t\t\tif (options.delay) {\n\t\t\t\t\t// If the user moves the pointer or let go the click or touch\n\t\t\t\t\t// before the delay has been reached:\n\t\t\t\t\t// disable the delayed drag\n\t\t\t\t\t_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\n\t\t\t\t\t_on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\n\t\t\t\t\toptions.supportPointer && _on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\n\n\t\t\t\t\t_this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n\t\t\t\t} else {\n\t\t\t\t\tdragStartFn();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_delayedDragTouchMoveHandler: function (/** TouchEvent|PointerEvent **/e) {\n\t\t\tvar touch = e.touches ? e.touches[0] : e;\n\t\t\tif (min(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY))\n\t\t\t\t\t>= this.options.touchStartThreshold\n\t\t\t) {\n\t\t\t\tthis._disableDelayedDrag();\n\t\t\t}\n\t\t},\n\n\t\t_disableDelayedDrag: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\tclearTimeout(this._dragStartTimer);\n\t\t\t_off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchend', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\n\t\t\t_off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);\n\t\t\t_off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);\n\t\t},\n\n\t\t_triggerDragStart: function (/** Event */evt, /** Touch */touch) {\n\t\t\ttouch = touch || (evt.pointerType == 'touch' ? evt : null);\n\n\t\t\tif (!this.nativeDraggable || touch) {\n\t\t\t\tif (this.options.supportPointer) {\n\t\t\t\t\t_on(document, 'pointermove', this._onTouchMove);\n\t\t\t\t} else if (touch) {\n\t\t\t\t\t_on(document, 'touchmove', this._onTouchMove);\n\t\t\t\t} else {\n\t\t\t\t\t_on(document, 'mousemove', this._onTouchMove);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_on(dragEl, 'dragend', this);\n\t\t\t\t_on(rootEl, 'dragstart', this._onDragStart);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (document.selection) {\n\t\t\t\t\t// Timeout neccessary for IE9\n\t\t\t\t\t_nextTick(function () {\n\t\t\t\t\t\tdocument.selection.empty();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t}\n\t\t},\n\n\t\t_dragStarted: function (fallback) {\n\t\t\tawaitingDragStarted = false;\n\t\t\tif (rootEl && dragEl) {\n\t\t\t\tif (this.nativeDraggable) {\n\t\t\t\t\t_on(document, 'dragover', this._handleAutoScroll);\n\t\t\t\t\t_on(document, 'dragover', _checkAlignment);\n\t\t\t\t}\n\t\t\t\tvar options = this.options;\n\n\t\t\t\t// Apply effect\n\t\t\t\t!fallback && _toggleClass(dragEl, options.dragClass, false);\n\t\t\t\t_toggleClass(dragEl, options.ghostClass, true);\n\n\t\t\t\t// In case dragging an animated element\n\t\t\t\t_css(dragEl, 'transform', '');\n\n\t\t\t\tSortable.active = this;\n\n\t\t\t\tfallback && this._appendGhost();\n\n\t\t\t\t// Drag start event\n\t\t\t\t_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex);\n\t\t\t} else {\n\t\t\t\tthis._nulling();\n\t\t\t}\n\t\t},\n\n\t\t_emulateDragOver: function (bypassLastTouchCheck) {\n\t\t\tif (touchEvt) {\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !bypassLastTouchCheck) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._lastX = touchEvt.clientX;\n\t\t\t\tthis._lastY = touchEvt.clientY;\n\n\t\t\t\t_hideGhostForTarget();\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\tvar parent = target;\n\n\t\t\t\twhile (target && target.shadowRoot) {\n\t\t\t\t\ttarget = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\t\tparent = target;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[expando]) {\n\t\t\t\t\t\t\tvar inserted;\n\n\t\t\t\t\t\t\tinserted = parent[expando]._onDragOver({\n\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (inserted && !this.options.dragoverBubble) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\t\t\t\tdragEl.parentNode[expando]._computeIsAligned(touchEvt);\n\n\t\t\t\t_unhideGhostForTarget();\n\t\t\t}\n\t\t},\n\n\n\t\t_onTouchMove: function (/**TouchEvent*/evt) {\n\t\t\tif (tapEvt) {\n\t\t\t\tvar\toptions = this.options,\n\t\t\t\t\tfallbackTolerance = options.fallbackTolerance,\n\t\t\t\t\tfallbackOffset = options.fallbackOffset,\n\t\t\t\t\ttouch = evt.touches ? evt.touches[0] : evt,\n\t\t\t\t\tmatrix = ghostEl && _matrix(ghostEl),\n\t\t\t\t\tscaleX = ghostEl && matrix && matrix.a,\n\t\t\t\t\tscaleY = ghostEl && matrix && matrix.d,\n\t\t\t\t\tdx = ((touch.clientX - tapEvt.clientX) + fallbackOffset.x) / (scaleX ? scaleX : 1),\n\t\t\t\t\tdy = ((touch.clientY - tapEvt.clientY) + fallbackOffset.y) / (scaleY ? scaleY : 1),\n\t\t\t\t\ttranslate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n\n\t\t\t\t// only set the status to dragging, when we are actually dragging\n\t\t\t\tif (!Sortable.active && !awaitingDragStarted) {\n\t\t\t\t\tif (fallbackTolerance &&\n\t\t\t\t\t\tmin(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._onDragStart(evt, true);\n\t\t\t\t}\n\n\t\t\t\tthis._handleAutoScroll(touch, true);\n\n\n\t\t\t\tmoved = true;\n\t\t\t\ttouchEvt = touch;\n\n\n\t\t\t\t_css(ghostEl, 'webkitTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'mozTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'msTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'transform', translate3d);\n\n\t\t\t\tevt.cancelable && evt.preventDefault();\n\t\t\t}\n\t\t},\n\n\t\t_appendGhost: function () {\n\t\t\tif (!ghostEl) {\n\t\t\t\tvar rect = _getRect(dragEl, this.options.fallbackOnBody ? document.body : rootEl, true),\n\t\t\t\t\tcss = _css(dragEl),\n\t\t\t\t\toptions = this.options;\n\n\t\t\t\tghostEl = dragEl.cloneNode(true);\n\n\t\t\t\t_toggleClass(ghostEl, options.ghostClass, false);\n\t\t\t\t_toggleClass(ghostEl, options.fallbackClass, true);\n\t\t\t\t_toggleClass(ghostEl, options.dragClass, true);\n\n\t\t\t\t_css(ghostEl, 'box-sizing', 'border-box');\n\t\t\t\t_css(ghostEl, 'margin', 0);\n\t\t\t\t_css(ghostEl, 'top', rect.top);\n\t\t\t\t_css(ghostEl, 'left', rect.left);\n\t\t\t\t_css(ghostEl, 'width', rect.width);\n\t\t\t\t_css(ghostEl, 'height', rect.height);\n\t\t\t\t_css(ghostEl, 'opacity', '0.8');\n\t\t\t\t_css(ghostEl, 'position', 'fixed');\n\t\t\t\t_css(ghostEl, 'zIndex', '100000');\n\t\t\t\t_css(ghostEl, 'pointerEvents', 'none');\n\n\t\t\t\toptions.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);\n\t\t\t}\n\t\t},\n\n\t\t_onDragStart: function (/**Event*/evt, /**boolean*/fallback) {\n\t\t\tvar _this = this;\n\t\t\tvar dataTransfer = evt.dataTransfer;\n\t\t\tvar options = _this.options;\n\n\t\t\t// Setup clone\n\t\t\tcloneEl = _clone(dragEl);\n\n\t\t\tcloneEl.draggable = false;\n\t\t\tcloneEl.style['will-change'] = '';\n\n\t\t\tthis._hideClone();\n\n\t\t\t_toggleClass(cloneEl, _this.options.chosenClass, false);\n\n\n\t\t\t// #1143: IFrame support workaround\n\t\t\t_this._cloneId = _nextTick(function () {\n\t\t\t\tif (!_this.options.removeCloneOnHide) {\n\t\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t\t}\n\t\t\t\t_dispatchEvent(_this, rootEl, 'clone', dragEl);\n\t\t\t});\n\n\n\t\t\t!fallback && _toggleClass(dragEl, options.dragClass, true);\n\n\t\t\t// Set proper drop events\n\t\t\tif (fallback) {\n\t\t\t\tignoreNextClick = true;\n\t\t\t\t_this._loopId = setInterval(_this._emulateDragOver, 50);\n\t\t\t} else {\n\t\t\t\t// Undo what was set in _prepareDragStart before drag started\n\t\t\t\t_off(document, 'mouseup', _this._onDrop);\n\t\t\t\t_off(document, 'touchend', _this._onDrop);\n\t\t\t\t_off(document, 'touchcancel', _this._onDrop);\n\n\t\t\t\tif (dataTransfer) {\n\t\t\t\t\tdataTransfer.effectAllowed = 'move';\n\t\t\t\t\toptions.setData && options.setData.call(_this, dataTransfer, dragEl);\n\t\t\t\t}\n\n\t\t\t\t_on(document, 'drop', _this);\n\n\t\t\t\t// #1276 fix:\n\t\t\t\t_css(dragEl, 'transform', 'translateZ(0)');\n\t\t\t}\n\n\t\t\tawaitingDragStarted = true;\n\n\t\t\t_this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback));\n\t\t\t_on(document, 'selectstart', _this);\n\t\t},\n\n\t\t// Returns true - if no further action is needed (either inserted or another condition)\n\t\t_onDragOver: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\ttarget = evt.target,\n\t\t\t\tdragRect,\n\t\t\t\ttargetRect,\n\t\t\t\trevert,\n\t\t\t\toptions = this.options,\n\t\t\t\tgroup = options.group,\n\t\t\t\tactiveSortable = Sortable.active,\n\t\t\t\tisOwner = (activeGroup === group),\n\t\t\t\tcanSort = options.sort,\n\t\t\t\t_this = this;\n\n\t\t\tif (_silent) return;\n\n\t\t\t// IE event order fix\n\t\t\tif (IE11OrLess && !evt.rootEl && !evt.artificialBubble && !_isTrueParentSortable(el, target)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return invocation when no further action is needed in another sortable\n\t\t\tfunction completed() {\n\t\t\t\tif (activeSortable) {\n\t\t\t\t\t// Set ghost class to new sortable's ghost class\n\t\t\t\t\t_toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\n\t\t\t\t\t_toggleClass(dragEl, options.ghostClass, true);\n\t\t\t\t}\n\n\t\t\t\tif (putSortable !== _this && _this !== Sortable.active) {\n\t\t\t\t\tputSortable = _this;\n\t\t\t\t} else if (_this === Sortable.active) {\n\t\t\t\t\tputSortable = null;\n\t\t\t\t}\n\n\n\t\t\t\t// Null lastTarget if it is not inside a previously swapped element\n\t\t\t\tif ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {\n\t\t\t\t\tlastTarget = null;\n\t\t\t\t}\n\t\t\t\t// no bubbling and not fallback\n\t\t\t\tif (!options.dragoverBubble && !evt.rootEl && target !== document) {\n\t\t\t\t\t_this._handleAutoScroll(evt);\n\t\t\t\t\tdragEl.parentNode[expando]._computeIsAligned(evt);\n\t\t\t\t}\n\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Call when dragEl has been inserted\n\t\t\tfunction changed() {\n\t\t\t\t_dispatchEvent(_this, rootEl, 'change', target, el, rootEl, oldIndex, _index(dragEl, options.draggable), evt);\n\t\t\t}\n\n\n\t\t\tif (evt.preventDefault !== void 0) {\n\t\t\t\tevt.cancelable && evt.preventDefault();\n\t\t\t}\n\n\n\t\t\tmoved = true;\n\n\t\t\ttarget = _closest(target, options.draggable, el, true);\n\n\t\t\t// target is dragEl or target is animated\n\t\t\tif (!!_closest(evt.target, null, dragEl, true) || target.animated) {\n\t\t\t\treturn completed();\n\t\t\t}\n\n\t\t\tif (target !== dragEl) {\n\t\t\t\tignoreNextClick = false;\n\t\t\t}\n\n\t\t\tif (activeSortable && !options.disabled &&\n\t\t\t\t(isOwner\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n\t\t\t\t\t: (\n\t\t\t\t\t\tputSortable === this ||\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tvar axis = this._getDirection(evt, target);\n\n\t\t\t\tdragRect = _getRect(dragEl);\n\n\t\t\t\tif (revert) {\n\t\t\t\t\tthis._hideClone();\n\t\t\t\t\tparentEl = rootEl; // actualization\n\n\t\t\t\t\tif (nextEl) {\n\t\t\t\t\t\trootEl.insertBefore(dragEl, nextEl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trootEl.appendChild(dragEl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn completed();\n\t\t\t\t}\n\n\t\t\t\tif ((el.children.length === 0) || (el.children[0] === ghostEl) ||\n\t\t\t\t\t_ghostIsLast(evt, axis, el) && !dragEl.animated\n\t\t\t\t) {\n\t\t\t\t\t//assign target only if condition is true\n\t\t\t\t\tif (el.children.length !== 0 && el.children[0] !== ghostEl && el === evt.target) {\n\t\t\t\t\t\ttarget = _lastChild(el);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target) {\n\t\t\t\t\t\ttargetRect = _getRect(target);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\tactiveSortable._hideClone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tactiveSortable._showClone(this);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\n\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\tparentEl = el; // actualization\n\t\t\t\t\t\trealDragElRect = null;\n\n\t\t\t\t\t\tchanged();\n\t\t\t\t\t\tthis._animate(dragRect, dragEl);\n\t\t\t\t\t\ttarget && this._animate(targetRect, target);\n\t\t\t\t\t\treturn completed();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (target && target !== dragEl && target.parentNode === el) {\n\t\t\t\t\tvar direction = 0,\n\t\t\t\t\t\ttargetBeforeFirstSwap,\n\t\t\t\t\t\taligned = target.sortableMouseAligned,\n\t\t\t\t\t\tdifferentLevel = dragEl.parentNode !== el,\n\t\t\t\t\t\tscrolledPastTop = _isScrolledPast(target, axis === 'vertical' ? 'top' : 'left');\n\n\t\t\t\t\tif (lastTarget !== target) {\n\t\t\t\t\t\tlastMode = null;\n\t\t\t\t\t\ttargetBeforeFirstSwap = _getRect(target)[axis === 'vertical' ? 'top' : 'left'];\n\t\t\t\t\t\tpastFirstInvertThresh = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0\n\t\t\t\t\tif (\n\t\t\t\t\t\t_isElInRowColumn(dragEl, target, axis) && aligned ||\n\t\t\t\t\t\tdifferentLevel ||\n\t\t\t\t\t\tscrolledPastTop ||\n\t\t\t\t\t\toptions.invertSwap ||\n\t\t\t\t\t\tlastMode === 'insert' ||\n\t\t\t\t\t\t// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside\n\t\t\t\t\t\t// and lastMode will change to 'insert', but we must swap\n\t\t\t\t\t\tlastMode === 'swap'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// New target that we will be inside\n\t\t\t\t\t\tif (lastMode !== 'swap') {\n\t\t\t\t\t\t\tisCircumstantialInvert = options.invertSwap || differentLevel || scrolling || scrolledPastTop;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdirection = _getSwapDirection(evt, target, axis,\n\t\t\t\t\t\t\toptions.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,\n\t\t\t\t\t\t\tisCircumstantialInvert,\n\t\t\t\t\t\t\tlastTarget === target);\n\t\t\t\t\t\tlastMode = 'swap';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Insert at position\n\t\t\t\t\t\tdirection = _getInsertDirection(target, options);\n\t\t\t\t\t\tlastMode = 'insert';\n\t\t\t\t\t}\n\t\t\t\t\tif (direction === 0) return completed();\n\n\t\t\t\t\trealDragElRect = null;\n\t\t\t\t\tlastTarget = target;\n\n\t\t\t\t\tlastDirection = direction;\n\n\t\t\t\t\ttargetRect = _getRect(target);\n\n\t\t\t\t\tvar nextSibling = target.nextElementSibling,\n\t\t\t\t\t\tafter = false;\n\n\t\t\t\t\tafter = direction === 1;\n\n\t\t\t\t\tvar moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n\t\t\t\t\tif (moveVector !== false) {\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\n\t\t\t\t\t\t\tafter = (moveVector === 1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_silent = true;\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\n\n\t\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\t\tactiveSortable._hideClone();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactiveSortable._showClone(this);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (after && !nextSibling) {\n\t\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tparentEl = dragEl.parentNode; // actualization\n\n\t\t\t\t\t\t// must be done before animation\n\t\t\t\t\t\tif (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n\t\t\t\t\t\t\ttargetMoveDistance = abs(targetBeforeFirstSwap - _getRect(target)[axis === 'vertical' ? 'top' : 'left']);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchanged();\n\t\t\t\t\t\t!differentLevel && this._animate(targetRect, target);\n\t\t\t\t\t\tthis._animate(dragRect, dragEl);\n\n\t\t\t\t\t\treturn completed();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (el.contains(dragEl)) {\n\t\t\t\t\treturn completed();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (IE11OrLess && !evt.rootEl) {\n\t\t\t\t_artificalBubble(el, evt, '_onDragOver');\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_animate: function (prevRect, target) {\n\t\t\tvar ms = this.options.animation;\n\n\t\t\tif (ms) {\n\t\t\t\tvar currentRect = _getRect(target);\n\n\t\t\t\tif (target === dragEl) {\n\t\t\t\t\trealDragElRect = currentRect;\n\t\t\t\t}\n\n\t\t\t\tif (prevRect.nodeType === 1) {\n\t\t\t\t\tprevRect = _getRect(prevRect);\n\t\t\t\t}\n\n\t\t\t\t// Check if actually moving position\n\t\t\t\tif ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)\n\t\t\t\t\t|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)\n\t\t\t\t) {\n\t\t\t\t\tvar matrix = _matrix(this.el),\n\t\t\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\t\t\t_css(target, 'transition', 'none');\n\t\t\t\t\t_css(target, 'transform', 'translate3d('\n\t\t\t\t\t\t+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'\n\t\t\t\t\t\t+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'\n\t\t\t\t\t);\n\n\t\t\t\t\tforRepaintDummy = target.offsetWidth; // repaint\n\t\t\t\t\t_css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n\t\t\t\t\t_css(target, 'transform', 'translate3d(0,0,0)');\n\t\t\t\t}\n\n\t\t\t\t(typeof target.animated === 'number') && clearTimeout(target.animated);\n\t\t\t\ttarget.animated = setTimeout(function () {\n\t\t\t\t\t_css(target, 'transition', '');\n\t\t\t\t\t_css(target, 'transform', '');\n\t\t\t\t\ttarget.animated = false;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t},\n\n\t\t_offUpEvents: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\t_off(document, 'touchmove', this._onTouchMove);\n\t\t\t_off(document, 'pointermove', this._onTouchMove);\n\t\t\t_off(ownerDocument, 'mouseup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchend', this._onDrop);\n\t\t\t_off(ownerDocument, 'pointerup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchcancel', this._onDrop);\n\t\t\t_off(document, 'selectstart', this);\n\t\t},\n\n\t\t_onDrop: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\toptions = this.options;\n\t\t\tawaitingDragStarted = false;\n\t\t\tscrolling = false;\n\t\t\tisCircumstantialInvert = false;\n\t\t\tpastFirstInvertThresh = false;\n\n\t\t\tclearInterval(this._loopId);\n\n\t\t\tclearInterval(pointerElemChangedInterval);\n\t\t\t_clearAutoScrolls();\n\t\t\t_cancelThrottle();\n\n\t\t\tclearTimeout(this._dragStartTimer);\n\n\t\t\t_cancelNextTick(this._cloneId);\n\t\t\t_cancelNextTick(this._dragStartId);\n\n\t\t\t// Unbind events\n\t\t\t_off(document, 'mousemove', this._onTouchMove);\n\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(document, 'drop', this);\n\t\t\t\t_off(el, 'dragstart', this._onDragStart);\n\t\t\t\t_off(document, 'dragover', this._handleAutoScroll);\n\t\t\t\t_off(document, 'dragover', _checkAlignment);\n\t\t\t}\n\n\t\t\tthis._offUpEvents();\n\n\t\t\tif (evt) {\n\t\t\t\tif (moved) {\n\t\t\t\t\tevt.cancelable && evt.preventDefault();\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\n\t\t\t\t}\n\n\t\t\t\tghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n\t\t\t\tif (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {\n\t\t\t\t\t// Remove clone\n\t\t\t\t\tcloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n\t\t\t\t}\n\n\t\t\t\tif (dragEl) {\n\t\t\t\t\tif (this.nativeDraggable) {\n\t\t\t\t\t\t_off(dragEl, 'dragend', this);\n\t\t\t\t\t}\n\n\t\t\t\t\t_disableDraggable(dragEl);\n\t\t\t\t\tdragEl.style['will-change'] = '';\n\n\t\t\t\t\t// Remove class's\n\t\t\t\t\t_toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\n\t\t\t\t\t_toggleClass(dragEl, this.options.chosenClass, false);\n\n\t\t\t\t\t// Drag stop event\n\t\t\t\t\t_dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, evt);\n\n\t\t\t\t\tif (rootEl !== parentEl) {\n\t\t\t\t\t\tnewIndex = _index(dragEl, options.draggable);\n\n\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t// Add event\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\n\t\t\t\t\t\t\t// Remove event\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\n\t\t\t\t\t\t\t// drag from one list and drop into another\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tputSortable && putSortable.save();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\n\t\t\t\t\t\t\tnewIndex = _index(dragEl, options.draggable);\n\n\t\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t\t// drag & drop within the same list\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Sortable.active) {\n\t\t\t\t\t\t/* jshint eqnull:true */\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\n\t\t\t\t\t\t\tnewIndex = oldIndex;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, evt);\n\n\t\t\t\t\t\t// Save sorting\n\t\t\t\t\t\tthis.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tthis._nulling();\n\t\t},\n\n\t\t_nulling: function() {\n\t\t\trootEl =\n\t\t\tdragEl =\n\t\t\tparentEl =\n\t\t\tghostEl =\n\t\t\tnextEl =\n\t\t\tcloneEl =\n\t\t\tlastDownEl =\n\n\t\t\tscrollEl =\n\t\t\tscrollParentEl =\n\t\t\tautoScrolls.length =\n\n\t\t\tpointerElemChangedInterval =\n\t\t\tlastPointerElemX =\n\t\t\tlastPointerElemY =\n\n\t\t\ttapEvt =\n\t\t\ttouchEvt =\n\n\t\t\tmoved =\n\t\t\tnewIndex =\n\t\t\toldIndex =\n\n\t\t\tlastTarget =\n\t\t\tlastDirection =\n\n\t\t\tforRepaintDummy =\n\t\t\trealDragElRect =\n\n\t\t\tputSortable =\n\t\t\tactiveGroup =\n\t\t\tSortable.active = null;\n\n\t\t\tsavedInputChecked.forEach(function (el) {\n\t\t\t\tel.checked = true;\n\t\t\t});\n\n\t\t\tsavedInputChecked.length = 0;\n\t\t},\n\n\t\thandleEvent: function (/**Event*/evt) {\n\t\t\tswitch (evt.type) {\n\t\t\t\tcase 'drop':\n\t\t\t\tcase 'dragend':\n\t\t\t\t\tthis._onDrop(evt);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'dragenter':\n\t\t\t\tcase 'dragover':\n\t\t\t\t\tif (dragEl) {\n\t\t\t\t\t\tthis._onDragOver(evt);\n\t\t\t\t\t\t_globalDragOver(evt);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'selectstart':\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Serializes the item into an array of string.\n\t\t * @returns {String[]}\n\t\t */\n\t\ttoArray: function () {\n\t\t\tvar order = [],\n\t\t\t\tel,\n\t\t\t\tchildren = this.el.children,\n\t\t\t\ti = 0,\n\t\t\t\tn = children.length,\n\t\t\t\toptions = this.options;\n\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tel = children[i];\n\t\t\t\tif (_closest(el, options.draggable, this.el, false)) {\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn order;\n\t\t},\n\n\n\t\t/**\n\t\t * Sorts the elements according to the array.\n\t\t * @param  {String[]}  order  order of the items\n\t\t */\n\t\tsort: function (order) {\n\t\t\tvar items = {}, rootEl = this.el;\n\n\t\t\tthis.toArray().forEach(function (id, i) {\n\t\t\t\tvar el = rootEl.children[i];\n\n\t\t\t\tif (_closest(el, this.options.draggable, rootEl, false)) {\n\t\t\t\t\titems[id] = el;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\torder.forEach(function (id) {\n\t\t\t\tif (items[id]) {\n\t\t\t\t\trootEl.removeChild(items[id]);\n\t\t\t\t\trootEl.appendChild(items[id]);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * Save the current sorting\n\t\t */\n\t\tsave: function () {\n\t\t\tvar store = this.options.store;\n\t\t\tstore && store.set && store.set(this);\n\t\t},\n\n\n\t\t/**\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el\n\t\t * @param   {String}       [selector]  default: `options.draggable`\n\t\t * @returns {HTMLElement|null}\n\t\t */\n\t\tclosest: function (el, selector) {\n\t\t\treturn _closest(el, selector || this.options.draggable, this.el, false);\n\t\t},\n\n\n\t\t/**\n\t\t * Set/get option\n\t\t * @param   {string} name\n\t\t * @param   {*}      [value]\n\t\t * @returns {*}\n\t\t */\n\t\toption: function (name, value) {\n\t\t\tvar options = this.options;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn options[name];\n\t\t\t} else {\n\t\t\t\toptions[name] = value;\n\n\t\t\t\tif (name === 'group') {\n\t\t\t\t\t_prepareGroup(options);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy: function () {\n\t\t\tvar el = this.el;\n\n\t\t\tel[expando] = null;\n\n\t\t\t_off(el, 'mousedown', this._onTapStart);\n\t\t\t_off(el, 'touchstart', this._onTapStart);\n\t\t\t_off(el, 'pointerdown', this._onTapStart);\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(el, 'dragover', this);\n\t\t\t\t_off(el, 'dragenter', this);\n\t\t\t}\n\t\t\t// Remove draggable attributes\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n\t\t\t\tel.removeAttribute('draggable');\n\t\t\t});\n\n\t\t\tthis._onDrop();\n\n\t\t\tsortables.splice(sortables.indexOf(this.el), 1);\n\n\t\t\tthis.el = el = null;\n\t\t},\n\n\t\t_hideClone: function() {\n\t\t\tif (!cloneEl.cloneHidden) {\n\t\t\t\t_css(cloneEl, 'display', 'none');\n\t\t\t\tcloneEl.cloneHidden = true;\n\t\t\t\tif (cloneEl.parentNode && this.options.removeCloneOnHide) {\n\t\t\t\t\tcloneEl.parentNode.removeChild(cloneEl);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_showClone: function(putSortable) {\n\t\t\tif (putSortable.lastPutMode !== 'clone') {\n\t\t\t\tthis._hideClone();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (cloneEl.cloneHidden) {\n\t\t\t\t// show clone at dragEl or original position\n\t\t\t\tif (rootEl.contains(dragEl) && !this.options.group.revertClone) {\n\t\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t\t} else if (nextEl) {\n\t\t\t\t\trootEl.insertBefore(cloneEl, nextEl);\n\t\t\t\t} else {\n\t\t\t\t\trootEl.appendChild(cloneEl);\n\t\t\t\t}\n\n\t\t\t\tif (this.options.group.revertClone) {\n\t\t\t\t\tthis._animate(dragEl, cloneEl);\n\t\t\t\t}\n\t\t\t\t_css(cloneEl, 'display', '');\n\t\t\t\tcloneEl.cloneHidden = false;\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {\n\t\tif (el) {\n\t\t\tctx = ctx || document;\n\n\t\t\tdo {\n\t\t\t\tif (\n\t\t\t\t\tselector != null &&\n\t\t\t\t\t(\n\t\t\t\t\t\tselector[0] === '>' && el.parentNode === ctx && _matches(el, selector.substring(1)) ||\n\t\t\t\t\t\t_matches(el, selector)\n\t\t\t\t\t) ||\n\t\t\t\t\tincludeCTX && el === ctx\n\t\t\t\t) {\n\t\t\t\t\treturn el;\n\t\t\t\t}\n\n\t\t\t\tif (el === ctx) break;\n\t\t\t\t/* jshint boss:true */\n\t\t\t} while (el = _getParentOrHost(el));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\n\tfunction _getParentOrHost(el) {\n\t\treturn (el.host && el !== document && el.host.nodeType)\n\t\t\t? el.host\n\t\t\t: el.parentNode;\n\t}\n\n\n\tfunction _globalDragOver(/**Event*/evt) {\n\t\tif (evt.dataTransfer) {\n\t\t\tevt.dataTransfer.dropEffect = 'move';\n\t\t}\n\t\tevt.cancelable && evt.preventDefault();\n\t}\n\n\n\tfunction _on(el, event, fn) {\n\t\tel.addEventListener(event, fn, captureMode);\n\t}\n\n\n\tfunction _off(el, event, fn) {\n\t\tel.removeEventListener(event, fn, captureMode);\n\t}\n\n\n\tfunction _toggleClass(el, name, state) {\n\t\tif (el && name) {\n\t\t\tif (el.classList) {\n\t\t\t\tel.classList[state ? 'add' : 'remove'](name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n\t\t\t\tel.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction _css(el, prop, val) {\n\t\tvar style = el && el.style;\n\n\t\tif (style) {\n\t\t\tif (val === void 0) {\n\t\t\t\tif (document.defaultView && document.defaultView.getComputedStyle) {\n\t\t\t\t\tval = document.defaultView.getComputedStyle(el, '');\n\t\t\t\t}\n\t\t\t\telse if (el.currentStyle) {\n\t\t\t\t\tval = el.currentStyle;\n\t\t\t\t}\n\n\t\t\t\treturn prop === void 0 ? val : val[prop];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!(prop in style) && prop.indexOf('webkit') === -1) {\n\t\t\t\t\tprop = '-webkit-' + prop;\n\t\t\t\t}\n\n\t\t\t\tstyle[prop] = val + (typeof val === 'string' ? '' : 'px');\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _matrix(el) {\n\t\tvar appliedTransforms = '';\n\t\tdo {\n\t\t\tvar transform = _css(el, 'transform');\n\n\t\t\tif (transform && transform !== 'none') {\n\t\t\t\tappliedTransforms = transform + ' ' + appliedTransforms;\n\t\t\t}\n\t\t\t/* jshint boss:true */\n\t\t} while (el = el.parentNode);\n\n\t\tif (window.DOMMatrix) {\n\t\t\treturn new DOMMatrix(appliedTransforms);\n\t\t} else if (window.WebKitCSSMatrix) {\n\t\t\treturn new WebKitCSSMatrix(appliedTransforms);\n\t\t} else if (window.CSSMatrix) {\n\t\t\treturn new CSSMatrix(appliedTransforms);\n\t\t}\n\t}\n\n\n\tfunction _find(ctx, tagName, iterator) {\n\t\tif (ctx) {\n\t\t\tvar list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\n\n\t\t\tif (iterator) {\n\t\t\t\tfor (; i < n; i++) {\n\t\t\t\t\titerator(list[i], i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\n\n\tfunction _dispatchEvent(sortable, rootEl, name, targetEl, toEl, fromEl, startIndex, newIndex, originalEvt) {\n\t\tsortable = (sortable || rootEl[expando]);\n\t\tvar evt,\n\t\t\toptions = sortable.options,\n\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);\n\t\t// Support for new CustomEvent feature\n\t\tif (window.CustomEvent && !IE11OrLess && !Edge) {\n\t\t\tevt = new CustomEvent(name, {\n\t\t\t\tbubbles: true,\n\t\t\t\tcancelable: true\n\t\t\t});\n\t\t} else {\n\t\t\tevt = document.createEvent('Event');\n\t\t\tevt.initEvent(name, true, true);\n\t\t}\n\n\t\tevt.to = toEl || rootEl;\n\t\tevt.from = fromEl || rootEl;\n\t\tevt.item = targetEl || rootEl;\n\t\tevt.clone = cloneEl;\n\n\t\tevt.oldIndex = startIndex;\n\t\tevt.newIndex = newIndex;\n\n\t\tevt.originalEvent = originalEvt;\n\n\t\tif (rootEl) {\n\t\t\trootEl.dispatchEvent(evt);\n\t        }\n\n\t\tif (options[onName]) {\n\t\t\toptions[onName].call(sortable, evt);\n\t\t}\n\t}\n\n\n\tfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\n\t\tvar evt,\n\t\t\tsortable = fromEl[expando],\n\t\t\tonMoveFn = sortable.options.onMove,\n\t\t\tretVal;\n\t\t// Support for new CustomEvent feature\n\t\tif (window.CustomEvent && !IE11OrLess && !Edge) {\n\t\t\tevt = new CustomEvent('move', {\n\t\t\t\tbubbles: true,\n\t\t\t\tcancelable: true\n\t\t\t});\n\t\t} else {\n\t\t\tevt = document.createEvent('Event');\n\t\t\tevt.initEvent('move', true, true);\n\t\t}\n\n\t\tevt.to = toEl;\n\t\tevt.from = fromEl;\n\t\tevt.dragged = dragEl;\n\t\tevt.draggedRect = dragRect;\n\t\tevt.related = targetEl || toEl;\n\t\tevt.relatedRect = targetRect || _getRect(toEl);\n\t\tevt.willInsertAfter = willInsertAfter;\n\n\t\tevt.originalEvent = originalEvt;\n\n\t\tfromEl.dispatchEvent(evt);\n\n\t\tif (onMoveFn) {\n\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n\tfunction _disableDraggable(el) {\n\t\tel.draggable = false;\n\t}\n\n\tfunction _unsilent() {\n\t\t_silent = false;\n\t}\n\n\t/**\n\t * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\n\t * and non-draggable elements\n\t * @param  {HTMLElement} el       The parent element\n\t * @param  {Number} childNum      The index of the child\n\t * @param  {Object} options       Parent Sortable's options\n\t * @return {HTMLElement}          The child at index childNum, or null if not found\n\t */\n\tfunction _getChild(el, childNum, options) {\n\t\tvar currentChild = 0,\n\t\t\ti = 0,\n\t\t\tchildren = el.children;\n\n\t\twhile (i < children.length) {\n\t\t\tif (\n\t\t\t\tchildren[i].style.display !== 'none' &&\n\t\t\t\tchildren[i] !== ghostEl &&\n\t\t\t\tchildren[i] !== dragEl &&\n\t\t\t\t_closest(children[i], options.draggable, el, false)\n\t\t\t) {\n\t\t\t\tif (currentChild === childNum) {\n\t\t\t\t\treturn children[i];\n\t\t\t\t}\n\t\t\t\tcurrentChild++;\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\n\t * @param  {HTMLElement} el       Parent element\n\t * @return {HTMLElement}          The last child, ignoring ghostEl\n\t */\n\tfunction _lastChild(el) {\n\t\tvar last = el.lastElementChild;\n\n\t\twhile (last === ghostEl || last.style.display === 'none') {\n\t\t\tlast = last.previousElementSibling;\n\n\t\t\tif (!last) break;\n\t\t}\n\n\t\treturn last || null;\n\t}\n\n\tfunction _ghostIsLast(evt, axis, el) {\n\t\tvar elRect = _getRect(_lastChild(el)),\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? evt.clientX : evt.clientY,\n\t\t\ttargetS2 = axis === 'vertical' ? elRect.bottom : elRect.right,\n\t\t\ttargetS1Opp = axis === 'vertical' ? elRect.left : elRect.top,\n\t\t\ttargetS2Opp = axis === 'vertical' ? elRect.right : elRect.bottom,\n\t\t\tspacer = 10;\n\n\t\treturn (\n\t\t\taxis === 'vertical' ?\n\t\t\t\t(mouseOnOppAxis > targetS2Opp + spacer || mouseOnOppAxis <= targetS2Opp && mouseOnAxis > targetS2 && mouseOnOppAxis >= targetS1Opp) :\n\t\t\t\t(mouseOnAxis > targetS2 && mouseOnOppAxis > targetS1Opp || mouseOnAxis <= targetS2 && mouseOnOppAxis > targetS2Opp + spacer)\n\t\t);\n\t}\n\n\tfunction _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\n\t\tvar targetRect = _getRect(target),\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\n\t\t\ttargetLength = axis === 'vertical' ? targetRect.height : targetRect.width,\n\t\t\ttargetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,\n\t\t\ttargetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,\n\t\t\tdragRect = _getRect(dragEl),\n\t\t\tinvert = false;\n\n\n\t\tif (!invertSwap) {\n\t\t\t// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n\t\t\tif (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n\t\t\t\t// check if past first invert threshold on side opposite of lastDirection\n\t\t\t\tif (!pastFirstInvertThresh &&\n\t\t\t\t\t(lastDirection === 1 ?\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2\n\t\t\t\t\t\t) :\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t// past first invert threshold, do not restrict inverted threshold to dragEl shadow\n\t\t\t\t\tpastFirstInvertThresh = true;\n\t\t\t\t}\n\n\t\t\t\tif (!pastFirstInvertThresh) {\n\t\t\t\t\tvar dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,\n\t\t\t\t\t\tdragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;\n\t\t\t\t\t// dragEl shadow (target move distance shadow)\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastDirection === 1 ?\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n\t\t\t\t\t\t) :\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis > targetS2 - targetMoveDistance\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn lastDirection * -1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tinvert = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Regular\n\t\t\t\tif (\n\t\t\t\t\tmouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&\n\t\t\t\t\tmouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)\n\t\t\t\t) {\n\t\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? -1 : 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinvert = invert || invertSwap;\n\n\t\tif (invert) {\n\t\t\t// Invert of regular\n\t\t\tif (\n\t\t\t\tmouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||\n\t\t\t\tmouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)\n\t\t\t)\n\t\t\t{\n\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Gets the direction dragEl must be swapped relative to target in order to make it\n\t * seem that dragEl has been \"inserted\" into that element's position\n\t * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n\t * @param  {Object} options           options of the parent sortable\n\t * @return {Number}                   Direction dragEl must be swapped\n\t */\n\tfunction _getInsertDirection(target, options) {\n\t\tvar dragElIndex = _index(dragEl, options.draggable),\n\t\t\ttargetIndex = _index(target, options.draggable);\n\n\t\tif (dragElIndex < targetIndex) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t * Generate id\n\t * @param   {HTMLElement} el\n\t * @returns {String}\n\t * @private\n\t */\n\tfunction _generateId(el) {\n\t\tvar str = el.tagName + el.className + el.src + el.href + el.textContent,\n\t\t\ti = str.length,\n\t\t\tsum = 0;\n\n\t\twhile (i--) {\n\t\t\tsum += str.charCodeAt(i);\n\t\t}\n\n\t\treturn sum.toString(36);\n\t}\n\n\t/**\n\t * Returns the index of an element within its parent for a selected set of\n\t * elements\n\t * @param  {HTMLElement} el\n\t * @param  {selector} selector\n\t * @return {number}\n\t */\n\tfunction _index(el, selector) {\n\t\tvar index = 0;\n\n\t\tif (!el || !el.parentNode) {\n\t\t\treturn -1;\n\t\t}\n\n\t\twhile (el && (el = el.previousElementSibling)) {\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== cloneEl) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tfunction _matches(/**HTMLElement*/el, /**String*/selector) {\n\t\tif (el) {\n\t\t\ttry {\n\t\t\t\tif (el.matches) {\n\t\t\t\t\treturn el.matches(selector);\n\t\t\t\t} else if (el.msMatchesSelector) {\n\t\t\t\t\treturn el.msMatchesSelector(selector);\n\t\t\t\t} else if (el.webkitMatchesSelector) {\n\t\t\t\t\treturn el.webkitMatchesSelector(selector);\n\t\t\t\t}\n\t\t\t} catch(_) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tvar _throttleTimeout;\n\tfunction _throttle(callback, ms) {\n\t\treturn function () {\n\t\t\tif (!_throttleTimeout) {\n\t\t\t\tvar args = arguments,\n\t\t\t\t\t_this = this;\n\n\t\t\t\t_throttleTimeout = setTimeout(function () {\n\t\t\t\t\tif (args.length === 1) {\n\t\t\t\t\t\tcallback.call(_this, args[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback.apply(_this, args);\n\t\t\t\t\t}\n\n\t\t\t\t\t_throttleTimeout = void 0;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction _cancelThrottle() {\n\t\tclearTimeout(_throttleTimeout);\n\t\t_throttleTimeout = void 0;\n\t}\n\n\tfunction _extend(dst, src) {\n\t\tif (dst && src) {\n\t\t\tfor (var key in src) {\n\t\t\t\tif (src.hasOwnProperty(key)) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\n\tfunction _clone(el) {\n\t\tif (Polymer && Polymer.dom) {\n\t\t\treturn Polymer.dom(el).cloneNode(true);\n\t\t}\n\t\telse if ($) {\n\t\t\treturn $(el).clone(true)[0];\n\t\t}\n\t\telse {\n\t\t\treturn el.cloneNode(true);\n\t\t}\n\t}\n\n\tfunction _saveInputCheckedState(root) {\n\t\tsavedInputChecked.length = 0;\n\n\t\tvar inputs = root.getElementsByTagName('input');\n\t\tvar idx = inputs.length;\n\n\t\twhile (idx--) {\n\t\t\tvar el = inputs[idx];\n\t\t\tel.checked && savedInputChecked.push(el);\n\t\t}\n\t}\n\n\tfunction _nextTick(fn) {\n\t\treturn setTimeout(fn, 0);\n\t}\n\n\tfunction _cancelNextTick(id) {\n\t\treturn clearTimeout(id);\n\t}\n\n\n\t/**\n\t * Returns the \"bounding client rect\" of given element\n\t * @param  {HTMLElement} el                The element whose boundingClientRect is wanted\n\t * @param  {[HTMLElement]} container       the parent the element will be placed in\n\t * @param  {[Boolean]} adjustForTransform  Whether the rect should compensate for parent's transform\n\t * (used for fixed positioning on el)\n\t * @return {Object}                        The boundingClientRect of el\n\t */\n\tfunction _getRect(el, container, adjustForTransform) {\n\t\tif (!el.getBoundingClientRect && el !== win) return;\n\n\t\tvar elRect,\n\t\t\ttop,\n\t\t\tleft,\n\t\t\tbottom,\n\t\t\tright,\n\t\t\theight,\n\t\t\twidth;\n\n\t\tif (el !== win) {\n\t\t\telRect = el.getBoundingClientRect();\n\t\t\ttop = elRect.top;\n\t\t\tleft = elRect.left;\n\t\t\tbottom = elRect.bottom;\n\t\t\tright = elRect.right;\n\t\t\theight = elRect.height;\n\t\t\twidth = elRect.width;\n\t\t} else {\n\t\t\ttop = 0;\n\t\t\tleft = 0;\n\t\t\tbottom = window.innerHeight;\n\t\t\tright = window.innerWidth;\n\t\t\theight = window.innerHeight;\n\t\t\twidth = window.innerWidth;\n\t\t}\n\n\t\tif (adjustForTransform && el !== win) {\n\t\t\t// Adjust for translate()\n\t\t\tcontainer = container || el.parentNode;\n\n\t\t\t// solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n\t\t\t// Not needed on <= IE11\n\t\t\tif (!IE11OrLess) {\n\t\t\t\tdo {\n\t\t\t\t\tif (container && container.getBoundingClientRect && _css(container, 'transform') !== 'none') {\n\t\t\t\t\t\tvar containerRect = container.getBoundingClientRect();\n\n\t\t\t\t\t\t// Set relative to edges of padding box of container\n\t\t\t\t\t\ttop -= containerRect.top + parseInt(_css(container, 'border-top-width'));\n\t\t\t\t\t\tleft -= containerRect.left + parseInt(_css(container, 'border-left-width'));\n\t\t\t\t\t\tbottom = top + elRect.height;\n\t\t\t\t\t\tright = left + elRect.width;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t} while (container = container.parentNode);\n\t\t\t}\n\n\t\t\t// Adjust for scale()\n\t\t\tvar matrix = _matrix(el),\n\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\tif (matrix) {\n\t\t\t\ttop /= scaleY;\n\t\t\t\tleft /= scaleX;\n\n\t\t\t\twidth /= scaleX;\n\t\t\t\theight /= scaleY;\n\n\t\t\t\tbottom = top + height;\n\t\t\t\tright = left + width;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttop: top,\n\t\t\tleft: left,\n\t\t\tbottom: bottom,\n\t\t\tright: right,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t}\n\n\n\t/**\n\t * Checks if a side of an element is scrolled past a side of it's parents\n\t * @param  {HTMLElement}  el       The element who's side being scrolled out of view is in question\n\t * @param  {String}       side     Side of the element in question ('top', 'left', 'right', 'bottom')\n\t * @return {Boolean}               Whether the element is overflowing the viewport on the given side of it's parent\n\t */\n\tfunction _isScrolledPast(el, side) {\n\t\tvar parent = _getParentAutoScrollElement(parent, true),\n\t\t\telSide = _getRect(el)[side];\n\n\t\t/* jshint boss:true */\n\t\twhile (parent) {\n\t\t\tvar parentSide = _getRect(parent)[side],\n\t\t\t\tvisible;\n\n\t\t\tif (side === 'top' || side === 'left') {\n\t\t\t\tvisible = elSide >= parentSide;\n\t\t\t} else {\n\t\t\t\tvisible = elSide <= parentSide;\n\t\t\t}\n\n\t\t\tif (!visible) return true;\n\n\t\t\tif (parent === win) break;\n\n\t\t\tparent = _getParentAutoScrollElement(parent, false);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// Fixed #973:\n\t_on(document, 'touchmove', function(evt) {\n\t\tif ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t});\n\n\n\t// Export utils\n\tSortable.utils = {\n\t\ton: _on,\n\t\toff: _off,\n\t\tcss: _css,\n\t\tfind: _find,\n\t\tis: function (el, selector) {\n\t\t\treturn !!_closest(el, selector, el, false);\n\t\t},\n\t\textend: _extend,\n\t\tthrottle: _throttle,\n\t\tclosest: _closest,\n\t\ttoggleClass: _toggleClass,\n\t\tclone: _clone,\n\t\tindex: _index,\n\t\tnextTick: _nextTick,\n\t\tcancelNextTick: _cancelNextTick,\n\t\tdetectDirection: _detectDirection,\n\t\tgetChild: _getChild\n\t};\n\n\n\t/**\n\t * Create sortable instance\n\t * @param {HTMLElement}  el\n\t * @param {Object}      [options]\n\t */\n\tSortable.create = function (el, options) {\n\t\treturn new Sortable(el, options);\n\t};\n\n\n\t// Export\n\tSortable.version = '1.8.3';\n\treturn Sortable;\n});\n","'use strict';\n\nvar number = require('../../utils/number');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a range. A range has a start, step, and end, and contains functions\n   * to iterate over the range.\n   *\n   * A range can be constructed as:\n   *\n   *     const range = new Range(start, end)\n   *     const range = new Range(start, end, step)\n   *\n   * To get the result of the range:\n   *     range.forEach(function (x) {\n   *         console.log(x)\n   *     })\n   *     range.map(function (x) {\n   *         return math.sin(x)\n   *     })\n   *     range.toArray()\n   *\n   * Example usage:\n   *\n   *     const c = new Range(2, 6)       // 2:1:5\n   *     c.toArray()                     // [2, 3, 4, 5]\n   *     const d = new Range(2, -3, -1)  // 2:-1:-2\n   *     d.toArray()                     // [2, 1, 0, -1, -2]\n   *\n   * @class Range\n   * @constructor Range\n   * @param {number} start  included lower bound\n   * @param {number} end    excluded upper bound\n   * @param {number} [step] step size, default value is 1\n   */\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    var hasStart = start !== null && start !== undefined;\n    var hasEnd = end !== null && end !== undefined;\n    var hasStep = step !== null && step !== undefined;\n\n    if (hasStart) {\n      if (type.isBigNumber(start)) {\n        start = start.toNumber();\n      } else if (typeof start !== 'number') {\n        throw new TypeError('Parameter start must be a number');\n      }\n    }\n\n    if (hasEnd) {\n      if (type.isBigNumber(end)) {\n        end = end.toNumber();\n      } else if (typeof end !== 'number') {\n        throw new TypeError('Parameter end must be a number');\n      }\n    }\n\n    if (hasStep) {\n      if (type.isBigNumber(step)) {\n        step = step.toNumber();\n      } else if (typeof step !== 'number') {\n        throw new TypeError('Parameter step must be a number');\n      }\n    }\n\n    this.start = hasStart ? parseFloat(start) : 0;\n    this.end = hasEnd ? parseFloat(end) : 0;\n    this.step = hasStep ? parseFloat(step) : 1;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Range.prototype.type = 'Range';\n  Range.prototype.isRange = true;\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @memberof Range\n   * @param {string} str\n   * @return {Range | null} range\n   */\n\n  Range.parse = function (str) {\n    if (typeof str !== 'string') {\n      return null;\n    }\n\n    var args = str.split(':');\n    var nums = args.map(function (arg) {\n      return parseFloat(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return new Range(nums[0], nums[1]);\n\n      case 3:\n        return new Range(nums[0], nums[2], nums[1]);\n\n      default:\n        return null;\n    }\n  };\n  /**\n   * Create a clone of the range\n   * @return {Range} clone\n   */\n\n\n  Range.prototype.clone = function () {\n    return new Range(this.start, this.end, this.step);\n  };\n  /**\n   * Retrieve the size of the range.\n   * Returns an array containing one number, the number of elements in the range.\n   * @memberof Range\n   * @returns {number[]} size\n   */\n\n\n  Range.prototype.size = function () {\n    var len = 0;\n    var start = this.start;\n    var step = this.step;\n    var end = this.end;\n    var diff = end - start;\n\n    if (number.sign(step) === number.sign(diff)) {\n      len = Math.ceil(diff / step);\n    } else if (diff === 0) {\n      len = 0;\n    }\n\n    if (isNaN(len)) {\n      len = 0;\n    }\n\n    return [len];\n  };\n  /**\n   * Calculate the minimum value in the range\n   * @memberof Range\n   * @return {number | undefined} min\n   */\n\n\n  Range.prototype.min = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start;\n      } else {\n        // negative step\n        return this.start + (size - 1) * this.step;\n      }\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * Calculate the maximum value in the range\n   * @memberof Range\n   * @return {number | undefined} max\n   */\n\n\n  Range.prototype.max = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start + (size - 1) * this.step;\n      } else {\n        // negative step\n        return this.start;\n      }\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * Execute a callback function for each value in the range.\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Range being traversed.\n   */\n\n\n  Range.prototype.forEach = function (callback) {\n    var x = this.start;\n    var step = this.step;\n    var end = this.end;\n    var i = 0;\n\n    if (step > 0) {\n      while (x < end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    } else if (step < 0) {\n      while (x > end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n  };\n  /**\n   * Execute a callback function for each value in the Range, and return the\n   * results as an array\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @returns {Array} array\n   */\n\n\n  Range.prototype.map = function (callback) {\n    var array = [];\n    this.forEach(function (value, index, obj) {\n      array[index[0]] = callback(value, index, obj);\n    });\n    return array;\n  };\n  /**\n   * Create an Array with a copy of the Ranges data\n   * @memberof Range\n   * @returns {Array} array\n   */\n\n\n  Range.prototype.toArray = function () {\n    var array = [];\n    this.forEach(function (value, index) {\n      array[index[0]] = value;\n    });\n    return array;\n  };\n  /**\n   * Get the primitive value of the Range, a one dimensional array\n   * @memberof Range\n   * @returns {Array} array\n   */\n\n\n  Range.prototype.valueOf = function () {\n    // TODO: implement a caching mechanism for range.valueOf()\n    return this.toArray();\n  };\n  /**\n   * Get a string representation of the range, with optional formatting options.\n   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\n   * @memberof Range\n   * @param {Object | number | function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  Range.prototype.format = function (options) {\n    var str = number.format(this.start, options);\n\n    if (this.step !== 1) {\n      str += ':' + number.format(this.step, options);\n    }\n\n    str += ':' + number.format(this.end, options);\n    return str;\n  };\n  /**\n   * Get a string representation of the range.\n   * @memberof Range\n   * @returns {string}\n   */\n\n\n  Range.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the range\n   * @memberof Range\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   */\n\n\n  Range.prototype.toJSON = function () {\n    return {\n      mathjs: 'Range',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n  /**\n   * Instantiate a Range from a JSON object\n   * @memberof Range\n   * @param {Object} json A JSON object structured as:\n   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   * @return {Range}\n   */\n\n\n  Range.fromJSON = function (json) {\n    return new Range(json.start, json.end, json.step);\n  };\n\n  return Range;\n}\n\nexports.name = 'Range';\nexports.path = 'type';\nexports.factory = factory;","module.exports = __WEBPACK_EXTERNAL_MODULE_VBo9__;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var numeric = load(require('../../type/numeric'));\n  var getTypeOf = load(require('../../function/utils/typeof'));\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n   * @private\n   */\n\n  var divideScalar = typed('divide', {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, getTypeOf(y));\n      res.value = divideScalar(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, getTypeOf(x));\n      res.value = divideScalar(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n  return divideScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar clone = require('../../utils/object').clone;\n\nvar validateIndex = require('../../utils/array').validateIndex;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index                     An index containing ranges for each\n   *                                          dimension\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n\n  var subset = typed('subset', {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n  subset.toTex = undefined; // use default template\n\n  return subset;\n  /**\n   * Retrieve a subset of a string\n   * @param {string} str            string from which to get a substring\n   * @param {Index} index           An index containing ranges for each dimension\n   * @returns {string} substring\n   * @private\n   */\n\n  function _getSubstring(str, index) {\n    if (!type.isIndex(index)) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n\n    if (index.size().length !== 1) {\n      throw new DimensionError(index.size().length, 1);\n    } // validate whether the range is out of range\n\n\n    var strLen = str.length;\n    validateIndex(index.min()[0], strLen);\n    validateIndex(index.max()[0], strLen);\n    var range = index.dimension(0);\n    var substr = '';\n    range.forEach(function (v) {\n      substr += str.charAt(v);\n    });\n    return substr;\n  }\n  /**\n   * Replace a substring in a string\n   * @param {string} str            string to be replaced\n   * @param {Index} index           An index containing ranges for each dimension\n   * @param {string} replacement    Replacement string\n   * @param {string} [defaultValue] Default value to be uses when resizing\n   *                                the string. is ' ' by default\n   * @returns {string} result\n   * @private\n   */\n\n\n  function _setSubstring(str, index, replacement, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n\n    if (index.size().length !== 1) {\n      throw new DimensionError(index.size().length, 1);\n    }\n\n    if (defaultValue !== undefined) {\n      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultValue = ' ';\n    }\n\n    var range = index.dimension(0);\n    var len = range.size()[0];\n\n    if (len !== replacement.length) {\n      throw new DimensionError(range.size()[0], replacement.length);\n    } // validate whether the range is out of range\n\n\n    var strLen = str.length;\n    validateIndex(index.min()[0]);\n    validateIndex(index.max()[0]); // copy the string into an array with characters\n\n    var chars = [];\n\n    for (var i = 0; i < strLen; i++) {\n      chars[i] = str.charAt(i);\n    }\n\n    range.forEach(function (v, i) {\n      chars[v] = replacement.charAt(i[0]);\n    }); // initialize undefined characters with a space\n\n    if (chars.length > strLen) {\n      for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n        if (!chars[_i]) {\n          chars[_i] = defaultValue;\n        }\n      }\n    }\n\n    return chars.join('');\n  }\n}\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\n\n\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return getSafeProperty(object, key);\n}\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\n\n\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  } // clone the object, and apply the property to the clone\n\n\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}\n\nexports.name = 'subset';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var parse = load(require('../parse'));\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.eval(expr)\n   *     math.eval(expr, scope)\n   *     math.eval([expr1, expr2, expr3, ...])\n   *     math.eval([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.eval('(2+3)/4')                // 1.25\n   *     math.eval('sqrt(3^2 + 4^2)')        // 5\n   *     math.eval('sqrt(-4)')               // 2i\n   *     math.eval(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.eval('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n\n  return typed('compile', {\n    'string': function string(expr) {\n      var scope = {};\n      return parse(expr).compile().eval(scope);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return parse(expr).compile().eval(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = {};\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    }\n  });\n}\n\nexports.name = 'eval';\nexports.factory = factory;","'use strict';\n/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\n\nfunction DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\n\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;\nmodule.exports = DimensionError;","'use strict';\n\nvar IndexError = require('../../error/IndexError');\n/**\n * Transform zero-based indices to one-based indices in errors\n * @param {Error} err\n * @returns {Error} Returns the transformed error\n */\n\n\nexports.transform = function (err) {\n  if (err && err.isIndexError) {\n    return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);\n  }\n\n  return err;\n};","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm07 = function algorithm07(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n\n    var i, j; // result arrays\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // matrix\n\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = [];\n    var xb = []; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop values in column j\n\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n\n  return algorithm07;\n}\n\nexports.name = 'algorithm07';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n   * @private\n   */\n  var add = typed('add', {\n    'number, number': function numberNumber(x, y) {\n      return x + y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = add(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n  return add;\n}\n\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar errorTransform = require('../../transform/error.transform').transform;\n\nvar setSafeProperty = require('../../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        return matrix(object).subset(index, value).valueOf();\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}\n\nexports.factory = factory;","module.exports = __WEBPACK_EXTERNAL_MODULE_YeEv__;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar latex = require('../../utils/latex');\n\nvar escape = require('../../utils/string').escape;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nvar map = require('../../utils/array').map;\n\nvar validateSafeMethod = require('../../utils/customs').validateSafeMethod;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed, math) {\n  var Node = load(require('./Node'));\n  var SymbolNode = load(require('./SymbolNode'));\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    } // validate input\n\n\n    if (!type.isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n    if (!Array.isArray(args) || !args.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.fn = fn;\n    this.args = args || []; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    }); // TODO: deprecated since v3, remove some day\n\n    var deprecated = function deprecated() {\n      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');\n    };\n\n    Object.defineProperty(this, 'object', {\n      get: deprecated,\n      set: deprecated\n    });\n  }\n\n  FunctionNode.prototype = new Node();\n  FunctionNode.prototype.type = 'FunctionNode';\n  FunctionNode.prototype.isFunctionNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionNode.prototype._compile = function (math, argNames) {\n    if (!(this instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode');\n    } // compile arguments\n\n\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (type.isSymbolNode(this.fn)) {\n      // we can statically determine whether the function has an rawArgs property\n      var name = this.fn.name;\n      var fn = name in math ? getSafeProperty(math, name) : undefined;\n      var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        // \"raw\" evaluation\n        var rawArgs = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          return (name in scope ? getSafeProperty(scope, name) : fn)(rawArgs, math, _extends({}, scope, args));\n        };\n      } else {\n        // \"regular\" evaluation\n        if (evalArgs.length === 1) {\n          var evalArg0 = evalArgs[0];\n          return function evalFunctionNode(scope, args, context) {\n            return (name in scope ? getSafeProperty(scope, name) : fn)(evalArg0(scope, args, context));\n          };\n        } else if (evalArgs.length === 2) {\n          var _evalArg = evalArgs[0];\n          var evalArg1 = evalArgs[1];\n          return function evalFunctionNode(scope, args, context) {\n            return (name in scope ? getSafeProperty(scope, name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));\n          };\n        } else {\n          return function evalFunctionNode(scope, args, context) {\n            return (name in scope ? getSafeProperty(scope, name) : fn).apply(null, map(evalArgs, function (evalArg) {\n              return evalArg(scope, args, context);\n            }));\n          };\n        }\n      }\n    } else if (type.isAccessorNode(this.fn) && type.isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      var evalObject = this.fn.object._compile(math, argNames);\n\n      var prop = this.fn.index.getObjectProperty();\n      var _rawArgs = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        validateSafeMethod(object, prop);\n        var isRaw = object[prop] && object[prop].rawArgs;\n        return isRaw ? object[prop](_rawArgs, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : object[prop].apply(object, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    } else {\n      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      var evalFn = this.fn._compile(math, argNames);\n\n      var _rawArgs2 = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var fn = evalFn(scope, args, context);\n        var isRaw = fn && fn.rawArgs;\n        return isRaw ? fn(_rawArgs2, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : fn.apply(fn, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionNode.prototype.forEach = function (callback) {\n    callback(this.fn, 'fn', this);\n\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new FunctionNode(fn, args);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n\n\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  }; // backup Node's toString function\n  // @private\n\n\n  var nodeToString = FunctionNode.prototype.toString;\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, name)) {\n      // callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    } // fall back to Node's toString\n\n\n    return nodeToString.call(this, options);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n    var fn = type.isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n    return fn + '(' + args.join(', ') + ')';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'FunctionNode',\n      fn: this.fn,\n      args: this.args\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionNode}\n   */\n\n\n  FunctionNode.fromJSON = function (json) {\n    return new FunctionNode(json.fn, json.args);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    }); // format the arguments like \"add(2, 4.2)\"\n\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = new RegExp('\\\\$(?:\\\\{([a-z_][a-z_0-9]*)(?:\\\\[([0-9]+)\\\\])?\\\\}|\\\\$)', 'ig');\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (_typeof(property)) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (type.isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (type.isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (type.isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  } // backup Node's toTex function\n  // @private\n\n\n  var nodeToTex = FunctionNode.prototype.toTex;\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, this.name)) {\n      // callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    } // fall back to Node's toTex\n\n\n    return nodeToTex.call(this, options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) {\n      // get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n    var latexConverter;\n\n    if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {\n      // .toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n\n    var customToTex;\n\n    switch (_typeof(latexConverter)) {\n      case 'function':\n        // a callback function\n        customToTex = latexConverter(this, options);\n        break;\n\n      case 'string':\n        // a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n\n      case 'object':\n        // an object with different \"converters\" for different numbers of arguments\n        switch (_typeof(latexConverter[args.length])) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n\n    }\n\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n\n    return expandTemplate(latex.defaultTemplate, this, options);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n\n  return FunctionNode;\n}\n\nexports.name = 'FunctionNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.factory = factory;","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n\n  var sum = typed('sum', {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  sum.toTex = undefined; // use default template\n\n  return sum;\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    if (sum === undefined) {\n      switch (config.number) {\n        case 'number':\n          return 0;\n\n        case 'BigNumber':\n          return new type.BigNumber(0);\n\n        case 'Fraction':\n          return new type.Fraction(0);\n\n        default:\n          return 0;\n      }\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var _sum2 = reduce(array, dim, add);\n\n      return _sum2;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n}\n\nexports.name = 'sum';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isBigNumber = require('./bignumber/isBigNumber');\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\n\n\nexports.clone = function clone(x) {\n  var type = _typeof(x); // immutable primitive types\n\n\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  } // use clone function of the object when available\n\n\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  } // array\n\n\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp\n  // object\n\n  return exports.map(x, clone);\n};\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\n\n\nexports.map = function (object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (exports.hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n};\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\n\n\nexports.extend = function (a, b) {\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n\n  return a;\n};\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\n\n\nexports.deepExtend = function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n\n        if (a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n\n  return a;\n};\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\n\n\nexports.deepEqual = function deepEqual(a, b) {\n  var prop, i, len;\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!exports.deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n};\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\n\n\nexports.canDefineProperty = function () {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {}\n      });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n};\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n * On older browsers (<IE8), the function will fall back to direct evaluation\n * of the properties value.\n * @param {Object} object   Object where to add the property\n * @param {string} prop     Property name\n * @param {Function} fn     Function returning the property value. Called\n *                          without arguments.\n */\n\n\nexports.lazy = function (object, prop, fn) {\n  if (exports.canDefineProperty()) {\n    var _uninitialized = true;\n\n    var _value;\n\n    Object.defineProperty(object, prop, {\n      get: function get() {\n        if (_uninitialized) {\n          _value = fn();\n          _uninitialized = false;\n        }\n\n        return _value;\n      },\n      set: function set(value) {\n        _value = value;\n        _uninitialized = false;\n      },\n      configurable: true,\n      enumerable: true\n    });\n  } else {\n    // fall back to immediate evaluation\n    object[prop] = fn();\n  }\n};\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\n\n\nexports.traverse = function (object, path) {\n  var obj = object;\n\n  if (path) {\n    var names = path.split('.');\n\n    for (var i = 0; i < names.length; i++) {\n      var name = names[i];\n\n      if (!(name in obj)) {\n        obj[name] = {};\n      }\n\n      obj = obj[name];\n    }\n  }\n\n  return obj;\n};\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\n\n\nexports.hasOwnProperty = function (object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n};\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\n\n\nexports.isFactory = function (object) {\n  return object && typeof object.factory === 'function';\n};","'use strict';\n\nvar util = require('../../utils/index');\n\nvar DimensionError = require('../../error/DimensionError');\n\nvar string = util.string;\nvar array = util.array;\nvar object = util.object;\nvar number = util.number;\nvar isArray = Array.isArray;\nvar isNumber = number.isNumber;\nvar isInteger = number.isInteger;\nvar isString = string.isString;\nvar validateIndex = array.validateIndex;\n\nfunction factory(type, config, load, typed) {\n  var getArrayDataType = load(require('./utils/getArrayDataType'));\n  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)\n\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   */\n\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (type.isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = object.clone(data._data);\n        this._size = object.clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data); // get the dimensions of the array\n\n      this._size = array.size(this._data); // verify the dimensions of the array, TODO: compute size while processing array\n\n      array.validate(this._data, this._size); // data type unknown\n\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n\n  DenseMatrix.prototype = new Matrix();\n  /**\n   * Attach type information\n   */\n\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | DenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    } // check index\n\n\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n\n    var data = this._data;\n\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    return data;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n\n\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n\n    var i, ii, indexI; // enlarge matrix when needed\n\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n\n    _fit(this, size, defaultValue); // traverse over the dimensions\n\n\n    var data = this._data;\n\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    } // set new value\n\n\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n\n\n  function _get(matrix, index) {\n    if (!type.isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = index.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      } // validate if any of the ranges in the index is out of range\n\n\n      var min = index.min();\n      var max = index.max();\n\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      } // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n\n\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n\n\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n\n\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if (type.isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = array.size(submatrix);\n    }\n\n    if (isScalar) {\n      // set a scalar\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!object.deepEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      } // enlarge matrix when needed\n\n\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n\n      _fit(matrix, size, defaultValue); // insert the sub matrix\n\n\n      var dims = iSize.length;\n      var dim = 0;\n\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n\n    return matrix;\n  }\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n\n\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isArray(size)) {\n      throw new TypeError('Array expected');\n    } // matrix to resize\n\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, size, defaultValue);\n  };\n\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data; // go deep\n\n      while (isArray(v)) {\n        v = v[0];\n      }\n\n      return v;\n    } // resize matrix\n\n\n    matrix._size = size.slice(0); // copy the array\n\n    matrix._data = array.resize(matrix._data, matrix._size, defaultValue); // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = array.reshape(m._data, size);\n    m._size = size.slice(0);\n    return m;\n  };\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n\n\n  function _fit(matrix, size, defaultValue) {\n    var // copy the array\n    newSize = matrix._size.slice(0);\n\n    var changed = false; // add dimensions when needed\n\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    } // enlarge size when needed\n\n\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n\n\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: object.clone(this._data),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n\n\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n\n\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        return callback(value, index, me);\n      }\n    }; // return dense format\n\n\n    return new DenseMatrix({\n      data: recurse(this._data, []),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n\n    recurse(this._data, []);\n  };\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.toArray = function () {\n    return object.clone(this._data);\n  };\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.format = function (options) {\n    return string.format(this._data, options);\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.toString = function () {\n    return string.format(this._data);\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n\n\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Array}                      The array vector with the diagonal values.\n   */\n\n\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (type.isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix\n\n    var data = []; // loop rows\n\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data: data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                   The matrix size.\n   * @param {number | Array} value          The values for the diagonal.\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]        The default value for non-diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if (type.isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if (type.isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    if (defaultValue && isString(datatype)) {\n      // convert defaultValue to the same datatype\n      defaultValue = typed.convert(defaultValue, datatype);\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (type.isMatrix(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // discover default value if needed\n\n\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = type.isBigNumber(_value(0)) ? new type.BigNumber(0) : 0;\n    } // empty array\n\n\n    var data = []; // check we need to resize array\n\n    if (size.length > 0) {\n      // resize array\n      data = array.resize(data, size, defaultValue); // fill diagonal\n\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data: data,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]); // swap rows\n\n    DenseMatrix._swapRows(i, j, this._data); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   */\n\n\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n\n\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n\n    return data;\n  } // register this type in the base class Matrix\n\n\n  type.Matrix._storage.dense = DenseMatrix;\n  type.Matrix._storage['default'] = DenseMatrix; // exports\n\n  return DenseMatrix;\n}\n\nexports.name = 'DenseMatrix';\nexports.path = 'type';\nexports.factory = factory;\nexports.lazy = false; // no lazy loading, as we alter type.Matrix._storage","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm05 = function algorithm05(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm05;\n}\n\nexports.name = 'algorithm05';\nexports.factory = factory;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","'use strict';\n\nmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr; // c arrays\n\n  var cindex = c._index; // vars\n\n  var k, k0, k1, i; // check we need to process values (pattern matrix)\n\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i); // x(i) = A, check we need to call function this time\n\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row\n\n          u[i] = mark;\n        } else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      } else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row\n\n        u[i] = mark;\n      }\n    }\n  } else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i);\n      } else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n};","'use strict';\n\nrequire('./../utils/polyfills');\n\nvar isFactory = require('./../utils/object').isFactory;\n\nvar typedFactory = require('./typed');\n\nvar emitter = require('./../utils/emitter');\n\nvar importFactory = require('./function/import');\n\nvar configFactory = require('./function/config');\n/**\n * Math.js core. Creates a new, empty math.js instance\n * @param {Object} [options] Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\n\n\nexports.create = function create(options) {\n  // simple test for ES5 support\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');\n  } // cached factories and instances\n\n\n  var factories = [];\n  var instances = []; // create a namespace for the mathjs instance, and attach emitter functions\n\n  var math = emitter.mixin({});\n  math.type = {};\n  math.expression = {\n    transform: {},\n    mathWithTransform: {} // create a new typed instance\n\n  };\n  math.typed = typedFactory.create(math.type); // create configuration options. These are private\n\n  var _config = {\n    // minimum relative difference between two compared values,\n    // used by all comparison functions\n    epsilon: 1e-12,\n    // type of default matrix output. Choose 'matrix' (default) or 'array'\n    matrix: 'Matrix',\n    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n    number: 'number',\n    // number of significant digits in BigNumbers\n    precision: 64,\n    // predictable output type of functions. When true, output type depends only\n    // on the input types. When false (default), output type can vary depending\n    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n    // predictable is false, and returns `NaN` when true.\n    predictable: false,\n    // random seed for seeded pseudo random number generation\n    // null = randomly seed\n    randomSeed: null\n    /**\n     * Load a function or data type from a factory.\n     * If the function or data type already exists, the existing instance is\n     * returned.\n     * @param {{type: string, name: string, factory: Function}} factory\n     * @returns {*}\n     */\n\n  };\n\n  function load(factory) {\n    if (!isFactory(factory)) {\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n\n    var index = factories.indexOf(factory);\n    var instance;\n\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, _config, load, math.typed, math);\n      } else {\n        instance = factory.factory(math.type, _config, load, math.typed);\n      } // append to the cache\n\n\n      factories.push(factory);\n      instances.push(instance);\n    } else {\n      // already existing function, return the cached instance\n      instance = instances[index];\n    }\n\n    return instance;\n  } // load the import and config functions\n\n\n  math['import'] = load(importFactory);\n  math['config'] = load(configFactory);\n  math.expression.mathWithTransform['config'] = math['config']; // apply options\n\n  if (options) {\n    math.config(options);\n  }\n\n  return math;\n};","'use strict';\n\nvar escapeLatex = require('escape-latex');\n\nexports.symbols = {\n  // GREEK LETTERS\n  Alpha: 'A',\n  alpha: '\\\\alpha',\n  Beta: 'B',\n  beta: '\\\\beta',\n  Gamma: '\\\\Gamma',\n  gamma: '\\\\gamma',\n  Delta: '\\\\Delta',\n  delta: '\\\\delta',\n  Epsilon: 'E',\n  epsilon: '\\\\epsilon',\n  varepsilon: '\\\\varepsilon',\n  Zeta: 'Z',\n  zeta: '\\\\zeta',\n  Eta: 'H',\n  eta: '\\\\eta',\n  Theta: '\\\\Theta',\n  theta: '\\\\theta',\n  vartheta: '\\\\vartheta',\n  Iota: 'I',\n  iota: '\\\\iota',\n  Kappa: 'K',\n  kappa: '\\\\kappa',\n  varkappa: '\\\\varkappa',\n  Lambda: '\\\\Lambda',\n  lambda: '\\\\lambda',\n  Mu: 'M',\n  mu: '\\\\mu',\n  Nu: 'N',\n  nu: '\\\\nu',\n  Xi: '\\\\Xi',\n  xi: '\\\\xi',\n  Omicron: 'O',\n  omicron: 'o',\n  Pi: '\\\\Pi',\n  pi: '\\\\pi',\n  varpi: '\\\\varpi',\n  Rho: 'P',\n  rho: '\\\\rho',\n  varrho: '\\\\varrho',\n  Sigma: '\\\\Sigma',\n  sigma: '\\\\sigma',\n  varsigma: '\\\\varsigma',\n  Tau: 'T',\n  tau: '\\\\tau',\n  Upsilon: \"\\\\Upsilon\",\n  upsilon: \"\\\\upsilon\",\n  Phi: '\\\\Phi',\n  phi: '\\\\phi',\n  varphi: '\\\\varphi',\n  Chi: 'X',\n  chi: '\\\\chi',\n  Psi: '\\\\Psi',\n  psi: '\\\\psi',\n  Omega: '\\\\Omega',\n  omega: '\\\\omega',\n  // logic\n  'true': '\\\\mathrm{True}',\n  'false': '\\\\mathrm{False}',\n  // other\n  i: 'i',\n  // TODO use \\i ??\n  inf: '\\\\infty',\n  Inf: '\\\\infty',\n  infinity: '\\\\infty',\n  Infinity: '\\\\infty',\n  oo: '\\\\infty',\n  lim: '\\\\lim',\n  'undefined': '\\\\mathbf{?}'\n};\nexports.operators = {\n  'transpose': '^\\\\top',\n  'ctranspose': '^H',\n  'factorial': '!',\n  'pow': '^',\n  'dotPow': '.^\\\\wedge',\n  // TODO find ideal solution\n  'unaryPlus': '+',\n  'unaryMinus': '-',\n  'bitNot': '\\\\~',\n  // TODO find ideal solution\n  'not': '\\\\neg',\n  'multiply': '\\\\cdot',\n  'divide': '\\\\frac',\n  // TODO how to handle that properly?\n  'dotMultiply': '.\\\\cdot',\n  // TODO find ideal solution\n  'dotDivide': '.:',\n  // TODO find ideal solution\n  'mod': '\\\\mod',\n  'add': '+',\n  'subtract': '-',\n  'to': '\\\\rightarrow',\n  'leftShift': '<<',\n  'rightArithShift': '>>',\n  'rightLogShift': '>>>',\n  'equal': '=',\n  'unequal': '\\\\neq',\n  'smaller': '<',\n  'larger': '>',\n  'smallerEq': '\\\\leq',\n  'largerEq': '\\\\geq',\n  'bitAnd': '\\\\&',\n  'bitXor': \"\\\\underline{|}\",\n  'bitOr': '|',\n  'and': '\\\\wedge',\n  'xor': '\\\\veebar',\n  'or': '\\\\vee'\n};\nexports.defaultTemplate = \"\\\\mathrm{${name}}\\\\left(${args}\\\\right)\";\nvar units = {\n  deg: '^\\\\circ'\n};\n\nexports.escape = function (string) {\n  return escapeLatex(string, {\n    'preserveFormatting': true\n  });\n}; // @param {string} name\n// @param {boolean} isUnit\n\n\nexports.toSymbol = function (name, isUnit) {\n  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\n  if (isUnit) {\n    if (units.hasOwnProperty(name)) {\n      return units[name];\n    }\n\n    return '\\\\mathrm{' + exports.escape(name) + '}';\n  }\n\n  if (exports.symbols.hasOwnProperty(name)) {\n    return exports.symbols[name];\n  }\n\n  return exports.escape(name);\n};","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * A ResultSet contains a list or results\n   * @class ResultSet\n   * @param {Array} entries\n   * @constructor ResultSet\n   */\n  function ResultSet(entries) {\n    if (!(this instanceof ResultSet)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.entries = entries || [];\n  }\n  /**\n   * Attach type information\n   */\n\n\n  ResultSet.prototype.type = 'ResultSet';\n  ResultSet.prototype.isResultSet = true;\n  /**\n   * Returns the array with results hold by this ResultSet\n   * @memberof ResultSet\n   * @returns {Array} entries\n   */\n\n  ResultSet.prototype.valueOf = function () {\n    return this.entries;\n  };\n  /**\n   * Returns the stringified results of the ResultSet\n   * @memberof ResultSet\n   * @returns {string} string\n   */\n\n\n  ResultSet.prototype.toString = function () {\n    return '[' + this.entries.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the ResultSet\n   * @memberof ResultSet\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   */\n\n\n  ResultSet.prototype.toJSON = function () {\n    return {\n      mathjs: 'ResultSet',\n      entries: this.entries\n    };\n  };\n  /**\n   * Instantiate a ResultSet from a JSON object\n   * @memberof ResultSet\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   * @return {ResultSet}\n   */\n\n\n  ResultSet.fromJSON = function (json) {\n    return new ResultSet(json.entries);\n  };\n\n  return ResultSet;\n}\n\nexports.name = 'ResultSet';\nexports.path = 'type';\nexports.factory = factory;","module.exports = __WEBPACK_EXTERNAL_MODULE_cDcd__;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","/**\n * typed-function\n *\n * Type checking for JavaScript functions\n *\n * https://github.com/josdejong/typed-function\n */\n'use strict';\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // OldNode. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like OldNode.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.typed = factory();\n  }\n}(this, function () {\n\n  function ok () {\n    return true;\n  }\n\n  function notOk () {\n    return false;\n  }\n\n  function undef () {\n    return undefined;\n  }\n\n  /**\n   * @typedef {{\n   *   params: Param[],\n   *   fn: function\n   * }} Signature\n   *\n   * @typedef {{\n   *   types: Type[],\n   *   restParam: boolean\n   * }} Param\n   *\n   * @typedef {{\n   *   name: string,\n   *   typeIndex: number,\n   *   test: function,\n   *   conversion?: ConversionDef,\n   *   conversionIndex: number,\n   * }} Type\n   *\n   * @typedef {{\n   *   from: string,\n   *   to: string,\n   *   convert: function (*) : *\n   * }} ConversionDef\n   *\n   * @typedef {{\n   *   name: string,\n   *   test: function(*) : boolean\n   * }} TypeDef\n   */\n\n  // create a new instance of typed-function\n  function create () {\n    // data type tests\n    var _types = [\n      { name: 'number',    test: function (x) { return typeof x === 'number' } },\n      { name: 'string',    test: function (x) { return typeof x === 'string' } },\n      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },\n      { name: 'Function',  test: function (x) { return typeof x === 'function'} },\n      { name: 'Array',     test: Array.isArray },\n      { name: 'Date',      test: function (x) { return x instanceof Date } },\n      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },\n      { name: 'Object',    test: function (x) {\n        return typeof x === 'object' && x.constructor === Object\n      }},\n      { name: 'null',      test: function (x) { return x === null } },\n      { name: 'undefined', test: function (x) { return x === undefined } }\n    ];\n\n    var anyType = {\n      name: 'any',\n      test: ok\n    }\n\n    // types which need to be ignored\n    var _ignore = [];\n\n    // type conversions\n    var _conversions = [];\n\n    // This is a temporary object, will be replaced with a typed function at the end\n    var typed = {\n      types: _types,\n      conversions: _conversions,\n      ignore: _ignore\n    };\n\n    /**\n     * Find the test function for a type\n     * @param {String} typeName\n     * @return {TypeDef} Returns the type definition when found,\n     *                    Throws a TypeError otherwise\n     */\n    function findTypeByName (typeName) {\n      var entry = findInArray(typed.types, function (entry) {\n        return entry.name === typeName;\n      });\n\n      if (entry) {\n        return entry;\n      }\n\n      if (typeName === 'any') { // special baked-in case 'any'\n        return anyType;\n      }\n\n      var hint = findInArray(typed.types, function (entry) {\n        return entry.name.toLowerCase() === typeName.toLowerCase();\n      });\n\n      throw new TypeError('Unknown type \"' + typeName + '\"' +\n          (hint ? ('. Did you mean \"' + hint.name + '\"?') : ''));\n    }\n\n    /**\n     * Find the index of a type definition. Handles special case 'any'\n     * @param {TypeDef} type\n     * @return {number}\n     */\n    function findTypeIndex(type) {\n      if (type === anyType) {\n        return 999;\n      }\n\n      return typed.types.indexOf(type);\n    }\n\n    /**\n     * Find a type that matches a value.\n     * @param {*} value\n     * @return {string} Returns the name of the first type for which\n     *                  the type test matches the value.\n     */\n    function findTypeName(value) {\n      var entry = findInArray(typed.types, function (entry) {\n        return entry.test(value);\n      });\n\n      if (entry) {\n        return entry.name;\n      }\n\n      throw new TypeError('Value has unknown type. Value: ' + value);\n    }\n\n    /**\n     * Find a specific signature from a (composed) typed function, for example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *\n     * Function find only only works for exact matches.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature   Signature to be found, can be\n     *                                        an array or a comma separated string.\n     * @return {Function}                     Returns the matching signature, or\n     *                                        throws an error when no signature\n     *                                        is found.\n     */\n    function find (fn, signature) {\n      if (!fn.signatures) {\n        throw new TypeError('Function is no typed-function');\n      }\n\n      // normalize input\n      var arr;\n      if (typeof signature === 'string') {\n        arr = signature.split(',');\n        for (var i = 0; i < arr.length; i++) {\n          arr[i] = arr[i].trim();\n        }\n      }\n      else if (Array.isArray(signature)) {\n        arr = signature;\n      }\n      else {\n        throw new TypeError('String array or a comma separated string expected');\n      }\n\n      var str = arr.join(',');\n\n      // find an exact match\n      var match = fn.signatures[str];\n      if (match) {\n        return match;\n      }\n\n      // TODO: extend find to match non-exact signatures\n\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');\n    }\n\n    /**\n     * Convert a given value to another data type.\n     * @param {*} value\n     * @param {string} type\n     */\n    function convert (value, type) {\n      var from = findTypeName(value);\n\n      // check conversion is needed\n      if (type === from) {\n        return value;\n      }\n\n      for (var i = 0; i < typed.conversions.length; i++) {\n        var conversion = typed.conversions[i];\n        if (conversion.from === from && conversion.to === type) {\n          return conversion.convert(value);\n        }\n      }\n\n      throw new Error('Cannot convert from ' + from + ' to ' + type);\n    }\n    \n    /**\n     * Stringify parameters in a normalized way\n     * @param {Param[]} params\n     * @return {string}\n     */\n    function stringifyParams (params) {\n      return params\n          .map(function (param) {\n            var typeNames = param.types.map(getTypeName);\n\n            return (param.restParam ? '...' : '') + typeNames.join('|');\n          })\n          .join(',');\n    }\n\n    /**\n     * Parse a parameter, like \"...number | boolean\"\n     * @param {string} param\n     * @param {ConversionDef[]} conversions\n     * @return {Param} param\n     */\n    function parseParam (param, conversions) {\n      var restParam = param.indexOf('...') === 0;\n      var types = (!restParam)\n          ? param\n          : (param.length > 3)\n              ? param.slice(3)\n              : 'any';\n\n      var typeNames = types.split('|').map(trim)\n          .filter(notEmpty)\n          .filter(notIgnore);\n\n      var matchingConversions = filterConversions(conversions, typeNames);\n\n      var exactTypes = typeNames.map(function (typeName) {\n        var type = findTypeByName(typeName);\n\n        return {\n          name: typeName,\n          typeIndex: findTypeIndex(type),\n          test: type.test,\n          conversion: null,\n          conversionIndex: -1\n        };\n      });\n\n      var convertibleTypes = matchingConversions.map(function (conversion) {\n        var type = findTypeByName(conversion.from);\n\n        return {\n          name: conversion.from,\n          typeIndex: findTypeIndex(type),\n          test: type.test,\n          conversion: conversion,\n          conversionIndex: conversions.indexOf(conversion)\n        };\n      });\n\n      return {\n        types: exactTypes.concat(convertibleTypes),\n        restParam: restParam\n      };\n    }\n\n    /**\n     * Parse a signature with comma separated parameters,\n     * like \"number | boolean, ...string\"\n     * @param {string} signature\n     * @param {function} fn\n     * @param {ConversionDef[]} conversions\n     * @return {Signature | null} signature\n     */\n    function parseSignature (signature, fn, conversions) {\n      var params = [];\n\n      if (signature.trim() !== '') {\n        params = signature\n            .split(',')\n            .map(trim)\n            .map(function (param, index, array) {\n              var parsedParam = parseParam(param, conversions);\n\n              if (parsedParam.restParam && (index !== array.length - 1)) {\n                throw new SyntaxError('Unexpected rest parameter \"' + param + '\": ' +\n                    'only allowed for the last parameter');\n              }\n\n              return parsedParam;\n          });\n      }\n\n      if (params.some(isInvalidParam)) {\n        // invalid signature: at least one parameter has no types\n        // (they may have been filtered)\n        return null;\n      }\n\n      return {\n        params: params,\n        fn: fn\n      };\n    }\n\n    /**\n     * Test whether a set of params contains a restParam\n     * @param {Param[]} params\n     * @return {boolean} Returns true when the last parameter is a restParam\n     */\n    function hasRestParam(params) {\n      var param = last(params)\n      return param ? param.restParam : false;\n    }\n\n    /**\n     * Test whether a parameter contains conversions\n     * @param {Param} param\n     * @return {boolean} Returns true when at least one of the parameters\n     *                   contains a conversion.\n     */\n    function hasConversions(param) {\n      return param.types.some(function (type) {\n        return type.conversion != null;\n      });\n    }\n\n    /**\n     * Create a type test for a single parameter, which can have one or multiple\n     * types.\n     * @param {Param} param\n     * @return {function(x: *) : boolean} Returns a test function\n     */\n    function compileTest(param) {\n      if (!param || param.types.length === 0) {\n        // nothing to do\n        return ok;\n      }\n      else if (param.types.length === 1) {\n        return findTypeByName(param.types[0].name).test;\n      }\n      else if (param.types.length === 2) {\n        var test0 = findTypeByName(param.types[0].name).test;\n        var test1 = findTypeByName(param.types[1].name).test;\n        return function or(x) {\n          return test0(x) || test1(x);\n        }\n      }\n      else { // param.types.length > 2\n        var tests = param.types.map(function (type) {\n          return findTypeByName(type.name).test;\n        })\n        return function or(x) {\n          for (var i = 0; i < tests.length; i++) {\n            if (tests[i](x)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n    }\n\n    /**\n     * Create a test for all parameters of a signature\n     * @param {Param[]} params\n     * @return {function(args: Array<*>) : boolean}\n     */\n    function compileTests(params) {\n      var tests, test0, test1;\n\n      if (hasRestParam(params)) {\n        // variable arguments like '...number'\n        tests = initial(params).map(compileTest);\n        var varIndex = tests.length;\n        var lastTest = compileTest(last(params));\n        var testRestParam = function (args) {\n          for (var i = varIndex; i < args.length; i++) {\n            if (!lastTest(args[i])) {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n          return testRestParam(args) && (args.length >= varIndex + 1);\n        };\n      }\n      else {\n        // no variable arguments\n        if (params.length === 0) {\n          return function testArgs(args) {\n            return args.length === 0;\n          };\n        }\n        else if (params.length === 1) {\n          test0 = compileTest(params[0]);\n          return function testArgs(args) {\n            return test0(args[0]) && args.length === 1;\n          };\n        }\n        else if (params.length === 2) {\n          test0 = compileTest(params[0]);\n          test1 = compileTest(params[1]);\n          return function testArgs(args) {\n            return test0(args[0]) && test1(args[1]) && args.length === 2;\n          };\n        }\n        else { // arguments.length > 2\n          tests = params.map(compileTest);\n          return function testArgs(args) {\n            for (var i = 0; i < tests.length; i++) {\n              if (!tests[i](args[i])) {\n                return false;\n              }\n            }\n            return args.length === tests.length;\n          };\n        }\n      }\n    }\n\n    /**\n     * Find the parameter at a specific index of a signature.\n     * Handles rest parameters.\n     * @param {Signature} signature\n     * @param {number} index\n     * @return {Param | null} Returns the matching parameter when found,\n     *                        null otherwise.\n     */\n    function getParamAtIndex(signature, index) {\n      return index < signature.params.length\n          ? signature.params[index]\n          : hasRestParam(signature.params)\n              ? last(signature.params)\n              : null\n    }\n\n    /**\n     * Get all type names of a parameter\n     * @param {Signature} signature\n     * @param {number} index\n     * @param {boolean} excludeConversions\n     * @return {string[]} Returns an array with type names\n     */\n    function getExpectedTypeNames (signature, index, excludeConversions) {\n      var param = getParamAtIndex(signature, index);\n      var types = param\n          ? excludeConversions\n                  ? param.types.filter(isExactType)\n                  : param.types\n          : [];\n\n      return types.map(getTypeName);\n    }\n\n    /**\n     * Returns the name of a type\n     * @param {Type} type\n     * @return {string} Returns the type name\n     */\n    function getTypeName(type) {\n      return type.name;\n    }\n\n    /**\n     * Test whether a type is an exact type or conversion\n     * @param {Type} type\n     * @return {boolean} Returns true when\n     */\n    function isExactType(type) {\n      return type.conversion === null || type.conversion === undefined;\n    }\n\n    /**\n     * Helper function for creating error messages: create an array with\n     * all available types on a specific argument index.\n     * @param {Signature[]} signatures\n     * @param {number} index\n     * @return {string[]} Returns an array with available types\n     */\n    function mergeExpectedParams(signatures, index) {\n      var typeNames = uniq(flatMap(signatures, function (signature) {\n        return getExpectedTypeNames(signature, index, false);\n      }));\n\n      return (typeNames.indexOf('any') !== -1) ? ['any'] : typeNames;\n    }\n\n    /**\n     * Create\n     * @param {string} name             The name of the function\n     * @param {array.<*>} args          The actual arguments passed to the function\n     * @param {Signature[]} signatures  A list with available signatures\n     * @return {TypeError} Returns a type error with additional data\n     *                     attached to it in the property `data`\n     */\n    function createError(name, args, signatures) {\n      var err, expected;\n      var _name = name || 'unnamed';\n\n      // test for wrong type at some index\n      var matchingSignatures = signatures;\n      var index;\n      for (index = 0; index < args.length; index++) {\n        var nextMatchingDefs = matchingSignatures.filter(function (signature) {\n          var test = compileTest(getParamAtIndex(signature, index));\n          return (index < signature.params.length || hasRestParam(signature.params)) &&\n              test(args[index]);\n        });\n\n        if (nextMatchingDefs.length === 0) {\n          // no matching signatures anymore, throw error \"wrong type\"\n          expected = mergeExpectedParams(matchingSignatures, index);\n          if (expected.length > 0) {\n            var actualType = findTypeName(args[index]);\n\n            err = new TypeError('Unexpected type of argument in function ' + _name +\n                ' (expected: ' + expected.join(' or ') +\n                ', actual: ' + actualType + ', index: ' + index + ')');\n            err.data = {\n              category: 'wrongType',\n              fn: _name,\n              index: index,\n              actual: actualType,\n              expected: expected\n            }\n            return err;\n          }\n        }\n        else {\n          matchingSignatures = nextMatchingDefs;\n        }\n      }\n\n      // test for too few arguments\n      var lengths = matchingSignatures.map(function (signature) {\n        return hasRestParam(signature.params) ? Infinity : signature.params.length;\n      });\n      if (args.length < Math.min.apply(null, lengths)) {\n        expected = mergeExpectedParams(matchingSignatures, index);\n        err = new TypeError('Too few arguments in function ' + _name +\n            ' (expected: ' + expected.join(' or ') +\n            ', index: ' + args.length + ')');\n        err.data = {\n          category: 'tooFewArgs',\n          fn: _name,\n          index: args.length,\n          expected: expected\n        }\n        return err;\n      }\n\n      // test for too many arguments\n      var maxLength = Math.max.apply(null, lengths);\n      if (args.length > maxLength) {\n        err = new TypeError('Too many arguments in function ' + _name +\n            ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n        err.data = {\n          category: 'tooManyArgs',\n          fn: _name,\n          index: args.length,\n          expectedLength: maxLength\n        }\n        return err;\n      }\n\n      err = new TypeError('Arguments of type \"' + args.join(', ') +\n          '\" do not match any of the defined signatures of function ' + _name + '.');\n      err.data = {\n        category: 'mismatch',\n        actual: args.map(findTypeName)\n      }\n      return err;\n    }\n\n    /**\n     * Find the lowest index of all exact types of a parameter (no conversions)\n     * @param {Param} param\n     * @return {number} Returns the index of the lowest type in typed.types\n     */\n    function getLowestTypeIndex (param) {\n      var min = 999;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].typeIndex);\n        }\n      }\n\n      return min;\n    }\n\n    /**\n     * Find the lowest index of the conversion of all types of the parameter\n     * having a conversion\n     * @param {Param} param\n     * @return {number} Returns the lowest index of the conversions of this type\n     */\n    function getLowestConversionIndex (param) {\n      var min = 999;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (!isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].conversionIndex);\n        }\n      }\n\n      return min;\n    }\n\n    /**\n     * Compare two params\n     * @param {Param} param1\n     * @param {Param} param2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareParams (param1, param2) {\n      var c;\n\n      // compare having a rest parameter or not\n      c = param1.restParam - param2.restParam;\n      if (c !== 0) {\n        return c;\n      }\n\n      // compare having conversions or not\n      c = hasConversions(param1) - hasConversions(param2);\n      if (c !== 0) {\n        return c;\n      }\n\n      // compare the index of the types\n      c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n      if (c !== 0) {\n        return c;\n      }\n\n      // compare the index of any conversion\n      return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n    }\n\n    /**\n     * Compare two signatures\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareSignatures (signature1, signature2) {\n      var len = Math.min(signature1.params.length, signature2.params.length);\n      var i;\n      var c;\n\n      // compare whether the params have conversions at all or not\n      c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions)\n      if (c !== 0) {\n        return c;\n      }\n\n      // next compare whether the params have conversions one by one\n      for (i = 0; i < len; i++) {\n        c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);\n        if (c !== 0) {\n          return c;\n        }\n      }\n\n      // compare the types of the params one by one\n      for (i = 0; i < len; i++) {\n        c = compareParams(signature1.params[i], signature2.params[i]);\n        if (c !== 0) {\n          return c;\n        }\n      }\n\n      // compare the number of params\n      return signature1.params.length - signature2.params.length;\n    }\n\n    /**\n     * Get params containing all types that can be converted to the defined types.\n     *\n     * @param {ConversionDef[]} conversions\n     * @param {string[]} typeNames\n     * @return {ConversionDef[]} Returns the conversions that are available\n     *                        for every type (if any)\n     */\n    function filterConversions(conversions, typeNames) {\n      var matches = {};\n\n      conversions.forEach(function (conversion) {\n        if (typeNames.indexOf(conversion.from) === -1 &&\n            typeNames.indexOf(conversion.to) !== -1 &&\n            !matches[conversion.from]) {\n          matches[conversion.from] = conversion;\n        }\n      });\n\n      return Object.keys(matches).map(function (from) {\n        return matches[from];\n      });\n    }\n\n    /**\n     * Preprocess arguments before calling the original function:\n     * - if needed convert the parameters\n     * - in case of rest parameters, move the rest parameters into an Array\n     * @param {Param[]} params\n     * @param {function} fn\n     * @return {function} Returns a wrapped function\n     */\n    function compileArgsPreprocessing(params, fn) {\n      var fnConvert = fn;\n\n      // TODO: can we make this wrapper function smarter/simpler?\n\n      if (params.some(hasConversions)) {\n        var restParam = hasRestParam(params);\n        var compiledConversions = params.map(compileArgConversion)\n\n        fnConvert = function convertArgs() {\n          var args = [];\n          var last = restParam ? arguments.length - 1 : arguments.length;\n          for (var i = 0; i < last; i++) {\n            args[i] = compiledConversions[i](arguments[i]);\n          }\n          if (restParam) {\n            args[last] = arguments[last].map(compiledConversions[last]);\n          }\n\n          return fn.apply(null, args);\n        }\n      }\n\n      var fnPreprocess = fnConvert;\n      if (hasRestParam(params)) {\n        var offset = params.length - 1;\n\n        fnPreprocess = function preprocessRestParams () {\n          return fnConvert.apply(null,\n              slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n        }\n      }\n\n      return fnPreprocess;\n    }\n\n    /**\n     * Compile conversion for a parameter to the right type\n     * @param {Param} param\n     * @return {function} Returns the wrapped function that will convert arguments\n     *\n     */\n    function compileArgConversion(param) {\n      var test0, test1, conversion0, conversion1;\n      var tests = [];\n      var conversions = [];\n\n      param.types.forEach(function (type) {\n        if (type.conversion) {\n          tests.push(findTypeByName(type.conversion.from).test);\n          conversions.push(type.conversion.convert);\n        }\n      });\n\n      // create optimized conversion functions depending on the number of conversions\n      switch (conversions.length) {\n        case 0:\n          return function convertArg(arg) {\n            return arg;\n          }\n\n        case 1:\n          test0 = tests[0]\n          conversion0 = conversions[0];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg)\n            }\n            return arg;\n          }\n\n        case 2:\n          test0 = tests[0]\n          test1 = tests[1]\n          conversion0 = conversions[0];\n          conversion1 = conversions[1];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg)\n            }\n            if (test1(arg)) {\n              return conversion1(arg)\n            }\n            return arg;\n          }\n\n        default:\n          return function convertArg(arg) {\n            for (var i = 0; i < conversions.length; i++) {\n              if (tests[i](arg)) {\n                return conversions[i](arg);\n              }\n            }\n            return arg;\n          }\n      }\n    }\n\n    /**\n     * Convert an array with signatures into a map with signatures,\n     * where signatures with union types are split into separate signatures\n     *\n     * Throws an error when there are conflicting types\n     *\n     * @param {Signature[]} signatures\n     * @return {Object.<string, function>}  Returns a map with signatures\n     *                                      as key and the original function\n     *                                      of this signature as value.\n     */\n    function createSignaturesMap(signatures) {\n      var signaturesMap = {};\n      signatures.forEach(function (signature) {\n        if (!signature.params.some(hasConversions)) {\n          splitParams(signature.params, true).forEach(function (params) {\n            signaturesMap[stringifyParams(params)] = signature.fn;\n          });\n        }\n      });\n\n      return signaturesMap;\n    }\n\n    /**\n     * Split params with union types in to separate params.\n     *\n     * For example:\n     *\n     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n     *     // returns:\n     *     // [\n     *     //   ['Array', 'string'],\n     *     //   ['Array', 'RegExp'],\n     *     //   ['Object', 'string'],\n     *     //   ['Object', 'RegExp']\n     *     // ]\n     *\n     * @param {Param[]} params\n     * @param {boolean} ignoreConversionTypes\n     * @return {Param[]}\n     */\n    function splitParams(params, ignoreConversionTypes) {\n      function _splitParams(params, index, types) {\n        if (index < params.length) {\n          var param = params[index]\n          var filteredTypes = ignoreConversionTypes\n              ? param.types.filter(isExactType)\n              : param.types;\n          var typeGroups\n\n          if (param.restParam) {\n            // split the types of a rest parameter in two:\n            // one with only exact types, and one with exact types and conversions\n            var exactTypes = filteredTypes.filter(isExactType)\n            typeGroups = exactTypes.length < filteredTypes.length\n                ? [exactTypes, filteredTypes]\n                : [filteredTypes]\n\n          }\n          else {\n            // split all the types of a regular parameter into one type per group\n            typeGroups = filteredTypes.map(function (type) {\n              return [type]\n            })\n          }\n\n          // recurse over the groups with types\n          return flatMap(typeGroups, function (typeGroup) {\n            return _splitParams(params, index + 1, types.concat([typeGroup]));\n          });\n\n        }\n        else {\n          // we've reached the end of the parameters. Now build a new Param\n          var splittedParams = types.map(function (type, typeIndex) {\n            return {\n              types: type,\n              restParam: (typeIndex === params.length - 1) && hasRestParam(params)\n            }\n          });\n\n          return [splittedParams];\n        }\n      }\n\n      return _splitParams(params, 0, []);\n    }\n\n    /**\n     * Test whether two signatures have a conflicting signature\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {boolean} Returns true when the signatures conflict, false otherwise.\n     */\n    function hasConflictingParams(signature1, signature2) {\n      var ii = Math.max(signature1.params.length, signature2.params.length);\n\n      for (var i = 0; i < ii; i++) {\n        var typesNames1 = getExpectedTypeNames(signature1, i, true);\n        var typesNames2 = getExpectedTypeNames(signature2, i, true);\n\n        if (!hasOverlap(typesNames1, typesNames2)) {\n          return false;\n        }\n      }\n\n      var len1 = signature1.params.length;\n      var len2 = signature2.params.length;\n      var restParam1 = hasRestParam(signature1.params);\n      var restParam2 = hasRestParam(signature2.params);\n\n      return restParam1\n          ? restParam2 ? (len1 === len2) : (len2 >= len1)\n          : restParam2 ? (len1 >= len2)  : (len1 === len2)\n    }\n\n    /**\n     * Create a typed function\n     * @param {String} name               The name for the typed function\n     * @param {Object.<string, function>} signaturesMap\n     *                                    An object with one or\n     *                                    multiple signatures as key, and the\n     *                                    function corresponding to the\n     *                                    signature as value.\n     * @return {function}  Returns the created typed function.\n     */\n    function createTypedFunction(name, signaturesMap) {\n      if (Object.keys(signaturesMap).length === 0) {\n        throw new SyntaxError('No signatures provided');\n      }\n\n      // parse the signatures, and check for conflicts\n      var parsedSignatures = [];\n      Object.keys(signaturesMap)\n          .map(function (signature) {\n            return parseSignature(signature, signaturesMap[signature], typed.conversions);\n          })\n          .filter(notNull)\n          .forEach(function (parsedSignature) {\n            // check whether this parameter conflicts with already parsed signatures\n            var conflictingSignature = findInArray(parsedSignatures, function (s) {\n              return hasConflictingParams(s, parsedSignature)\n            });\n            if (conflictingSignature) {\n              throw new TypeError('Conflicting signatures \"' +\n                  stringifyParams(conflictingSignature.params) + '\" and \"' +\n                  stringifyParams(parsedSignature.params) + '\".');\n            }\n\n            parsedSignatures.push(parsedSignature);\n          });\n\n      // split and filter the types of the signatures, and then order them\n      var signatures = flatMap(parsedSignatures, function (parsedSignature) {\n        var params = parsedSignature ? splitParams(parsedSignature.params, false) : []\n\n        return params.map(function (params) {\n          return {\n            params: params,\n            fn: parsedSignature.fn\n          };\n        });\n      }).filter(notNull);\n\n      signatures.sort(compareSignatures);\n\n      // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;\n\n      // compile the tests\n      var tests = signatures.map(function (signature) {\n        return compileTests(signature.params);\n      });\n\n      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n\n      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;\n\n      // compile the functions\n      var fns = signatures.map(function(signature) {\n        return compileArgsPreprocessing(signature.params, signature.fn)\n      });\n\n      var fn0 = ok0 ? fns[0] : undef;\n      var fn1 = ok1 ? fns[1] : undef;\n      var fn2 = ok2 ? fns[2] : undef;\n      var fn3 = ok3 ? fns[3] : undef;\n      var fn4 = ok4 ? fns[4] : undef;\n      var fn5 = ok5 ? fns[5] : undef;\n\n      var len0 = ok0 ? signatures[0].params.length : -1;\n      var len1 = ok1 ? signatures[1].params.length : -1;\n      var len2 = ok2 ? signatures[2].params.length : -1;\n      var len3 = ok3 ? signatures[3].params.length : -1;\n      var len4 = ok4 ? signatures[4].params.length : -1;\n      var len5 = ok5 ? signatures[5].params.length : -1;\n\n      // simple and generic, but also slow\n      var iStart = allOk ? 6 : 0;\n      var iEnd = signatures.length;\n      var generic = function generic() {\n        'use strict';\n\n        for (var i = iStart; i < iEnd; i++) {\n          if (tests[i](arguments)) {\n            return fns[i].apply(null, arguments);\n          }\n        }\n\n        throw createError(name, arguments, signatures);\n      }\n\n      // create the typed function\n      // fast, specialized version. Falls back to the slower, generic one if needed\n      var fn = function fn(arg0, arg1) {\n        'use strict';\n\n        if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(null, arguments); }\n        if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(null, arguments); }\n        if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(null, arguments); }\n        if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(null, arguments); }\n        if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(null, arguments); }\n        if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(null, arguments); }\n\n        return generic.apply(null, arguments);\n      }\n\n      // attach name the typed function\n      try {\n        Object.defineProperty(fn, 'name', {value: name});\n      }\n      catch (err) {\n        // old browsers do not support Object.defineProperty and some don't support setting the name property\n        // the function name is not essential for the functioning, it's mostly useful for debugging,\n        // so it's fine to have unnamed functions.\n      }\n\n      // attach signatures to the function\n      fn.signatures = createSignaturesMap(signatures);\n\n      return fn;\n    }\n\n    /**\n     * Test whether a type should be NOT be ignored\n     * @param {string} typeName\n     * @return {boolean}\n     */\n    function notIgnore(typeName) {\n      return typed.ignore.indexOf(typeName) === -1;\n    }\n\n    /**\n     * trim a string\n     * @param {string} str\n     * @return {string}\n     */\n    function trim(str) {\n      return str.trim();\n    }\n\n    /**\n     * Test whether a string is not empty\n     * @param {string} str\n     * @return {boolean}\n     */\n    function notEmpty(str) {\n      return !!str;\n    }\n\n    /**\n     * test whether a value is not strict equal to null\n     * @param {*} value\n     * @return {boolean}\n     */\n    function notNull(value) {\n      return value !== null;\n    }\n\n    /**\n     * Test whether a parameter has no types defined\n     * @param {Param} param\n     * @return {boolean}\n     */\n    function isInvalidParam (param) {\n      return param.types.length === 0;\n    }\n\n    /**\n     * Return all but the last items of an array\n     * @param {Array} arr\n     * @return {Array}\n     */\n    function initial(arr) {\n      return arr.slice(0, arr.length - 1);\n    }\n\n    /**\n     * return the last item of an array\n     * @param {Array} arr\n     * @return {*}\n     */\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n\n    /**\n     * Slice an array or function Arguments\n     * @param {Array | Arguments | IArguments} arr\n     * @param {number} start\n     * @param {number} [end]\n     * @return {Array}\n     */\n    function slice(arr, start, end) {\n      return Array.prototype.slice.call(arr, start, end);\n    }\n\n    /**\n     * Test whether an array contains some item\n     * @param {Array} array\n     * @param {*} item\n     * @return {boolean} Returns true if array contains item, false if not.\n     */\n    function contains(array, item) {\n      return array.indexOf(item) !== -1;\n    }\n\n    /**\n     * Test whether two arrays have overlapping items\n     * @param {Array} array1\n     * @param {Array} array2\n     * @return {boolean} Returns true when at least one item exists in both arrays\n     */\n    function hasOverlap(array1, array2) {\n      for (var i = 0; i < array1.length; i++) {\n        if (contains(array2, array1[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Return the first item from an array for which test(arr[i]) returns true\n     * @param {Array} arr\n     * @param {function} test\n     * @return {* | undefined} Returns the first matching item\n     *                         or undefined when there is no match\n     */\n    function findInArray(arr, test) {\n      for (var i = 0; i < arr.length; i++) {\n        if (test(arr[i])) {\n          return arr[i];\n        }\n      }\n      return undefined;\n    }\n\n    /**\n     * Filter unique items of an array with strings\n     * @param {string[]} arr\n     * @return {string[]}\n     */\n    function uniq(arr) {\n      var entries = {}\n      for (var i = 0; i < arr.length; i++) {\n        entries[arr[i]] = true;\n      }\n      return Object.keys(entries);\n    }\n\n    /**\n     * Flat map the result invoking a callback for every item in an array.\n     * https://gist.github.com/samgiles/762ee337dff48623e729\n     * @param {Array} arr\n     * @param {function} callback\n     * @return {Array}\n     */\n    function flatMap(arr, callback) {\n      return Array.prototype.concat.apply([], arr.map(callback));\n    }\n\n    /**\n     * Retrieve the function name from a set of typed functions,\n     * and check whether the name of all functions match (if given)\n     * @param {function[]} fns\n     */\n    function getName (fns) {\n      var name = '';\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n\n        // check whether the names are the same when defined\n        if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {\n          if (name === '') {\n            name = fn.name;\n          }\n          else if (name !== fn.name) {\n            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');\n            err.data = {\n              actual: fn.name,\n              expected: name\n            };\n            throw err;\n          }\n        }\n      }\n\n      return name;\n    }\n\n    // extract and merge all signatures of a list with typed functions\n    function extractSignatures(fns) {\n      var err;\n      var signaturesMap = {};\n\n      function validateUnique(_signature, _fn) {\n        if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {\n          err = new Error('Signature \"' + _signature + '\" is defined twice');\n          err.data = {signature: _signature};\n          throw err;\n          // else: both signatures point to the same function, that's fine\n        }\n      }\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n\n        // test whether this is a typed-function\n        if (typeof fn.signatures === 'object') {\n          // merge the signatures\n          for (var signature in fn.signatures) {\n            if (fn.signatures.hasOwnProperty(signature)) {\n              validateUnique(signature, fn.signatures[signature]);\n              signaturesMap[signature] = fn.signatures[signature];\n            }\n          }\n        }\n        else if (typeof fn.signature === 'string') {\n          validateUnique(fn.signature, fn);\n          signaturesMap[fn.signature] = fn;\n        }\n        else {\n          err = new TypeError('Function is no typed-function (index: ' + i + ')');\n          err.data = {index: i};\n          throw err;\n        }\n      }\n\n      return signaturesMap;\n    }\n\n    typed = createTypedFunction('typed', {\n      'string, Object': createTypedFunction,\n      'Object': function (signaturesMap) {\n        // find existing name\n        var fns = [];\n        for (var signature in signaturesMap) {\n          if (signaturesMap.hasOwnProperty(signature)) {\n            fns.push(signaturesMap[signature]);\n          }\n        }\n        var name = getName(fns);\n        return createTypedFunction(name, signaturesMap);\n      },\n      '...Function': function (fns) {\n        return createTypedFunction(getName(fns), extractSignatures(fns));\n      },\n      'string, ...Function': function (name, fns) {\n        return createTypedFunction(name, extractSignatures(fns));\n      }\n    });\n\n    typed.create = create;\n    typed.types = _types;\n    typed.conversions = _conversions;\n    typed.ignore = _ignore;\n    typed.convert = convert;\n    typed.find = find;\n\n    /**\n     * add a type\n     * @param {{name: string, test: function}} type\n     * @param {boolean} [beforeObjectTest=true]\n     *                          If true, the new test will be inserted before\n     *                          the test with name 'Object' (if any), since\n     *                          tests for Object match Array and classes too.\n     */\n    typed.addType = function (type, beforeObjectTest) {\n      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      if (beforeObjectTest !== false) {\n        for (var i = 0; i < typed.types.length; i++) {\n          if (typed.types[i].name === 'Object') {\n            typed.types.splice(i, 0, type);\n            return\n          }\n        }\n      }\n\n      typed.types.push(type);\n    };\n\n    // add a conversion\n    typed.addConversion = function (conversion) {\n      if (!conversion\n          || typeof conversion.from !== 'string'\n          || typeof conversion.to !== 'string'\n          || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n\n      typed.conversions.push(conversion);\n    };\n\n    return typed;\n  }\n\n  return create();\n}));","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  var algorithm01 = function algorithm01(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // process data types\n\n    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function\n\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars\n\n    var i, j; // result (DenseMatrix)\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated\n\n        w[i] = mark;\n      } // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        } else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  return algorithm01;\n}\n\nexports.name = 'algorithm01';\nexports.factory = factory;","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  var abs = typed('abs', {\n    'number': Math.abs,\n    'Complex': function Complex(x) {\n      return x.abs();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.abs();\n    },\n    'Fraction': function Fraction(x) {\n      return x.abs();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return deepMap(x, abs, true);\n    },\n    'Unit': function Unit(x) {\n      return x.abs();\n    }\n  });\n  abs.toTex = {\n    1: \"\\\\left|${args[0]}\\\\right|\"\n  };\n  return abs;\n}\n\nexports.name = 'abs';\nexports.factory = factory;","module.exports = __WEBPACK_EXTERNAL_MODULE_faye__;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var latex = require('../../utils/latex');\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  var mod = typed('mod', {\n    'number, number': _mod,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, mod, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, mod, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, mod, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, mod);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return mod(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, mod, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, mod, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, mod, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, mod, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, mod, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, mod, true).valueOf();\n    }\n  });\n  mod.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['mod'], \"${args[1]}\\\\right)\")\n  };\n  return mod;\n  /**\n   * Calculate the modulus of two numbers\n   * @param {number} x\n   * @param {number} y\n   * @returns {number} res\n   * @private\n   */\n\n  function _mod(x, y) {\n    if (y > 0) {\n      // We don't use JavaScript's % operator here as this doesn't work\n      // correctly for x < 0 and x === 0\n      // see https://en.wikipedia.org/wiki/Modulo_operation\n      return x - y * Math.floor(x / y);\n    } else if (y === 0) {\n      return x;\n    } else {\n      // y < 0\n      // TODO: implement mod for a negative divisor\n      throw new Error('Cannot calculate mod for a negative divisor');\n    }\n  }\n}\n\nexports.name = 'mod';\nexports.factory = factory;","'use strict';\n\nvar util = require('../../../utils/index');\n\nvar object = util.object;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var abs = load(require('../../arithmetic/abs'));\n  var addScalar = load(require('../../arithmetic/addScalar'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));\n  var subtract = load(require('../../arithmetic/subtract'));\n  var larger = load(require('../../relational/larger'));\n  var equalScalar = load(require('../../relational/equalScalar'));\n  var unaryMinus = load(require('../../arithmetic/unaryMinus'));\n  var SparseMatrix = type.SparseMatrix;\n  var DenseMatrix = type.DenseMatrix;\n  var Spa = type.Spa;\n  /**\n   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n   * row permutation vector `p` where `A[p,:] = L * U`\n   *\n   * Syntax:\n   *\n   *    math.lup(A)\n   *\n   * Example:\n   *\n   *    const m = [[2, 1], [1, 4]]\n   *    const r = math.lup(m)\n   *    // r = {\n   *    //   L: [[1, 0], [0.5, 1]],\n   *    //   U: [[2, 1], [0, 3.5]],\n   *    //   P: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    slu, lsolve, lusolve, usolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n   *\n   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n   */\n\n  var lup = typed('lup', {\n    'DenseMatrix': function DenseMatrix(m) {\n      return _denseLUP(m);\n    },\n    'SparseMatrix': function SparseMatrix(m) {\n      return _sparseLUP(m);\n    },\n    'Array': function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a); // lup, use matrix implementation\n\n      var r = _denseLUP(m); // result\n\n\n      return {\n        L: r.L.valueOf(),\n        U: r.U.valueOf(),\n        p: r.p\n      };\n    }\n  });\n\n  function _denseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1]; // minimum rows and columns\n\n    var n = Math.min(rows, columns); // matrix array, clone original data\n\n    var data = object.clone(m._data); // l matrix arrays\n\n    var ldata = [];\n    var lsize = [rows, n]; // u matrix arrays\n\n    var udata = [];\n    var usize = [n, columns]; // vars\n\n    var i, j, k; // permutation vector\n\n    var p = [];\n\n    for (i = 0; i < rows; i++) {\n      p[i] = i;\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows\n        for (i = 0; i < rows; i++) {\n          // min i,j\n          var min = Math.min(i, j); // v[i, j]\n\n          var s = 0; // loop up to min\n\n          for (k = 0; k < min; k++) {\n            // s = l[i, k] - data[k, j]\n            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n          }\n\n          data[i][j] = subtract(data[i][j], s);\n        }\n      } // row with larger value in cvector, row >= j\n\n\n      var pi = j;\n      var pabsv = 0;\n      var vjj = 0; // loop rows\n\n      for (i = j; i < rows; i++) {\n        // data @ i, j\n        var v = data[i][j]; // absolute value\n\n        var absv = abs(v); // value is greater than pivote value\n\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = i; // update max value\n\n          pabsv = absv; // value @ [j, j]\n\n          vjj = v;\n        }\n      } // swap rows (j <-> pi)\n\n\n      if (j !== pi) {\n        // swap values j <-> pi in p\n        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data\n\n        DenseMatrix._swapRows(j, pi, data);\n      } // check column is in lower triangular matrix\n\n\n      if (j < rows) {\n        // loop rows (lower triangular matrix)\n        for (i = j + 1; i < rows; i++) {\n          // value @ i, j\n          var vij = data[i][j];\n\n          if (!equalScalar(vij, 0)) {\n            // update data\n            data[i][j] = divideScalar(data[i][j], vjj);\n          }\n        }\n      }\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // initialize row in arrays\n        if (j === 0) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i] = [];\n          } // L\n\n\n          ldata[i] = [];\n        } // check we are in the upper triangular matrix\n\n\n        if (i < j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          } // check column exists in lower triangular matrix\n\n\n          if (j < rows) {\n            // L\n            ldata[i][j] = 0;\n          }\n\n          continue;\n        } // diagonal value\n\n\n        if (i === j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          } // check column exists in lower triangular matrix\n\n\n          if (j < rows) {\n            // L\n            ldata[i][j] = 1;\n          }\n\n          continue;\n        } // check row exists in upper triangular matrix\n\n\n        if (i < columns) {\n          // U\n          udata[i][j] = 0;\n        } // check column exists in lower triangular matrix\n\n\n        if (j < rows) {\n          // L\n          ldata[i][j] = data[i][j];\n        }\n      }\n    } // l matrix\n\n\n    var l = new DenseMatrix({\n      data: ldata,\n      size: lsize\n    }); // u matrix\n\n    var u = new DenseMatrix({\n      data: udata,\n      size: usize\n    }); // p vector\n\n    var pv = [];\n\n    for (i = 0, n = p.length; i < n; i++) {\n      pv[p[i]] = i;\n    } // return matrices\n\n\n    return {\n      L: l,\n      U: u,\n      p: pv,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n\n  function _sparseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1]; // minimum rows and columns\n\n    var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)\n\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // l matrix arrays\n\n    var lvalues = [];\n    var lindex = [];\n    var lptr = [];\n    var lsize = [rows, n]; // u matrix arrays\n\n    var uvalues = [];\n    var uindex = [];\n    var uptr = [];\n    var usize = [n, columns]; // vars\n\n    var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)\n\n    var pvCo = [];\n    var pvOc = [];\n\n    for (i = 0; i < rows; i++) {\n      pvCo[i] = i;\n      pvOc[i] = i;\n    } // swap indices in permutation vectors (condition x < y)!\n\n\n    var swapIndeces = function swapIndeces(x, y) {\n      // find pv indeces getting data from x and y\n      var kx = pvOc[x];\n      var ky = pvOc[y]; // update permutation vector current -> original\n\n      pvCo[kx] = y;\n      pvCo[ky] = x; // update permutation vector original -> current\n\n      pvOc[x] = ky;\n      pvOc[y] = kx;\n    }; // loop columns\n\n\n    var _loop = function _loop() {\n      // sparse accumulator\n      var spa = new Spa(); // check lower triangular matrix has a value @ column j\n\n      if (j < rows) {\n        // update ptr\n        lptr.push(lvalues.length); // first value in j column for lower triangular matrix\n\n        lvalues.push(1);\n        lindex.push(j);\n      } // update ptr\n\n\n      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // copy column j into sparse accumulator\n\n      for (k = k0; k < k1; k++) {\n        // row\n        i = index[k]; // copy column values into sparse accumulator (use permutation vector)\n\n        spa.set(pvCo[i], values[k]);\n      } // skip first column in upper triangular matrix\n\n\n      if (j > 0) {\n        // loop rows in column j (above diagonal)\n        spa.forEach(0, j - 1, function (k, vkj) {\n          // loop rows in column k (L)\n          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n            // check row is below k\n            if (i > k) {\n              // update spa value\n              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n            }\n          });\n        });\n      } // row with larger value in spa, row >= j\n\n\n      var pi = j;\n      var vjj = spa.get(j);\n      var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)\n\n      spa.forEach(j + 1, rows - 1, function (x, v) {\n        // absolute value\n        var absv = abs(v); // value is greater than pivote value\n\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = x; // update max value\n\n          pabsv = absv; // value @ [j, j]\n\n          vjj = v;\n        }\n      }); // swap rows (j <-> pi)\n\n      if (j !== pi) {\n        // swap values j <-> pi in L\n        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U\n\n\n        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa\n\n\n        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)\n\n        swapIndeces(j, pi);\n      } // loop values in spa (order by row)\n\n\n      spa.forEach(0, rows - 1, function (x, v) {\n        // check we are above diagonal\n        if (x <= j) {\n          // update upper triangular matrix\n          uvalues.push(v);\n          uindex.push(x);\n        } else {\n          // update value\n          v = divideScalar(v, vjj); // check value is non zero\n\n          if (!equalScalar(v, 0)) {\n            // update lower triangular matrix\n            lvalues.push(v);\n            lindex.push(x);\n          }\n        }\n      });\n    };\n\n    for (j = 0; j < columns; j++) {\n      _loop();\n    } // update ptrs\n\n\n    uptr.push(uvalues.length);\n    lptr.push(lvalues.length); // return matrices\n\n    return {\n      L: new SparseMatrix({\n        values: lvalues,\n        index: lindex,\n        ptr: lptr,\n        size: lsize\n      }),\n      U: new SparseMatrix({\n        values: uvalues,\n        index: uindex,\n        ptr: uptr,\n        size: usize\n      }),\n      p: pvCo,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n\n  return lup;\n}\n\nexports.name = 'lup';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  var algorithm03 = function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (DenseMatrix)\n\n\n    var cdata = []; // initialize dense matrix\n\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      } // process workspace\n\n\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  return algorithm03;\n}\n\nexports.name = 'algorithm03';\nexports.factory = factory;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Test whether two values are equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  var equalScalar = typed('equalScalar', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x === y || nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.equals(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return equalScalar(x.value, y.value);\n    }\n  });\n  return equalScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var larger = load(require('../relational/larger'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n\n  var max = typed('max', {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n  max.toTex = \"\\\\max\\\\left(${args}\\\\right)\";\n  return max;\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n\n\n  function _max(array) {\n    var max;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          max = NaN;\n        } else if (max === undefined || larger(value, max)) {\n          max = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n\n    if (max === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    return max;\n  }\n}\n\nexports.name = 'max';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar typedFunction = require('typed-function');\n\nvar digits = require('./../utils/number').digits;\n\nvar isBigNumber = require('./../utils/bignumber/isBigNumber');\n\nvar isMatrix = require('./../utils/collection/isMatrix'); // returns a new instance of typed-function\n\n\nvar _createTyped = function createTyped() {\n  // initially, return the original instance of typed-function\n  // consecutively, return a new instance from typed.create.\n  _createTyped = typedFunction.create;\n  return typedFunction;\n};\n/**\n * Factory function for creating a new typed instance\n * @param {Object} type   Object with data types like Complex and BigNumber\n * @returns {Function}\n */\n\n\nexports.create = function create(type) {\n  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n  // type checks for all known types\n  //\n  // note that:\n  //\n  // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.\n  //   instanceof cannot be used because that would not allow to pass data from\n  //   one instance of math.js to another since each has it's own instance of Unit.\n  // - check the `isUnit` property via the constructor, so there will be no\n  //   matches for \"fake\" instances like plain objects with a property `isUnit`.\n  //   That is important for security reasons.\n  // - It must not be possible to override the type checks used internally,\n  //   for security reasons, so these functions are not exposed in the expression\n  //   parser.\n  type.isNumber = function (x) {\n    return typeof x === 'number';\n  };\n\n  type.isComplex = function (x) {\n    return type.Complex && x instanceof type.Complex || false;\n  };\n\n  type.isBigNumber = isBigNumber;\n\n  type.isFraction = function (x) {\n    return type.Fraction && x instanceof type.Fraction || false;\n  };\n\n  type.isUnit = function (x) {\n    return x && x.constructor.prototype.isUnit || false;\n  };\n\n  type.isString = function (x) {\n    return typeof x === 'string';\n  };\n\n  type.isArray = Array.isArray;\n  type.isMatrix = isMatrix;\n\n  type.isDenseMatrix = function (x) {\n    return x && x.isDenseMatrix && x.constructor.prototype.isMatrix || false;\n  };\n\n  type.isSparseMatrix = function (x) {\n    return x && x.isSparseMatrix && x.constructor.prototype.isMatrix || false;\n  };\n\n  type.isRange = function (x) {\n    return x && x.constructor.prototype.isRange || false;\n  };\n\n  type.isIndex = function (x) {\n    return x && x.constructor.prototype.isIndex || false;\n  };\n\n  type.isBoolean = function (x) {\n    return typeof x === 'boolean';\n  };\n\n  type.isResultSet = function (x) {\n    return x && x.constructor.prototype.isResultSet || false;\n  };\n\n  type.isHelp = function (x) {\n    return x && x.constructor.prototype.isHelp || false;\n  };\n\n  type.isFunction = function (x) {\n    return typeof x === 'function';\n  };\n\n  type.isDate = function (x) {\n    return x instanceof Date;\n  };\n\n  type.isRegExp = function (x) {\n    return x instanceof RegExp;\n  };\n\n  type.isObject = function (x) {\n    return _typeof(x) === 'object' && x.constructor === Object && !type.isComplex(x) && !type.isFraction(x);\n  };\n\n  type.isNull = function (x) {\n    return x === null;\n  };\n\n  type.isUndefined = function (x) {\n    return x === undefined;\n  };\n\n  type.isAccessorNode = function (x) {\n    return x && x.isAccessorNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isArrayNode = function (x) {\n    return x && x.isArrayNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isAssignmentNode = function (x) {\n    return x && x.isAssignmentNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isBlockNode = function (x) {\n    return x && x.isBlockNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isConditionalNode = function (x) {\n    return x && x.isConditionalNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isConstantNode = function (x) {\n    return x && x.isConstantNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isFunctionAssignmentNode = function (x) {\n    return x && x.isFunctionAssignmentNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isFunctionNode = function (x) {\n    return x && x.isFunctionNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isIndexNode = function (x) {\n    return x && x.isIndexNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isNode = function (x) {\n    return x && x.isNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isObjectNode = function (x) {\n    return x && x.isObjectNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isOperatorNode = function (x) {\n    return x && x.isOperatorNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isParenthesisNode = function (x) {\n    return x && x.isParenthesisNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isRangeNode = function (x) {\n    return x && x.isRangeNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isSymbolNode = function (x) {\n    return x && x.isSymbolNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isChain = function (x) {\n    return x && x.constructor.prototype.isChain || false;\n  }; // get a new instance of typed-function\n\n\n  var typed = _createTyped(); // define all types. The order of the types determines in which order function\n  // arguments are type-checked (so for performance it's important to put the\n  // most used types first).\n\n\n  typed.types = [{\n    name: 'number',\n    test: type.isNumber\n  }, {\n    name: 'Complex',\n    test: type.isComplex\n  }, {\n    name: 'BigNumber',\n    test: type.isBigNumber\n  }, {\n    name: 'Fraction',\n    test: type.isFraction\n  }, {\n    name: 'Unit',\n    test: type.isUnit\n  }, {\n    name: 'string',\n    test: type.isString\n  }, {\n    name: 'Array',\n    test: type.isArray\n  }, {\n    name: 'Matrix',\n    test: type.isMatrix\n  }, {\n    name: 'DenseMatrix',\n    test: type.isDenseMatrix\n  }, {\n    name: 'SparseMatrix',\n    test: type.isSparseMatrix\n  }, {\n    name: 'Range',\n    test: type.isRange\n  }, {\n    name: 'Index',\n    test: type.isIndex\n  }, {\n    name: 'boolean',\n    test: type.isBoolean\n  }, {\n    name: 'ResultSet',\n    test: type.isResultSet\n  }, {\n    name: 'Help',\n    test: type.isHelp\n  }, {\n    name: 'function',\n    test: type.isFunction\n  }, {\n    name: 'Date',\n    test: type.isDate\n  }, {\n    name: 'RegExp',\n    test: type.isRegExp\n  }, {\n    name: 'null',\n    test: type.isNull\n  }, {\n    name: 'undefined',\n    test: type.isUndefined\n  }, {\n    name: 'OperatorNode',\n    test: type.isOperatorNode\n  }, {\n    name: 'ConstantNode',\n    test: type.isConstantNode\n  }, {\n    name: 'SymbolNode',\n    test: type.isSymbolNode\n  }, {\n    name: 'ParenthesisNode',\n    test: type.isParenthesisNode\n  }, {\n    name: 'FunctionNode',\n    test: type.isFunctionNode\n  }, {\n    name: 'FunctionAssignmentNode',\n    test: type.isFunctionAssignmentNode\n  }, {\n    name: 'ArrayNode',\n    test: type.isArrayNode\n  }, {\n    name: 'AssignmentNode',\n    test: type.isAssignmentNode\n  }, {\n    name: 'BlockNode',\n    test: type.isBlockNode\n  }, {\n    name: 'ConditionalNode',\n    test: type.isConditionalNode\n  }, {\n    name: 'IndexNode',\n    test: type.isIndexNode\n  }, {\n    name: 'RangeNode',\n    test: type.isRangeNode\n  }, {\n    name: 'Node',\n    test: type.isNode\n  }, {\n    name: 'Object',\n    test: type.isObject // order 'Object' last, it matches on other classes too\n\n  }]; // TODO: add conversion from BigNumber to number?\n\n  typed.conversions = [{\n    from: 'number',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      // note: conversion from number to BigNumber can fail if x has >15 digits\n      if (digits(x) > 15) {\n        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');\n      }\n\n      return new type.BigNumber(x);\n    }\n  }, {\n    from: 'number',\n    to: 'Complex',\n    convert: function convert(x) {\n      return new type.Complex(x, 0);\n    }\n  }, {\n    from: 'number',\n    to: 'string',\n    convert: function convert(x) {\n      return x + '';\n    }\n  }, {\n    from: 'BigNumber',\n    to: 'Complex',\n    convert: function convert(x) {\n      return new type.Complex(x.toNumber(), 0);\n    }\n  }, {\n    from: 'Fraction',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');\n    }\n  }, {\n    from: 'Fraction',\n    to: 'Complex',\n    convert: function convert(x) {\n      return new type.Complex(x.valueOf(), 0);\n    }\n  }, {\n    from: 'number',\n    to: 'Fraction',\n    convert: function convert(x) {\n      var f = new type.Fraction(x);\n\n      if (f.valueOf() !== x) {\n        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');\n      }\n\n      return new type.Fraction(x);\n    }\n  }, {\n    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n    //  from: 'Fraction',\n    //  to: 'number',\n    //  convert: function (x) {\n    //    return x.valueOf()\n    //  }\n    // }, {\n    from: 'string',\n    to: 'number',\n    convert: function convert(x) {\n      var n = Number(x);\n\n      if (isNaN(n)) {\n        throw new Error('Cannot convert \"' + x + '\" to a number');\n      }\n\n      return n;\n    }\n  }, {\n    from: 'string',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      try {\n        return new type.BigNumber(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to BigNumber');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Fraction',\n    convert: function convert(x) {\n      try {\n        return new type.Fraction(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Fraction');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Complex',\n    convert: function convert(x) {\n      try {\n        return new type.Complex(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Complex');\n      }\n    }\n  }, {\n    from: 'boolean',\n    to: 'number',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'boolean',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      return new type.BigNumber(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'Fraction',\n    convert: function convert(x) {\n      return new type.Fraction(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'string',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'Array',\n    to: 'Matrix',\n    convert: function convert(array) {\n      return new type.DenseMatrix(array);\n    }\n  }, {\n    from: 'Matrix',\n    to: 'Array',\n    convert: function convert(matrix) {\n      return matrix.valueOf();\n    }\n  }];\n  return typed;\n};","'use strict';\n\nvar format = require('../../utils/string').format;\n\nvar escapeLatex = require('../../utils/latex').escape;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var getType = load(require('../../function/utils/typeof'));\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (arguments.length === 2) {\n      // TODO: remove deprecation error some day (created 2018-01-23)\n      throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs\n\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n  ;\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return format(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch (getType(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch (getType(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        var index = value.toLowerCase().indexOf('e');\n\n        if (index !== -1) {\n          return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n        }\n\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}\n\nexports.name = 'ConstantNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar forEach = require('../../utils/array').forEach;\n\nvar map = require('../../utils/array').map;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var ResultSet = load(require('../../type/resultset/ResultSet'));\n  /**\n   * @constructor BlockNode\n   * @extends {Node}\n   * Holds a set with blocks\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n   *            An array with blocks, where a block is constructed as an Object\n   *            with properties block, which is a Node, and visible, which is\n   *            a boolean. The property visible is optional and is true by default\n   */\n\n  function BlockNode(blocks) {\n    if (!(this instanceof BlockNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input, copy blocks\n\n\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\n    this.blocks = blocks.map(function (block) {\n      var node = block && block.node;\n      var visible = block && block.visible !== undefined ? block.visible : true;\n      if (!type.isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n      return {\n        node: node,\n        visible: visible\n      };\n    });\n  }\n\n  BlockNode.prototype = new Node();\n  BlockNode.prototype.type = 'BlockNode';\n  BlockNode.prototype.isBlockNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  BlockNode.prototype._compile = function (math, argNames) {\n    var evalBlocks = map(this.blocks, function (block) {\n      return {\n        eval: block.node._compile(math, argNames),\n        visible: block.visible\n      };\n    });\n    return function evalBlockNodes(scope, args, context) {\n      var results = [];\n      forEach(evalBlocks, function evalBlockNode(block) {\n        var result = block.eval(scope, args, context);\n\n        if (block.visible) {\n          results.push(result);\n        }\n      });\n      return new ResultSet(results);\n    };\n  };\n  /**\n   * Execute a callback for each of the child blocks of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  BlockNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.blocks.length; i++) {\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n    }\n  };\n  /**\n   * Create a new BlockNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {BlockNode} Returns a transformed copy of the node\n   */\n\n\n  BlockNode.prototype.map = function (callback) {\n    var blocks = [];\n\n    for (var i = 0; i < this.blocks.length; i++) {\n      var block = this.blocks[i];\n\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\n      blocks[i] = {\n        node: node,\n        visible: block.visible\n      };\n    }\n\n    return new BlockNode(blocks);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {BlockNode}\n   */\n\n\n  BlockNode.prototype.clone = function () {\n    var blocks = this.blocks.map(function (block) {\n      return {\n        node: block.node,\n        visible: block.visible\n      };\n    });\n    return new BlockNode(blocks);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype._toString = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toString(options) + (param.visible ? '' : ';');\n    }).join('\\n');\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  BlockNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'BlockNode',\n      blocks: this.blocks\n    };\n  };\n  /**\n   * Instantiate an BlockNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n   *                       where mathjs is optional\n   * @returns {BlockNode}\n   */\n\n\n  BlockNode.fromJSON = function (json) {\n    return new BlockNode(json.blocks);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype.toHTML = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n    }).join('<span class=\"math-separator\"><br /></span>');\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  BlockNode.prototype._toTex = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toTex(options) + (param.visible ? '' : ';');\n    }).join('\\\\;\\\\;\\n');\n  };\n\n  return BlockNode;\n}\n\nexports.name = 'BlockNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var parse = load(require('../parse'));\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval().\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.parse(expr)\n   *     math.parse(expr, options)\n   *     math.parse([expr1, expr2, expr3, ...])\n   *     math.parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     const node1 = math.parse('sqrt(3^2 + 4^2)')\n   *     node1.compile().eval() // 5\n   *\n   *     let scope = {a:3, b:4}\n   *     const node2 = math.parse('a * b') // 12\n   *     const code2 = node2.compile()\n   *     code2.eval(scope) // 12\n   *     scope.a = 5\n   *     code2.eval(scope) // 20\n   *\n   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].compile().eval() // 12\n   *\n   * See also:\n   *\n   *     eval, compile\n   *\n   * @param {string | string[] | Matrix} expr          Expression to be parsed\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n\n  return typed('parse', {\n    'string | Array | Matrix': parse,\n    'string | Array | Matrix, Object': parse\n  });\n}\n\nexports.name = 'parse';\nexports.factory = factory;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n\n  var smaller = typed('smaller', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x < y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === -1;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return smaller(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, smaller);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, smaller, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, smaller, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, smaller);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return smaller(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, smaller, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, smaller, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, smaller, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, smaller, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smaller, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smaller, true).valueOf();\n    }\n  });\n  smaller.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['smaller'], \"${args[1]}\\\\right)\")\n  };\n  return smaller;\n}\n\nexports.name = 'smaller';\nexports.factory = factory;","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n\n  var xor = typed('xor', {\n    'number, number': function numberNumber(x, y) {\n      return !!x !== !!y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return xor(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, xor);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, xor, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, xor, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, xor);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return xor(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, xor, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, xor, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, xor, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, xor, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, xor, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, xor, true).valueOf();\n    }\n  });\n  xor.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['xor'], \"${args[1]}\\\\right)\")\n  };\n  return xor;\n}\n\nexports.name = 'xor';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm11 = function algorithm11(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k]; // invoke callback\n\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\n\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    } // update ptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm11;\n}\n\nexports.name = 'algorithm11';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n\n  var or = typed('or', {\n    'number, number': function numberNumber(x, y) {\n      return !!(x || y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return or(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, or);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, or, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, or, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, or);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return or(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return or(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return or(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, or, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, or, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, or, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, or, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, or, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, or, true).valueOf();\n    }\n  });\n  or.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['or'], \"${args[1]}\\\\right)\")\n  };\n  return or;\n}\n\nexports.name = 'or';\nexports.factory = factory;","'use strict';\n\nvar util = require('../../utils/index');\n\nvar string = util.string;\nvar isString = string.isString;\n\nfunction factory(type, config, load, typed) {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *\n   *     let matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *\n   *     let matrix = math.matrix([[1, 2], [3, 4]])\n   *     matix.size()              // [2, 2]\n   *     matrix.resize([3, 2], 5)\n   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n  /**\n   * Get the Matrix storage constructor for the given format.\n   *\n   * @param {string} format       The Matrix storage format.\n   *\n   * @return {Function}           The Matrix storage constructor.\n   */\n\n  Matrix.storage = function (format) {\n    // check storage format is a string\n    if (!isString(format)) {\n      throw new TypeError('format must be a string value');\n    } // get storage format constructor\n\n\n    var constructor = Matrix._storage[format];\n\n    if (!constructor) {\n      throw new SyntaxError('Unsupported matrix storage format: ' + format);\n    } // return storage constructor\n\n\n    return constructor;\n  }; // a map with all constructors for all storage types\n\n\n  Matrix._storage = {};\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n\n\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n\n\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n\n\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n\n\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n\n\n  Matrix.prototype.size = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n\n\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  }; // exports\n\n\n  return Matrix;\n}\n\nexports.name = 'Matrix';\nexports.path = 'type';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n   * @private\n   */\n  var multiplyScalar = typed('multiplyScalar', {\n    'number, number': function numberNumber(x, y) {\n      return x * y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n  return multiplyScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar keywords = require('../keywords');\n\nvar escape = require('../../utils/string').escape;\n\nvar forEach = require('../../utils/array').forEach;\n\nvar join = require('../../utils/array').join;\n\nvar latex = require('../../utils/latex');\n\nvar operators = require('../operators');\n\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor FunctionAssignmentNode\n   * @extends {Node}\n   * Function assignment\n   *\n   * @param {string} name           Function name\n   * @param {string[] | Array.<{name: string, type: string}>} params\n   *                                Array with function parameter names, or an\n   *                                array with objects containing the name\n   *                                and type of the parameter\n   * @param {Node} expr             The function expression\n   */\n\n  function FunctionAssignmentNode(name, params, expr) {\n    if (!(this instanceof FunctionAssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n    if (!type.isNode(expr)) throw new TypeError('Node expected for parameter \"expr\"');\n    if (name in keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n    this.name = name;\n    this.params = params.map(function (param) {\n      return param && param.name || param;\n    });\n    this.types = params.map(function (param) {\n      return param && param.type || 'any';\n    });\n    this.expr = expr;\n  }\n\n  FunctionAssignmentNode.prototype = new Node();\n  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';\n  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionAssignmentNode.prototype._compile = function (math, argNames) {\n    var childArgNames = Object.create(argNames);\n    forEach(this.params, function (param) {\n      childArgNames[param] = true;\n    }); // compile the function expression with the child args\n\n    var evalExpr = this.expr._compile(math, childArgNames);\n\n    var name = this.name;\n    var params = this.params;\n    var signature = join(this.types, ',');\n    var syntax = name + '(' + join(this.params, ', ') + ')';\n    return function evalFunctionAssignmentNode(scope, args, context) {\n      var signatures = {};\n\n      signatures[signature] = function () {\n        var childArgs = Object.create(args);\n\n        for (var i = 0; i < params.length; i++) {\n          childArgs[params[i]] = arguments[i];\n        }\n\n        return evalExpr(scope, childArgs, context);\n      };\n\n      var fn = typed(name, signatures);\n      fn.syntax = syntax;\n      setSafeProperty(scope, name, fn);\n      return fn;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionAssignmentNode.prototype.forEach = function (callback) {\n    callback(this.expr, 'expr', this);\n  };\n  /**\n   * Create a new FunctionAssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionAssignmentNode.prototype.map = function (callback) {\n    var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionAssignmentNode}\n   */\n\n\n  FunctionAssignmentNode.prototype.clone = function () {\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n  };\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toString(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '(' + expr + ')';\n    }\n\n    return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionAssignmentNode.prototype.toJSON = function () {\n    var types = this.types;\n    return {\n      mathjs: 'FunctionAssignmentNode',\n      name: this.name,\n      params: this.params.map(function (param, index) {\n        return {\n          name: param,\n          type: types[index]\n        };\n      }),\n      expr: this.expr\n    };\n  };\n  /**\n   * Instantiate an FunctionAssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionAssignmentNode\", name: ..., params: ..., expr: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionAssignmentNode}\n   */\n\n\n  FunctionAssignmentNode.fromJSON = function (json) {\n    return new FunctionAssignmentNode(json.name, json.params, json.expr);\n  };\n  /**\n   * get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var params = [];\n\n    for (var i = 0; i < this.params.length; i++) {\n      params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n    }\n\n    var expr = this.expr.toHTML(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span><span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n  };\n  /**\n   * get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toTex(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n    }\n\n    return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(latex.toSymbol).join(',') + '\\\\right):=' + expr;\n  };\n\n  return FunctionAssignmentNode;\n}\n\nexports.name = 'FunctionAssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","'use strict';\n/**\n * Test whether a value is a BigNumber\n * @param {*} x\n * @return {boolean}\n */\n\nmodule.exports = function isBigNumber(x) {\n  return x && x.constructor.prototype.isBigNumber || false;\n};","'use strict';\n/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\n\nmodule.exports = function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  } // use \"==\" operator, handles infinities\n\n\n  if (x.eq(y)) {\n    return true;\n  } // NaN\n\n\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n};","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory(type, config, load, typed) {\n  var divideScalar = load(require('./divideScalar'));\n  var multiply = load(require('./multiply'));\n  var inv = load(require('../matrix/inv'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  var divide = typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n  divide.toTex = {\n    2: \"\\\\frac{${args[0]}}{${args[1]}}\"\n  };\n  return divide;\n}\n\nexports.name = 'divide';\nexports.factory = factory;","'use strict';\n\nvar arraySize = require('../array').size;\n\nvar isMatrix = require('../collection/isMatrix');\n\nvar IndexError = require('../../error/IndexError');\n/**\n * Reduce a given matrix or array to a new matrix or\n * array with one less dimension, applying the given\n * callback in the selected dimension.\n * @param {Array | Matrix} mat\n * @param {number} dim\n * @param {Function} callback\n * @return {Array | Matrix} res\n */\n\n\nmodule.exports = function (mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n\n  if (dim < 0 || dim >= size.length) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n\n  if (isMatrix(mat)) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback));\n  } else {\n    return _reduce(mat, dim, callback);\n  }\n};\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\n\n\nfunction _reduce(mat, dim, callback) {\n  var i, ret, val, tran;\n\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      val = mat[0];\n\n      for (i = 1; i < mat.length; i++) {\n        val = callback(val, mat[i]);\n      }\n\n      return val;\n    } else {\n      tran = _switch(mat);\n      ret = [];\n\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _reduce(tran[i], dim - 1, callback);\n      }\n\n      return ret;\n    }\n  } else {\n    ret = [];\n\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _reduce(mat[i], dim - 1, callback);\n    }\n\n    return ret;\n  }\n}\n/**\n * Transpose a matrix\n * @param {Array} mat\n * @returns {Array} ret\n * @private\n */\n\n\nfunction _switch(mat) {\n  var I = mat.length;\n  var J = mat[0].length;\n  var i, j;\n  var ret = [];\n\n  for (j = 0; j < J; j++) {\n    var tmp = [];\n\n    for (i = 0; i < I; i++) {\n      tmp.push(mat[i][j]);\n    }\n\n    ret.push(tmp);\n  }\n\n  return ret;\n}","module.exports = __WEBPACK_EXTERNAL_MODULE_sGQ9__;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.size = size;\nexports.validate = validate;\nexports.validateIndex = validateIndex;\nexports.resize = resize;\nexports.reshape = reshape;\nexports.squeeze = squeeze;\nexports.unsqueeze = unsqueeze;\nexports.flatten = flatten;\nexports.map = map;\nexports.forEach = forEach;\nexports.filter = filter;\nexports.filterRegExp = filterRegExp;\nexports.join = join;\nexports.identify = identify;\nexports.generalize = generalize;\n\nvar _number = _interopRequireDefault(require(\"./number\"));\n\nvar _string = _interopRequireDefault(require(\"./string\"));\n\nvar _DimensionError = _interopRequireDefault(require(\"../error/DimensionError\"));\n\nvar _IndexError = _interopRequireDefault(require(\"../error/IndexError\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calculate the size of a multi dimensional array.\n * This function checks the size of the first entry, it does not validate\n * whether all dimensions match. (use function `validate` for that)\n * @param {Array} x\n * @Return {Number[]} size\n */\nfunction size(x) {\n  var s = [];\n\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n\n  return s;\n}\n/**\n * Recursively validate whether each element in a multi dimensional array\n * has a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @param {number} dim   Current dimension\n * @throws DimensionError\n * @private\n */\n\n\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n\n  if (len !== size[dim]) {\n    throw new _DimensionError.default(len, size[dim]);\n  }\n\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n\n      if (!Array.isArray(child)) {\n        throw new _DimensionError.default(size.length - 1, size.length, '<');\n      }\n\n      _validate(array[i], size, dimNext);\n    }\n  } else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new _DimensionError.default(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n/**\n * Validate whether each element in a multi dimensional array has\n * a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @throws DimensionError\n */\n\n\nfunction validate(array, size) {\n  var isScalar = size.length === 0;\n\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new _DimensionError.default(array.length, 0);\n    }\n  } else {\n    // array\n    _validate(array, size, 0);\n  }\n}\n/**\n * Test whether index is an integer number with index >= 0 and index < length\n * when length is provided\n * @param {number} index    Zero-based index\n * @param {number} [length] Length of the array\n */\n\n\nfunction validateIndex(index, length) {\n  if (!_number.default.isNumber(index) || !_number.default.isInteger(index)) {\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\n  }\n\n  if (index < 0 || typeof length === 'number' && index >= length) {\n    throw new _IndexError.default(index, length);\n  }\n}\n/**\n * Resize a multi dimensional array. The resized array is returned.\n * @param {Array} array         Array to be resized\n * @param {Array.<number>} size Array with the size of each dimension\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n *                              zero by default. Specify for example `null`,\n *                              to clearly see entries that are not explicitly\n *                              set.\n * @return {Array} array         The resized array\n */\n\n\nfunction resize(array, size, defaultValue) {\n  // TODO: add support for scalars, having size=[] ?\n  // check the type of the arguments\n  if (!Array.isArray(array) || !Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  } // check whether size contains positive integers\n\n\n  size.forEach(function (value) {\n    if (!_number.default.isNumber(value) || !_number.default.isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + _string.default.format(size) + ')');\n    }\n  }); // recursively resize the array\n\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\n\n  _resize(array, size, 0, _defaultValue);\n\n  return array;\n}\n/**\n * Recursively resize a multi dimensional array\n * @param {Array} array         Array to be resized\n * @param {number[]} size       Array with the size of each dimension\n * @param {number} dim          Current dimension\n * @param {*} [defaultValue]    Value to be filled in in new entries,\n *                              undefined by default.\n * @private\n */\n\n\nfunction _resize(array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen); // apply new length\n\n  array.length = newLen;\n\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1; // resize existing child arrays\n\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n\n        array[i] = elem;\n      }\n\n      _resize(elem, size, dimNext, defaultValue);\n    } // create new child arrays\n\n\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem; // resize new child array\n\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  } else {\n    // last dimension\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    } // fill new elements with the default value\n\n\n    for (i = minLen; i < newLen; i++) {\n      array[i] = defaultValue;\n    }\n  }\n}\n/**\n * Re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\n\n\nfunction reshape(array, sizes) {\n  var flatArray = flatten(array);\n  var newArray;\n\n  function product(arr) {\n    return arr.reduce(function (prev, curr) {\n      return prev * curr;\n    });\n  }\n\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (sizes.length === 0) {\n    throw new _DimensionError.default(0, product(size(array)), '!=');\n  }\n\n  var totalSize = 1;\n\n  for (var sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {\n    totalSize *= sizes[sizeIndex];\n  }\n\n  if (flatArray.length !== totalSize) {\n    throw new _DimensionError.default(product(sizes), product(size(array)), '!=');\n  }\n\n  try {\n    newArray = _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof _DimensionError.default) {\n      throw new _DimensionError.default(product(sizes), product(size(array)), '!=');\n    }\n\n    throw e;\n  }\n\n  return newArray;\n}\n/**\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n */\n\n\nfunction _reshape(array, sizes) {\n  // testing if there are enough elements for the requested shape\n  var tmpArray = array;\n  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one\n\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\n    var size = sizes[sizeIndex];\n    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size\n\n    var length = tmpArray.length / size;\n\n    for (var i = 0; i < length; i++) {\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\n    } // set it as the new tmpArray for the next loop turn or for return\n\n\n    tmpArray = tmpArray2;\n  }\n\n  return tmpArray;\n}\n/**\n * Squeeze a multi dimensional array\n * @param {Array} array\n * @param {Array} [arraySize]\n * @returns {Array} returns the array itself\n */\n\n\nfunction squeeze(array, arraySize) {\n  var s = arraySize || size(array); // squeeze outer dimensions\n\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  } // find the first dimension to be squeezed\n\n\n  var dims = s.length;\n\n  while (s[dims - 1] === 1) {\n    dims--;\n  } // squeeze inner dimensions\n\n\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n\n  return array;\n}\n/**\n * Recursively squeeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\n\nfunction _squeeze(array, dims, dim) {\n  var i, ii;\n\n  if (dim < dims) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  } else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n\n  return array;\n}\n/**\n * Unsqueeze a multi dimensional array: add dimensions when missing\n *\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n *\n * @param {Array} array\n * @param {number} dims       Desired number of dimensions of the array\n * @param {number} [outer]    Number of outer dimensions to be added\n * @param {Array} [arraySize] Current size of array.\n * @returns {Array} returns the array itself\n * @private\n */\n\n\nfunction unsqueeze(array, dims, outer, arraySize) {\n  var s = arraySize || size(array); // unsqueeze outer dimensions\n\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  } // unsqueeze inner dimensions\n\n\n  array = _unsqueeze(array, dims, 0);\n\n  while (s.length < dims) {\n    s.push(1);\n  }\n\n  return array;\n}\n/**\n * Recursively unsqueeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\n\nfunction _unsqueeze(array, dims, dim) {\n  var i, ii;\n\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  } else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n\n  return array;\n}\n/**\n * Flatten a multi dimensional array, put all elements in a one dimensional\n * array\n * @param {Array} array   A multi dimensional array\n * @return {Array}        The flattened array (1 dimensional)\n */\n\n\nfunction flatten(array) {\n  if (!Array.isArray(array)) {\n    // if not an array, return as is\n    return array;\n  }\n\n  var flat = [];\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback); // traverse through sub-arrays recursively\n    } else {\n      flat.push(value);\n    }\n  });\n  return flat;\n}\n/**\n * A safe map\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction map(array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n/**\n * A safe forEach\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction forEach(array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n/**\n * A safe filter\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction filter(array, callback) {\n  if (size(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, callback);\n}\n/**\n * Filter values in a callback given a regular expression\n * @param {Array} array\n * @param {RegExp} regexp\n * @return {Array} Returns the filtered array\n * @private\n */\n\n\nfunction filterRegExp(array, regexp) {\n  if (size(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, function (entry) {\n    return regexp.test(entry);\n  });\n}\n/**\n * A safe join\n * @param {Array} array\n * @param {string} separator\n */\n\n\nfunction join(array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n/**\n * Assign a numeric identifier to every element of a sorted array\n * @param {Array} a  An array\n * @return {Array} An array of objects containing the original value and its identifier\n */\n\n\nfunction identify(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n  var count = 0;\n  b[0] = {\n    value: a[0],\n    identifier: 0\n  };\n\n  for (var i = 1; i < a.length; i++) {\n    if (a[i] === a[i - 1]) {\n      count++;\n    } else {\n      count = 0;\n    }\n\n    b.push({\n      value: a[i],\n      identifier: count\n    });\n  }\n\n  return b;\n}\n/**\n * Remove the numeric identifier from the elements\n * @param {array} a  An array\n * @return {array} An array of values without identifiers\n */\n\n\nfunction generalize(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n\n  for (var i = 0; i < a.length; i++) {\n    b.push(a[i].value);\n  }\n\n  return b;\n}","'use strict';\n\nvar operators = require('../operators');\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor RangeNode\n   * @extends {Node}\n   * create a range\n   * @param {Node} start  included lower-bound\n   * @param {Node} end    included upper-bound\n   * @param {Node} [step] optional step\n   */\n\n  function RangeNode(start, end, step) {\n    if (!(this instanceof RangeNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate inputs\n\n\n    if (!type.isNode(start)) throw new TypeError('Node expected');\n    if (!type.isNode(end)) throw new TypeError('Node expected');\n    if (step && !type.isNode(step)) throw new TypeError('Node expected');\n    if (arguments.length > 3) throw new Error('Too many arguments');\n    this.start = start; // included lower-bound\n\n    this.end = end; // included upper-bound\n\n    this.step = step || null; // optional step\n  }\n\n  RangeNode.prototype = new Node();\n  RangeNode.prototype.type = 'RangeNode';\n  RangeNode.prototype.isRangeNode = true;\n  /**\n   * Check whether the RangeNode needs the `end` symbol to be defined.\n   * This end is the size of the Matrix in current dimension.\n   * @return {boolean}\n   */\n\n  RangeNode.prototype.needsEnd = function () {\n    // find all `end` symbols in this RangeNode\n    var endSymbols = this.filter(function (node) {\n      return type.isSymbolNode(node) && node.name === 'end';\n    });\n    return endSymbols.length > 0;\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  RangeNode.prototype._compile = function (math, argNames) {\n    var range = math.range;\n\n    var evalStart = this.start._compile(math, argNames);\n\n    var evalEnd = this.end._compile(math, argNames);\n\n    if (this.step) {\n      var evalStep = this.step._compile(math, argNames);\n\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));\n      };\n    } else {\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  RangeNode.prototype.forEach = function (callback) {\n    callback(this.start, 'start', this);\n    callback(this.end, 'end', this);\n\n    if (this.step) {\n      callback(this.step, 'step', this);\n    }\n  };\n  /**\n   * Create a new RangeNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RangeNode} Returns a transformed copy of the node\n   */\n\n\n  RangeNode.prototype.map = function (callback) {\n    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RangeNode}\n   */\n\n\n  RangeNode.prototype.clone = function () {\n    return new RangeNode(this.start, this.end, this.step && this.step);\n  };\n  /**\n   * Calculate the necessary parentheses\n   * @param {Node} node\n   * @param {string} parenthesis\n   * @return {Object} parentheses\n   * @private\n   */\n\n\n  function calculateNecessaryParentheses(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var parens = {};\n    var startPrecedence = operators.getPrecedence(node.start, parenthesis);\n    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';\n\n    if (node.step) {\n      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);\n      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';\n    }\n\n    var endPrecedence = operators.getPrecedence(node.end, parenthesis);\n    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';\n    return parens;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toString(options);\n\n    if (parens.start) {\n      start = '(' + start + ')';\n    }\n\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toString(options);\n\n      if (parens.step) {\n        step = '(' + step + ')';\n      }\n\n      str += ':' + step;\n    }\n\n    var end = this.end.toString(options);\n\n    if (parens.end) {\n      end = '(' + end + ')';\n    }\n\n    str += ':' + end;\n    return str;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  RangeNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'RangeNode',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n  /**\n   * Instantiate an RangeNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"RangeNode\", \"start\": ..., \"end\": ..., \"step\": ...}`,\n   *                       where mathjs is optional\n   * @returns {RangeNode}\n   */\n\n\n  RangeNode.fromJSON = function (json) {\n    return new RangeNode(json.start, json.end, json.step);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toHTML(options);\n\n    if (parens.start) {\n      start = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + start + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toHTML(options);\n\n      if (parens.step) {\n        step = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + step + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      str += '<span class=\"math-operator math-range-operator\">:</span>' + step;\n    }\n\n    var end = this.end.toHTML(options);\n\n    if (parens.end) {\n      end = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + end + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    str += '<span class=\"math-operator math-range-operator\">:</span>' + end;\n    return str;\n  };\n  /**\n   * Get LaTeX representation\n   * @params {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n    var str = this.start.toTex(options);\n\n    if (parens.start) {\n      str = \"\\\\left(\".concat(str, \"\\\\right)\");\n    }\n\n    if (this.step) {\n      var step = this.step.toTex(options);\n\n      if (parens.step) {\n        step = \"\\\\left(\".concat(step, \"\\\\right)\");\n      }\n\n      str += ':' + step;\n    }\n\n    var end = this.end.toTex(options);\n\n    if (parens.end) {\n      end = \"\\\\left(\".concat(end, \"\\\\right)\");\n    }\n\n    str += ':' + end;\n    return str;\n  };\n\n  return RangeNode;\n}\n\nexports.name = 'RangeNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Determine the type of a variable.\n   *\n   * Function `typeof` recognizes the following types of objects:\n   *\n   * Object                 | Returns       | Example\n   * ---------------------- | ------------- | ------------------------------------------\n   * null                   | `'null'`      | `math.typeof(null)`\n   * number                 | `'number'`    | `math.typeof(3.5)`\n   * boolean                | `'boolean'`   | `math.typeof(true)`\n   * string                 | `'string'`    | `math.typeof('hello world')`\n   * Array                  | `'Array'`     | `math.typeof([1, 2, 3])`\n   * Date                   | `'Date'`      | `math.typeof(new Date())`\n   * Function               | `'Function'`  | `math.typeof(function () {})`\n   * Object                 | `'Object'`    | `math.typeof({a: 2, b: 3})`\n   * RegExp                 | `'RegExp'`    | `math.typeof(/a regexp/)`\n   * undefined              | `'undefined'` | `math.typeof(undefined)`\n   * math.type.BigNumber    | `'BigNumber'` | `math.typeof(math.bignumber('2.3e500'))`\n   * math.type.Chain        | `'Chain'`     | `math.typeof(math.chain(2))`\n   * math.type.Complex      | `'Complex'`   | `math.typeof(math.complex(2, 3))`\n   * math.type.Fraction     | `'Fraction'`  | `math.typeof(math.fraction(1, 3))`\n   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`\n   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`\n   * math.type.Index        | `'Index'`     | `math.typeof(math.index(1, 3))`\n   * math.type.Matrix       | `'Matrix'`    | `math.typeof(math.matrix([[1,2], [3, 4]]))`\n   * math.type.Range        | `'Range'`     | `math.typeof(math.range(0, 10))`\n   * math.type.ResultSet    | `'ResultSet'` | `math.typeof(math.eval('a=2\\nb=3'))`\n   * math.type.Unit         | `'Unit'`      | `math.typeof(math.unit('45 deg'))`\n   * math.expression.node&#8203;.AccessorNode            | `'AccessorNode'`            | `math.typeof(math.parse('A[2]'))`\n   * math.expression.node&#8203;.ArrayNode               | `'ArrayNode'`               | `math.typeof(math.parse('[1,2,3]'))`\n   * math.expression.node&#8203;.AssignmentNode          | `'AssignmentNode'`          | `math.typeof(math.parse('x=2'))`\n   * math.expression.node&#8203;.BlockNode               | `'BlockNode'`               | `math.typeof(math.parse('a=2; b=3'))`\n   * math.expression.node&#8203;.ConditionalNode         | `'ConditionalNode'`         | `math.typeof(math.parse('x<0 ? -x : x'))`\n   * math.expression.node&#8203;.ConstantNode            | `'ConstantNode'`            | `math.typeof(math.parse('2.3'))`\n   * math.expression.node&#8203;.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeof(math.parse('f(x)=x^2'))`\n   * math.expression.node&#8203;.FunctionNode            | `'FunctionNode'`            | `math.typeof(math.parse('sqrt(4)'))`\n   * math.expression.node&#8203;.IndexNode               | `'IndexNode'`               | `math.typeof(math.parse('A[2]').index)`\n   * math.expression.node&#8203;.ObjectNode              | `'ObjectNode'`              | `math.typeof(math.parse('{a:2}'))`\n   * math.expression.node&#8203;.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeof(math.parse('(2+3)'))`\n   * math.expression.node&#8203;.RangeNode               | `'RangeNode'`               | `math.typeof(math.parse('1:10'))`\n   * math.expression.node&#8203;.SymbolNode              | `'SymbolNode'`              | `math.typeof(math.parse('x'))`\n   *\n   * Syntax:\n   *\n   *    math.typeof(x)\n   *\n   * Examples:\n   *\n   *    math.typeof(3.5)                     // returns 'number'\n   *    math.typeof(math.complex('2-4i'))    // returns 'Complex'\n   *    math.typeof(math.unit('45 deg'))     // returns 'Unit'\n   *    math.typeof('hello world')           // returns 'string'\n   *\n   * @param {*} x     The variable for which to test the type.\n   * @return {string} Returns the name of the type. Primitive types are lower case,\n   *                  non-primitive types are upper-camel-case.\n   *                  For example 'number', 'string', 'Array', 'Date'.\n   */\n  var _typeof = typed('_typeof', {\n    'any': function any(x) {\n      var t = _typeof2(x);\n\n      if (t === 'object') {\n        // JavaScript types\n        if (x === null) return 'null';\n        if (Array.isArray(x)) return 'Array';\n        if (x instanceof Date) return 'Date';\n        if (x instanceof RegExp) return 'RegExp'; // math.js types\n\n        if (type.isBigNumber(x)) return 'BigNumber';\n        if (type.isComplex(x)) return 'Complex';\n        if (type.isFraction(x)) return 'Fraction';\n        if (type.isMatrix(x)) return 'Matrix';\n        if (type.isUnit(x)) return 'Unit';\n        if (type.isIndex(x)) return 'Index';\n        if (type.isRange(x)) return 'Range';\n        if (type.isResultSet(x)) return 'ResultSet';\n        if (type.isNode(x)) return x.type;\n        if (type.isChain(x)) return 'Chain';\n        if (type.isHelp(x)) return 'Help';\n        return 'Object';\n      }\n\n      if (t === 'function') return 'Function';\n      return t; // can be 'string', 'number', 'boolean', ...\n    }\n  });\n\n  _typeof.toTex = undefined; // use default template\n\n  return _typeof;\n}\n\nexports.name = 'typeof';\nexports.factory = factory;","'use strict';\n\nvar latex = require('../../utils/latex');\n\nvar map = require('../../utils/array').map;\n\nvar escape = require('../../utils/string').escape;\n\nvar isSafeMethod = require('../../utils/customs').isSafeMethod;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nvar operators = require('../operators');\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor OperatorNode\n   * @extends {Node}\n   * An operator with two arguments, like 2+3\n   *\n   * @param {string} op           Operator name, for example '+'\n   * @param {string} fn           Function name, for example 'add'\n   * @param {Node[]} args         Operator arguments\n   * @param {boolean} [implicit]  Is this an implicit multiplication?\n   */\n\n  function OperatorNode(op, fn, args, implicit) {\n    if (!(this instanceof OperatorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof op !== 'string') {\n      throw new TypeError('string expected for parameter \"op\"');\n    }\n\n    if (typeof fn !== 'string') {\n      throw new TypeError('string expected for parameter \"fn\"');\n    }\n\n    if (!Array.isArray(args) || !args.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.implicit = implicit === true;\n    this.op = op;\n    this.fn = fn;\n    this.args = args || [];\n  }\n\n  OperatorNode.prototype = new Node();\n  OperatorNode.prototype.type = 'OperatorNode';\n  OperatorNode.prototype.isOperatorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  OperatorNode.prototype._compile = function (math, argNames) {\n    // validate fn\n    if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {\n      if (!math[this.fn]) {\n        throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n      } else {\n        throw new Error('No access to function \"' + this.fn + '\"');\n      }\n    }\n\n    var fn = getSafeProperty(math, this.fn);\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (evalArgs.length === 1) {\n      var evalArg0 = evalArgs[0];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(evalArg0(scope, args, context));\n      };\n    } else if (evalArgs.length === 2) {\n      var _evalArg = evalArgs[0];\n      var evalArg1 = evalArgs[1];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n      };\n    } else {\n      return function evalOperatorNode(scope, args, context) {\n        return fn.apply(null, map(evalArgs, function (evalArg) {\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  OperatorNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new OperatorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  OperatorNode.prototype.map = function (callback) {\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new OperatorNode(this.op, this.fn, args, this.implicit);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {OperatorNode}\n   */\n\n\n  OperatorNode.prototype.clone = function () {\n    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);\n  };\n  /**\n   * Check whether this is an unary OperatorNode:\n   * has exactly one argument, like `-a`.\n   * @return {boolean} Returns true when an unary operator node, false otherwise.\n   */\n\n\n  OperatorNode.prototype.isUnary = function () {\n    return this.args.length === 1;\n  };\n  /**\n   * Check whether this is a binary OperatorNode:\n   * has exactly two arguments, like `a + b`.\n   * @return {boolean} Returns true when a binary operator node, false otherwise.\n   */\n\n\n  OperatorNode.prototype.isBinary = function () {\n    return this.args.length === 2;\n  };\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n\n\n  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {\n    // precedence of the root OperatorNode\n    var precedence = operators.getPrecedence(root, parenthesis);\n    var associativity = operators.getAssociativity(root, parenthesis);\n\n    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {\n      var parens = args.map(function (arg) {\n        switch (arg.getContent().type) {\n          // Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n\n          default:\n            return true;\n        }\n      });\n      return parens;\n    }\n\n    var result;\n\n    switch (args.length) {\n      case 0:\n        result = [];\n        break;\n\n      case 1:\n        // unary operators\n        // precedence of the operand\n        var operandPrecedence = operators.getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n        if (latex && operandPrecedence !== null) {\n          var operandIdentifier;\n          var rootIdentifier;\n\n          if (parenthesis === 'keep') {\n            operandIdentifier = args[0].getIdentifier();\n            rootIdentifier = root.getIdentifier();\n          } else {\n            // Ignore Parenthesis Nodes when not in 'keep' mode\n            operandIdentifier = args[0].getContent().getIdentifier();\n            rootIdentifier = root.getContent().getIdentifier();\n          }\n\n          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {\n            result = [false];\n            break;\n          }\n\n          if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {\n            result = [false];\n            break;\n          }\n        }\n\n        if (operandPrecedence === null) {\n          // if the operand has no defined precedence, no parens are needed\n          result = [false];\n          break;\n        }\n\n        if (operandPrecedence <= precedence) {\n          // if the operands precedence is lower, parens are needed\n          result = [true];\n          break;\n        } // otherwise, no parens needed\n\n\n        result = [false];\n        break;\n\n      case 2:\n        // binary operators\n        var lhsParens; // left hand side needs parenthesis?\n        // precedence of the left hand side\n\n        var lhsPrecedence = operators.getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side\n\n        var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);\n\n        if (lhsPrecedence === null) {\n          // if the left hand side has no defined precedence, no parens are needed\n          // FunctionNode for example\n          lhsParens = false;\n        } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {\n          // In case of equal precedence, if the root node is left associative\n          // parens are **never** necessary for the left hand side.\n          // If it is right associative however, parens are necessary\n          // if the root node isn't associative with the left hand side\n          lhsParens = true;\n        } else if (lhsPrecedence < precedence) {\n          lhsParens = true;\n        } else {\n          lhsParens = false;\n        }\n\n        var rhsParens; // right hand side needs parenthesis?\n        // precedence of the right hand side\n\n        var rhsPrecedence = operators.getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?\n\n        var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);\n\n        if (rhsPrecedence === null) {\n          // if the right hand side has no defined precedence, no parens are needed\n          // FunctionNode for example\n          rhsParens = false;\n        } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {\n          // In case of equal precedence, if the root node is right associative\n          // parens are **never** necessary for the right hand side.\n          // If it is left associative however, parens are necessary\n          // if the root node isn't associative with the right hand side\n          rhsParens = true;\n        } else if (rhsPrecedence < precedence) {\n          rhsParens = true;\n        } else {\n          rhsParens = false;\n        } // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n\n        if (latex) {\n          var _rootIdentifier;\n\n          var lhsIdentifier;\n          var rhsIdentifier;\n\n          if (parenthesis === 'keep') {\n            _rootIdentifier = root.getIdentifier();\n            lhsIdentifier = root.args[0].getIdentifier();\n            rhsIdentifier = root.args[1].getIdentifier();\n          } else {\n            // Ignore ParenthesisNodes when not in 'keep' mode\n            _rootIdentifier = root.getContent().getIdentifier();\n            lhsIdentifier = root.args[0].getContent().getIdentifier();\n            rhsIdentifier = root.args[1].getContent().getIdentifier();\n          }\n\n          if (lhsPrecedence !== null) {\n            if (operators.properties[precedence][_rootIdentifier].latexLeftParens === false) {\n              lhsParens = false;\n            }\n\n            if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n              lhsParens = false;\n            }\n          }\n\n          if (rhsPrecedence !== null) {\n            if (operators.properties[precedence][_rootIdentifier].latexRightParens === false) {\n              rhsParens = false;\n            }\n\n            if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n              rhsParens = false;\n            }\n          }\n        }\n\n        result = [lhsParens, rhsParens];\n        break;\n\n      default:\n        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {\n          result = args.map(function (arg) {\n            var argPrecedence = operators.getPrecedence(arg, parenthesis);\n            var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);\n            var argAssociativity = operators.getAssociativity(arg, parenthesis);\n\n            if (argPrecedence === null) {\n              // if the argument has no defined precedence, no parens are needed\n              return false;\n            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {\n              return true;\n            } else if (argPrecedence < precedence) {\n              return true;\n            }\n\n            return false;\n          });\n        }\n\n        break;\n    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode\n    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be\n    // printed.\n\n\n    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {\n      result = args.map(function (arg, index) {\n        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';\n\n        if (result[index] || isParenthesisNode) {\n          // put in parenthesis?\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    return result;\n  }\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n      var operand = args[0].toString(options);\n\n      if (parens[0]) {\n        operand = '(' + operand + ')';\n      } // for example for \"not\", we want a space between operand and argument\n\n\n      var opIsNamed = /[a-zA-Z]+/.test(this.op);\n\n      if (assoc === 'right') {\n        // prefix operator\n        return this.op + (opIsNamed ? ' ' : '') + operand;\n      } else if (assoc === 'left') {\n        // postfix\n        return operand + (opIsNamed ? ' ' : '') + this.op;\n      } // fall back to postfix\n\n\n      return operand + this.op;\n    } else if (args.length === 2) {\n      var lhs = args[0].toString(options); // left hand side\n\n      var rhs = args[1].toString(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '(' + lhs + ')';\n      }\n\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '(' + rhs + ')';\n      }\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + ' ' + rhs;\n      }\n\n      return lhs + ' ' + this.op + ' ' + rhs;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toString(options);\n\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '(' + arg + ')';\n        }\n\n        return arg;\n      });\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return stringifiedArgs.join(' ');\n      }\n\n      return stringifiedArgs.join(' ' + this.op + ' ');\n    } else {\n      // fallback to formatting as a function call\n      return this.fn + '(' + this.args.join(', ') + ')';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  OperatorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'OperatorNode',\n      op: this.op,\n      fn: this.fn,\n      args: this.args,\n      implicit: this.implicit\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"OperatorNode\", \"op\": \"+\", \"fn\": \"add\", \"args\": [...], \"implicit\": false}`,\n   *                       where mathjs is optional\n   * @returns {OperatorNode}\n   */\n\n\n  OperatorNode.fromJSON = function (json) {\n    return new OperatorNode(json.op, json.fn, json.args, json.implicit);\n  };\n  /**\n   * Get HTML representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n      var operand = args[0].toHTML(options);\n\n      if (parens[0]) {\n        operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (assoc === 'right') {\n        // prefix operator\n        return '<span class=\"math-operator math-unary-operator math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      } else if (assoc === 'left') {\n        // postfix\n        return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      } // fall back to postfix\n\n\n      return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n    } else if (args.length === 2) {\n      // binary operatoes\n      var lhs = args[0].toHTML(options); // left hand side\n\n      var rhs = args[1].toHTML(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + '<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>' + rhs;\n      }\n\n      return lhs + '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n    } else {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toHTML(options);\n\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n\n        return arg;\n      });\n\n      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>');\n        }\n\n        return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n      } else {\n        // fallback to formatting as a function call\n        return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n    }\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);\n    var op = latex.operators[this.fn];\n    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n      var operand = args[0].toTex(options);\n\n      if (parens[0]) {\n        operand = \"\\\\left(\".concat(operand, \"\\\\right)\");\n      }\n\n      if (assoc === 'right') {\n        // prefix operator\n        return op + operand;\n      } else if (assoc === 'left') {\n        // postfix operator\n        return operand + op;\n      } // fall back to postfix\n\n\n      return operand + op;\n    } else if (args.length === 2) {\n      // binary operators\n      var lhs = args[0]; // left hand side\n\n      var lhsTex = lhs.toTex(options);\n\n      if (parens[0]) {\n        lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n      }\n\n      var rhs = args[1]; // right hand side\n\n      var rhsTex = rhs.toTex(options);\n\n      if (parens[1]) {\n        rhsTex = \"\\\\left(\".concat(rhsTex, \"\\\\right)\");\n      } // handle some exceptions (due to the way LaTeX works)\n\n\n      var lhsIdentifier;\n\n      if (parenthesis === 'keep') {\n        lhsIdentifier = lhs.getIdentifier();\n      } else {\n        // Ignore ParenthesisNodes if in 'keep' mode\n        lhsIdentifier = lhs.getContent().getIdentifier();\n      }\n\n      switch (this.getIdentifier()) {\n        case 'OperatorNode:divide':\n          // op contains '\\\\frac' at this point\n          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n\n        case 'OperatorNode:pow':\n          lhsTex = '{' + lhsTex + '}';\n          rhsTex = '{' + rhsTex + '}';\n\n          switch (lhsIdentifier) {\n            case 'ConditionalNode': //\n\n            case 'OperatorNode:divide':\n              lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n          }\n\n          break;\n\n        case 'OperatorNode:multiply':\n          if (this.implicit && implicit === 'hide') {\n            return lhsTex + '~' + rhsTex;\n          }\n\n      }\n\n      return lhsTex + op + rhsTex;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var texifiedArgs = args.map(function (arg, index) {\n        arg = arg.toTex(options);\n\n        if (parens[index]) {\n          arg = \"\\\\left(\".concat(arg, \"\\\\right)\");\n        }\n\n        return arg;\n      });\n\n      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {\n        return texifiedArgs.join('~');\n      }\n\n      return texifiedArgs.join(op);\n    } else {\n      // fall back to formatting as a function call\n      // as this is a fallback, it doesn't use\n      // fancy function names\n      return '\\\\mathrm{' + this.fn + '}\\\\left(' + args.map(function (arg) {\n        return arg.toTex(options);\n      }).join(',') + '\\\\right)';\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  OperatorNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.fn;\n  };\n\n  return OperatorNode;\n}\n\nexports.name = 'OperatorNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var assign = load(require('./utils/assign'));\n  var access = load(require('./utils/access'));\n\n  var operators = require('../operators');\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!type.isSymbolNode(object) && !type.isAccessorNode(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if (type.isSymbolNode(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !type.isIndexNode(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!type.isNode(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!type.isSymbolNode(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        return setSafeProperty(scope, name, evalValue(scope, args, context));\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        return setSafeProperty(object, prop, value);\n      };\n    } else if (type.isSymbolNode(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        setSafeProperty(scope, name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // type.isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = getSafeProperty(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          setSafeProperty(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}\n\nexports.name = 'AssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm10 = function algorithm10(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  return algorithm10;\n}\n\nexports.name = 'algorithm10';\nexports.factory = factory;","'use strict';\n\nvar map = require('../../utils/array').map;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor ArrayNode\n   * @extends {Node}\n   * Holds an 1-dimensional array with items\n   * @param {Node[]} [items]   1 dimensional array with items\n   */\n\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.items = items || []; // validate input\n\n    if (!Array.isArray(this.items) || !this.items.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected');\n    } // TODO: deprecated since v3, remove some day\n\n\n    var deprecated = function deprecated() {\n      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');\n    };\n\n    Object.defineProperty(this, 'nodes', {\n      get: deprecated,\n      set: deprecated\n    });\n  }\n\n  ArrayNode.prototype = new Node();\n  ArrayNode.prototype.type = 'ArrayNode';\n  ArrayNode.prototype.isArrayNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ArrayNode.prototype._compile = function (math, argNames) {\n    var evalItems = map(this.items, function (item) {\n      return item._compile(math, argNames);\n    });\n    var asMatrix = math.config().matrix !== 'Array';\n\n    if (asMatrix) {\n      var matrix = math.matrix;\n      return function evalArrayNode(scope, args, context) {\n        return matrix(map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        }));\n      };\n    } else {\n      return function evalArrayNode(scope, args, context) {\n        return map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        });\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new ArrayNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ArrayNode} Returns a transformed copy of the node\n   */\n\n\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n\n    return new ArrayNode(items);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ArrayNode}\n   */\n\n\n  ArrayNode.prototype.clone = function () {\n    return new ArrayNode(this.items.slice(0));\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype._toString = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ArrayNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ArrayNode',\n      items: this.items\n    };\n  };\n  /**\n   * Instantiate an ArrayNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n   *                       where mathjs is optional\n   * @returns {ArrayNode}\n   */\n\n\n  ArrayNode.fromJSON = function (json) {\n    return new ArrayNode(json.items);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype.toHTML = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ArrayNode.prototype._toTex = function (options) {\n    var s = '\\\\begin{bmatrix}';\n    this.items.forEach(function (node) {\n      if (node.items) {\n        s += node.items.map(function (childNode) {\n          return childNode.toTex(options);\n        }).join('&');\n      } else {\n        s += node.toTex(options);\n      } // new line\n\n\n      s += '\\\\\\\\';\n    });\n    s += '\\\\end{bmatrix}';\n    return s;\n  };\n\n  return ArrayNode;\n}\n\nexports.name = 'ArrayNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  var fraction = typed('fraction', {\n    'number': function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new type.Fraction(x);\n    },\n    'string': function string(x) {\n      return new type.Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new type.Fraction(numerator, denominator);\n    },\n    'null': function _null(x) {\n      return new type.Fraction(0);\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.Fraction(x.toString());\n    },\n    'Fraction': function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    'Object': function Object(x) {\n      return new type.Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, fraction);\n    }\n  });\n  return fraction;\n}\n\nexports.name = 'fraction';\nexports.factory = factory;","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var _typeof = load(require('../../../function/utils/typeof'));\n\n  function getArrayDataType(array) {\n    var _type; // to hold type info\n\n\n    var _length = 0; // to hold length value to ensure it has consistent sizes\n\n    for (var i = 0; i < array.length; i++) {\n      var item = array[i];\n      var isArray = Array.isArray(item); // Saving the target matrix row size\n\n      if (i === 0 && isArray) {\n        _length = item.length;\n      } // If the current item is an array but the length does not equal the targetVectorSize\n\n\n      if (isArray && item.length !== _length) {\n        return undefined;\n      }\n\n      var itemType = isArray ? getArrayDataType(item) // recurse into a nested array\n      : _typeof(item);\n\n      if (_type === undefined) {\n        _type = itemType; // first item\n      } else if (_type !== itemType) {\n        return 'mixed';\n      } else {// we're good, everything has the same type so far\n      }\n    }\n\n    return _type;\n  }\n\n  return getArrayDataType;\n}\n/**\n * Check the datatype of a given object\n * This is a low level implementation that should only be used by\n * parent Matrix classes such as SparseMatrix or DenseMatrix\n * This method does not validate Array Matrix shape\n * @param array\n * @return string\n */\n\n\nexports.factory = factory;","module.exports = require('./lib/core/core')\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n\n  var algorithm13 = function algorithm13(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b arrays\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // c arrays\n\n    var csize = []; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // validate each one of the dimension sizes\n\n\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      } // update dimension in c\n\n\n      csize[s] = asize[s];\n    } // datatype\n\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix\n\n    return new DenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  }; // recursive function\n\n\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n\n    return cv;\n  }\n\n  return algorithm13;\n}\n\nexports.name = 'algorithm13';\nexports.factory = factory;"],"sourceRoot":""}