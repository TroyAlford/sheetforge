{"version":3,"sources":["webpack://sheetforge/webpack/universalModuleDefinition","webpack://sheetforge/webpack/bootstrap","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ParenthesisNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm12.js","webpack://sheetforge/./source/utilities/splitObjectPath.js","webpack://sheetforge/./source/utilities/getPathValue.js","webpack://sheetforge/./source/models/generic/IEditable/IEditable.js","webpack://sheetforge/./source/utilities/setPathValue.js","webpack://sheetforge/./source/utilities/findParent.js","webpack://sheetforge/./source/utilities/math/math.js","webpack://sheetforge/./source/utilities/math/toSymbols.js","webpack://sheetforge/./source/models/Attribute/Attribute.js","webpack://sheetforge/./source/utilities/math/calculate.js","webpack://sheetforge/./source/models/Descriptor/Descriptor.js","webpack://sheetforge/./source/models/generic/Collection/Collection.js","webpack://sheetforge/./source/utilities/compareBy.js","webpack://sheetforge/./source/models/HealthLevel/HealthLevel.js","webpack://sheetforge/./source/utilities/bound.js","webpack://sheetforge/./source/models/Effect/Effect.js","webpack://sheetforge/./source/models/Item/Item.js","webpack://sheetforge/./source/models/Resource/Resource.js","webpack://sheetforge/./source/models/Skill/Skill.js","webpack://sheetforge/./source/models/ResourceCost/ResourceCost.js","webpack://sheetforge/./source/models/Spell/Spell.js","webpack://sheetforge/./source/models/Trait/Trait.js","webpack://sheetforge/./source/models/Character/Character.js","webpack://sheetforge/./source/utilities/flatten.js","webpack://sheetforge/./source/index.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/function.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/number.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm06.js","webpack://sheetforge/./node_modules/mathjs/lib/core/function/config.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/deepMap.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/utils/access.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/polyfills.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ConditionalNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/deepForEach.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/det.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/customs.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm02.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/isMatrix.js","webpack://sheetforge/./node_modules/mathjs/lib/type/number.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/unaryMinus.js","webpack://sheetforge/./node_modules/mathjs/lib/type/numeric.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/zeros.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/IndexNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm14.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/index.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/not.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/keywords.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/pow.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/utils/improveErrorMessage.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/RelationalNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/bignumber/formatter.js","webpack://sheetforge/./node_modules/mathjs/lib/error/ArgumentsError.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/ceil.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/mean.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/SymbolNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/containsCollections.js","webpack://sheetforge/./node_modules/mathjs/lib/function/relational/larger.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/isCollection.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/min.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/AccessorNode.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/emitter.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/Node.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/index.js","webpack://sheetforge/./node_modules/mathjs/lib/type/bignumber/function/bignumber.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/identity.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/parse.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/objectSpread.js","webpack://sheetforge/./node_modules/deep-equal/lib/keys.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm04.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/round.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/add.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/boolean.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/multiply.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/and.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/subtract.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/string.js","webpack://sheetforge/./node_modules/mathjs/lib/function/utils/isInteger.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/inv.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/floor.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/function/matrix.js","webpack://sheetforge/./node_modules/escape-latex/dist/index.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ObjectNode.js","webpack://sheetforge/./node_modules/mathjs/lib/error/IndexError.js","webpack://sheetforge/./node_modules/mathjs/lib/core/function/import.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/operators.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/Range.js","webpack://sheetforge/external \"mobx\"","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/divideScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/subset.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/function/eval.js","webpack://sheetforge/./node_modules/mathjs/lib/error/DimensionError.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/transform/error.transform.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm07.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/addScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/utils/assign.js","webpack://sheetforge/external \"mobx-state-tree\"","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/FunctionNode.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/sum.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/object.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/DenseMatrix.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm05.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/scatter.js","webpack://sheetforge/./node_modules/mathjs/lib/core/core.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/latex.js","webpack://sheetforge/./node_modules/mathjs/lib/type/resultset/ResultSet.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/typeof.js","webpack://sheetforge/./node_modules/typed-function/typed-function.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm01.js","webpack://sheetforge/./node_modules/deep-equal/index.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/abs.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/mod.js","webpack://sheetforge/./node_modules/mathjs/lib/function/algebra/decomposition/lup.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm03.js","webpack://sheetforge/./node_modules/mathjs/lib/function/relational/equalScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/max.js","webpack://sheetforge/./node_modules/mathjs/lib/core/typed.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ConstantNode.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/BlockNode.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/function/parse.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://sheetforge/./node_modules/mathjs/lib/function/relational/smaller.js","webpack://sheetforge/./node_modules/deep-equal/lib/is_arguments.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/xor.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm11.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/or.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/Matrix.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/multiplyScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/FunctionAssignmentNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/bignumber/isBigNumber.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/bignumber/nearlyEqual.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/divide.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/reduce.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/array.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/RangeNode.js","webpack://sheetforge/./node_modules/mathjs/lib/function/utils/typeof.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/OperatorNode.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/AssignmentNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm10.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ArrayNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/fraction/function/fraction.js","webpack://sheetforge/./node_modules/tiny-emitter/index.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/getArrayDataType.js","webpack://sheetforge/./node_modules/mathjs/core.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm13.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE_VBo9__","__WEBPACK_EXTERNAL_MODULE_YeEv__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","path","type","config","load","typed","Node","ParenthesisNode","content","this","SyntaxError","isNode","TypeError","isParenthesisNode","_compile","math","argNames","getContent","forEach","callback","map","clone","_toString","options","parenthesis","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","concat","toTex","DenseMatrix","b","inverse","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","Error","dt","rows","columns","cf","convert","find","cdata","data","size","datatype","x","w","j","mark","k0","k1","k","PATH_SPLITTER","splitObjectPath","match","getPathValue","split","Array","isArray","pop","target","reduce","IEditable","types","model","volatile","isIEditable","savedVersion","views","self","isDirty","deepEqual","actions","afterCreate","isPathDirty","current","initial","markAsClean","keys","isObservableArray","child","reset","assign","set","arguments","length","undefined","setPathValue","typeof_default","findParent","filterFunction","Boolean","hasParent","parent","getParent","core","import","toSymbols","expression","symbols","parse","traverse","node","includes","push","Attribute","compose","raw","optional","union","number","string","character","isCharacter","id","toLowerCase","replace","isComputed","effects","activeEffects","filter","effect","targetName","modifiedValue","modifier","sum","modifierText","sourceName","join","values","all","symbol","attribute","attributes","findBy","defineProperty_default","defaultSymbolValue","safeData","objectSpread_default","eval","calculate","error","preProcessSnapshot","_ref","snapshot","objectWithoutProperties_default","postProcessSnapshot","_ref2","named","Collection","TYPE","TypedArrayWrapper","array","asArray","slice","first","at","last","clear","delete","item","deleteAt","index","_","every","fn","findById","identifierAttribute","searchElement","fromIndex","indexOf","element","insert","splice","_len","_key","shift","start","end","some","sortBy","direction","sort","prop","reversed","objectA","objectB","a","String","Map","localeCompare","compareBy","reverse","deleteCount","toObject","keyProp","valueProp","entry","unshift","_len2","_key2","custom","fromSnapshot","getValidationMessage","f","is","isTargetType","DAMAGE_LEVELS","damage","apply","toConsumableArray_default","literal","penalty","healthBar","severity","adjust","byAmount","min","max","bound","newSeverity","ownIndex","healthLevel","heal","condition","available","CollectionOf","isApplicable","conditions","source","afterAttach","description","Effect","equipped","maximum","mastery","theory","isComplex","isSimple","amount","resourceName","resources","Resource","resource","costs","ResourceCost","isActive","level","cast","isAffordable","cost","descriptors","Descriptor","experience","health","HealthLevel","items","Item","skills","Skill","spells","Spell","traits","Trait","availableConditions","e","flatten","depth","Infinity","JSON","stringify","next","trait","spell","Character","_typeof","obj","iterator","constructor","memoize","hasher","cache","args","hash","maxArgumentCount","signatures","signature","count","Math","callWithRightArgumentCount","argCount","objectUtils","zeros","arr","isNumber","isInteger","isFinite","round","sign","format","isNaN","precision","notation","toFixed","toExponential","toEngineering","exponential","lower","upper","fixedOptions","lowerExp","log","LN10","upperExp","console","warn","toPrecision","digits","splitNumber","exponent","parseFloat","dot","coefficients","parseInt","rounded","roundDigits","newExp","significandsDiff","abs","expDiff","decimalIdx","decimals","decimalVal","str","splitValue","pp","DBL_EPSILON","Number","EPSILON","nearlyEqual","y","epsilon","diff","scatter","DimensionError","equalScalar","SparseMatrix","bvalues","bsize","bdt","RangeError","eq","zero","cvalues","cindex","cptr","ptr","u","v","validateOption","contains","findIndex","MATRIX","NUMBER","_config","prev","deepExtend","curr","changes","emit","deepMap","skipZeros","errorTransform","transform","getSafeProperty","subset","isObjectProperty","getObjectProperty","err","operators","mathTypeOf","ConditionalNode","trueExpr","falseExpr","isConditionalNode","evalCondition","evalTrueExpr","evalFalseExpr","scope","context","isBigNumber","isZero","re","im","isUnit","testCondition","_ifNode","precedence","getPrecedence","conditionPrecedence","truePrecedence","falsePrecedence","isMatrix","deepForEach","valueOf","ii","util","matrix","subtract","multiply","unaryMinus","lup","det","any","Array | Matrix","cols","decomp","_det2","U","_i","evenCycles","visited","cycleLen","_det","1","isSafeProperty","safeNativeProperties","Function","isSafeMethod","method","getPrototypeOf","safeNativeMethods","isPlainObject","toLocaleString","setSafeProperty","validateSafeMethod","denseMatrix","sparseMatrix","adata","_data","bindex","bptr","cij","","NaN","num","BigNumber","toNumber","Fraction","Unit","null","Unit, string | Unit","unit","valuelessUnit","0","2","latex","Complex","neg","res","getTypeOf","validInputTypes","validOutputTypes","numeric","outputType","inputType","excluded","sourceKeys","resize","_zeros","...number | BigNumber | string","Matrix","storage","Array | Matrix, string","defaultValue","hasBigNumbers","_normalize","_validate","escape","Range","IndexNode","dimensions","dotNotation","deprecated","createRange","step","isIndexNode","evalDimensions","range","isRangeNode","needsEnd","childArgNames","evalStart","evalEnd","evalStep","childArgs","_evalStart","_evalEnd","_evalStep","isSymbolNode","_childArgNames","evalRange","_evalRange","evalDimension","isConstantNode","_iterate","av","bv","cv","not","identity","fraction","pow","number, number","_pow","Complex, Complex","BigNumber, BigNumber","predictable","Fraction, Fraction","Array, number","_powArray","Array, BigNumber","Matrix, number","_powMatrix","Matrix, BigNumber","Unit, number","yFrac","yNum","ex","px","getType","fnName","details","actual","RelationalNode","conditionals","params","isRelationalNode","compiled","evalLhs","evalRhs","condFn","_this","_this2","paramStrings","paramPrecedence","operatorMap","equal","unequal","smaller","larger","smallerEq","largerEq","ret","gt","exp","logarithm","gte","lt","toSignificantDigits","ArgumentsError","message","stack","isArgumentsError","iter","from","ceil","containsCollections","add","divide","improveErrorMessage","mean","_mean","Array | Matrix, number | BigNumber","dim","...","isValuelessUnit","SymbolNode","undef","toSymbol","isCollection","bigNearlyEqual","algorithm03","algorithm07","algorithm12","algorithm13","algorithm14","boolean, boolean","compare","Unit, Unit","equalBase","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","Array, Matrix","Matrix, Array","SparseMatrix, any","DenseMatrix, any","any, SparseMatrix","any, DenseMatrix","Array, any","any, Array","_min","_smallest","access","AccessorNode","needParenthesis","isAccessorNode","isArrayNode","isFunctionNode","isObjectNode","evalObject","evalIndex","arr2","Emitter","mixin","emitter","on","off","once","keywords","compile","comment","expr","mathWithTransform","_validateScope","_traverse","_transform","nodes","cloneDeep","equals","other","customString","handler","customTex","getIdentifier","bignumber","div","times","number | BigNumber","_identity","number | BigNumber, string","number | BigNumber, number | BigNumber","number | BigNumber, number | BigNumber, string","_identityVector","Array, string","Matrix, string","Big","one","diagonal","minimum","_extends","ArrayNode","AssignmentNode","BlockNode","ConstantNode","FunctionAssignmentNode","ObjectNode","OperatorNode","FunctionNode","RangeNode","extraNodes","parseStart","elem","TOKENTYPE","NULL","DELIMITER","SYMBOL","UNKNOWN","DELIMITERS",",","(",")","[","]","{","}","\"","'",";","+","-","*",".*","/","./","%","^",".^","~","!","&","|","^|","=",":","?","==","!=","<",">","<=",">=","<<",">>",">>>","NAMED_DELIMITERS","mod","to","in","and","xor","or","CONSTANTS","true","false","NUMERIC_CONSTANTS","currentString","state","substr","currentCharacter","prevCharacter","charAt","nextCharacter","getToken","tokenType","token","isWhitespace","nestingLevel","c1","c2","c3","isDigitDot","isDigit","isDecimalMark","createSyntaxError","isAlpha","getTokenSkipNewline","openParams","closeParams","conditionalLevel","visible","blocks","parseAssignment","parseBlock","createError","valid","parseLogicalXor","parseLogicalOr","parseConditional","arg","parseLogicalAnd","parseBitwiseOr","parseBitwiseXor","parseBitwiseAnd","parseRelational","parseShift","cond","parseConversion","parseRange","parseAddSubtract","parseMultiplyDivide","parseImplicitMultiplication","parseRule2","isOperatorNode","op","parseUnary","tokenStates","CustomNode","parseAccessors","parseDoubleQuotesStringToken","parseSingleQuotesStringToken","row","parseRow","properties","numberStr","parseEnd","parseParentheses","parseNumber","parseObject","parseMatrix","parseSingleQuotesString","parseDoubleQuotesString","parseSymbol","parseCustomNodes","parseLeftHandOperators","parsePow","len","col","cPrev","cNext","isValidLatinOrGreek","isValidMathSymbol","test","high","low","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","shim","xa","xb","wa","wb","NO_INT","algorithm11","_round","Complex, number","Complex, BigNumber","_n","number, BigNumber","toDecimalPlaces","Fraction, number","SparseMatrix, number | BigNumber","DenseMatrix, number | BigNumber","number | Complex | BigNumber, SparseMatrix","number | Complex | BigNumber, DenseMatrix","Array, number | BigNumber","number | Complex | BigNumber, Array","extend","addScalar","algorithm01","algorithm04","algorithm10","any, any","any, any, ...any","rest","result","isBoolean","multiplyScalar","_validateMatrixDimensions","Matrix, Matrix","xsize","ysize","bdata","af","mf","_multiplyVectorVector","alength","bcolumns","_multiplyVectorDenseMatrix","_multiplyVectorMatrix","_multiplyMatrixVector","_multiplyMatrixMatrix","size1","size2","arows","acolumns","brows","ib","vbi","ka0","ka1","ka","ia","p1","ic","jb","kb0","kb1","kb","vbij","p0","algorithm02","algorithm06","checkEqualDimensions","algorithm05","sub","minus","fixPrefix","formatNumber","formatBigNumber","isString","endsWith","text","search","substring","looksLikeFraction","formatArray","syntax","entries","escaped","isInt","objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","divideScalar","inv","_inv","mat","temp","A","B","ABig","rBig","Ac","Bc","Ar","Br","floor","_create","string, string","Array | Matrix, string, string","defaultEscapes","\\","#","$","formatEscapes","–","—"," ","\t","\r\n","\n","defaultEscapeMapFn","_ref$preserveFormatti","preserveFormatting","_ref$escapeMapFn","escapeMapFn","runningStr","escapes","escapeKeys","_loop","specialCharFound","arrayWithoutHoles","iterableToArray","nonIterableSpread","evalEntries","stringifiedKey","parsedKey","IndexError","isIndexError","lazy","isFactory","_import","wrap","wrapper","_wrap","isTypedFunction","override","_importTransform","silent","allowedInExpressions","_deleteTransform","_importFactory","existingTransform","namespace","existing","resolver","instance","factoryAllowedInExpressions","isSupportedType","isFraction","unsafe","docs","chain","mathImport","latexLeftParens","latexRightParens","latexParens","OperatorNode:or","associativity","associativeWith","OperatorNode:xor","OperatorNode:and","OperatorNode:bitOr","OperatorNode:bitXor","OperatorNode:bitAnd","OperatorNode:equal","OperatorNode:unequal","OperatorNode:smaller","OperatorNode:larger","OperatorNode:smallerEq","OperatorNode:largerEq","OperatorNode:leftShift","OperatorNode:rightArithShift","OperatorNode:rightLogShift","OperatorNode:to","OperatorNode:add","OperatorNode:subtract","OperatorNode:multiply","OperatorNode:divide","OperatorNode:dotMultiply","OperatorNode:dotDivide","OperatorNode:mod","OperatorNode:unaryPlus","OperatorNode:unaryMinus","OperatorNode:bitNot","OperatorNode:not","OperatorNode:pow","OperatorNode:dotPow","OperatorNode:factorial","OperatorNode:transpose","_node","identifier","getAssociativity","isAssociativeWith","nodeA","nodeB","identifierA","identifierB","hasStart","hasEnd","hasStep","isRange","nums","toArray","Unit, number | Fraction | BigNumber","number | Fraction | BigNumber, Unit","validateIndex","_getObjectProperty","dimension","_setObjectProperty","replacement","updated","Array, Index","isScalar","Matrix, Index","Object, Index","string, Index","isIndex","strLen","Array, Index, any","Array, Index, any, any","Matrix, Index, any","Matrix, Index, any, any","string, Index, string","_setSubstring","string, Index, string, string","Object, Index, any","chars","string, Object","Array | Matrix, Object","expected","relation","isDimensionError","_scatter","va","vb","plus","evalArgs","rawArgs","evalArg0","_evalArg","evalArg1","evalArg","_rawArgs","evalFn","_rawArgs2","nodeToString","expandTemplate","template","regex","RegExp","inputPos","exec","ReferenceError","isFunctionAssignmentNode","nodeToTex","latexConverter","customToTex","defaultTemplate","_sum","Date","canDefineProperty","_value","_uninitialized","configurable","names","getArrayDataType","preprocess","validate","_resize","_fit","newSize","changed","isDenseMatrix","getDataType","_getSubmatrix","dims","_get","submatrix","sSize","iSize","outer","unsqueeze","_setSubmatrix","dataIndex","subIndex","_set","indexI","copy","reshape","me","recurse","kSuper","kSub","ms","swapRows","_swapRows","vi","_storage","dense","wai","wbi","vc","update","typedFactory","importFactory","configFactory","factories","instances","randomSeed","escapeLatex","Alpha","alpha","Beta","beta","Gamma","gamma","Delta","delta","Epsilon","varepsilon","Zeta","zeta","Eta","eta","Theta","theta","vartheta","Iota","iota","Kappa","kappa","varkappa","Lambda","lambda","Mu","mu","Nu","nu","Xi","xi","Omicron","omicron","Pi","pi","varpi","Rho","rho","varrho","Sigma","sigma","varsigma","Tau","tau","Upsilon","upsilon","Phi","phi","varphi","Chi","chi","Psi","psi","Omega","omega","inf","Inf","infinity","oo","lim","transpose","ctranspose","factorial","dotPow","unaryPlus","bitNot","dotMultiply","dotDivide","leftShift","rightArithShift","rightLogShift","bitAnd","bitXor","bitOr","units","deg","ResultSet","isResultSet","_typeof2","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","ok","notOk","_types","anyType","_ignore","_conversions","conversions","ignore","findTypeByName","typeName","findInArray","hint","findTypeIndex","findTypeName","stringifyParams","param","typeNames","getTypeName","restParam","parseParam","trim","notEmpty","notIgnore","matchingConversions","matches","conversion","filterConversions","exactTypes","typeIndex","conversionIndex","convertibleTypes","hasRestParam","hasConversions","compileTest","test0","test1","tests","compileTests","varIndex","lastTest","testRestParam","getParamAtIndex","getExpectedTypeNames","excludeConversions","isExactType","mergeExpectedParams","uniq","flatMap","getLowestTypeIndex","getLowestConversionIndex","compareParams","param1","param2","compareSignatures","signature1","signature2","compileArgConversion","conversion0","conversion1","splitParams","ignoreConversionTypes","_splitParams","typeGroups","filteredTypes","typeGroup","splittedParams","createTypedFunction","signaturesMap","parsedSignatures","parsedParam","isInvalidParam","parseSignature","notNull","parsedSignature","conflictingSignature","typesNames1","typesNames2","hasOverlap","len1","len2","restParam1","restParam2","hasConflictingParams","ok0","ok1","ok2","ok3","ok4","ok5","allOk","test00","test10","test20","test30","test40","test50","test01","test11","test21","test31","test41","test51","fns","fnConvert","compiledConversions","fnPreprocess","offset","compileArgsPreprocessing","fn0","fn1","fn2","fn3","fn4","fn5","len0","len3","len4","len5","iStart","iEnd","generic","_name","matchingSignatures","nextMatchingDefs","actualType","category","lengths","maxLength","expectedLength","arg0","arg1","createSignaturesMap","array1","array2","getName","extractSignatures","validateUnique","_signature","_fn","...Function","string, ...Function","addType","beforeObjectTest","addConversion","pSlice","objectKeys","isArguments","opts","getTime","strict","isUndefinedOrNull","isBuffer","objEquiv","Spa","_denseLUP","ldata","lsize","udata","usize","pabsv","vjj","absv","vij","pv","L","_sparseLUP","lvalues","lindex","lptr","uvalues","uindex","uptr","pvCo","pvOc","spa","vkj","_forEachRow","vik","accumulate","swap","kx","ky","swapIndeces","z","_max","_largest","typedFunction","_createTyped","isSparseMatrix","isHelp","isFunction","isDate","isRegExp","isObject","isNull","isUndefined","isAssignmentNode","isBlockNode","isChain","toLatex","block","evalBlocks","results","string | Array | Matrix","string | Array | Matrix, Object","writable","supportsArgumentsClass","supported","unsupported","mul","number | Fraction | BigNumber | Complex, Unit","Unit, number | Fraction | BigNumber | Complex","exprPrecedence","evalExpr","lte","Array | Matrix, Array | Matrix","any, Array | Matrix","arraySize","_reduce","val","tran","I","J","tmp","_switch","_DimensionError","default","dimNext","_number","_IndexError","_string","_defaultValue","oldLen","newLen","minLen","sizes","newArray","flatArray","product","totalSize","sizeIndex","tmpArray2","tmpArray","_reshape","squeeze","_squeeze","_unsqueeze","filterRegExp","regexp","separator","identify","generalize","_interopRequireDefault","flat","calculateNecessaryParentheses","parens","startPrecedence","stepPrecedence","endPrecedence","implicit","operandPrecedence","operandIdentifier","rootIdentifier","lhsParens","rhsParens","lhsPrecedence","assocWithLhs","_rootIdentifier","lhsIdentifier","rhsIdentifier","rhsPrecedence","assocWithRhs","argPrecedence","assocWithArg","argAssociativity","isUnary","isBinary","assoc","operand","lhs","rhs","stringifiedArgs","lhsTex","rhsTex","texifiedArgs","evalValue","childObject","evalParentObject","parentProp","evalParentIndex","parentIndex","evalItems","evalItem","childNode","numerator","denominator","E","ctx","listener","evtArr","evts","liveEvents","_type","_length","itemType","csize"],"mappings":"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","file":"sheetforge.production.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"mobx\"), require(\"mobx-state-tree\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sheetforge\", [\"mobx\", \"mobx-state-tree\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sheetforge\"] = factory(require(\"mobx\"), require(\"mobx-state-tree\"));\n\telse\n\t\troot[\"sheetforge\"] = factory(root[\"mobx\"], root[\"mobx-state-tree\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_VBo9__, __WEBPACK_EXTERNAL_MODULE_YeEv__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"05fm\");\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor ParenthesisNode\n   * @extends {Node}\n   * A parenthesis node describes manual parenthesis from the user input\n   * @param {Node} content\n   * @extends {Node}\n   */\n\n  function ParenthesisNode(content) {\n    if (!(this instanceof ParenthesisNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (!type.isNode(content)) {\n      throw new TypeError('Node expected for parameter \"content\"');\n    }\n\n    this.content = content;\n  }\n\n  ParenthesisNode.prototype = new Node();\n  ParenthesisNode.prototype.type = 'ParenthesisNode';\n  ParenthesisNode.prototype.isParenthesisNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ParenthesisNode.prototype._compile = function (math, argNames) {\n    return this.content._compile(math, argNames);\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} content\n   * @override\n   **/\n\n\n  ParenthesisNode.prototype.getContent = function () {\n    return this.content.getContent();\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ParenthesisNode.prototype.forEach = function (callback) {\n    callback(this.content, 'content', this);\n  };\n  /**\n   * Create a new ParenthesisNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ParenthesisNode} Returns a clone of the node\n   */\n\n\n  ParenthesisNode.prototype.map = function (callback) {\n    var content = callback(this.content, 'content', this);\n    return new ParenthesisNode(content);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.prototype.clone = function () {\n    return new ParenthesisNode(this.content);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toString = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '(' + this.content.toString(options) + ')';\n    }\n\n    return this.content.toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ParenthesisNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ParenthesisNode',\n      content: this.content\n    };\n  };\n  /**\n   * Instantiate an ParenthesisNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n   *                       where mathjs is optional\n   * @returns {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.fromJSON = function (json) {\n    return new ParenthesisNode(json.content);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype.toHTML = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return this.content.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toTex = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n    }\n\n    return this.content.toTex(options);\n  };\n\n  return ParenthesisNode;\n}\n\nexports.name = 'ParenthesisNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm12 = function algorithm12(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  return algorithm12;\n}\n\nexports.name = 'algorithm12';\nexports.factory = factory;","const PATH_SPLITTER = /([a-z0-9-_]+)(?![[\"'\\].])*/ig\n\nexport default (path) => {\n  if (typeof path !== 'string') return null\n  return path.match(PATH_SPLITTER)\n}\n","import splitObjectPath from '@/utilities/splitObjectPath'\n\nexport default (object, path) => {\n  if (typeof path !== 'string') return undefined\n\n  const split = splitObjectPath(path)\n\n  if (!Array.isArray(split)) return undefined\n\n  const property = split.pop()\n  const target = split.reduce((o, key) => o[key] || {}, object)\n\n  if (target) return target[property]\n  return undefined\n}\n","import deepEqual from 'deep-equal'\nimport { isObservableArray } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport getPathValue from '@/utilities/getPathValue'\nimport setPathValue from '@/utilities/setPathValue'\n\nconst IEditable = types.model('IEditable', {\n  // Any\n}).volatile(() => ({\n  isIEditable: true,\n  savedVersion: {},\n})).views(self => ({\n  get isDirty() { return !deepEqual(self.toJSON(), self.savedVersion) },\n})).actions(self => ({\n  /* eslint-disable no-param-reassign */\n\n  afterCreate() { self.savedVersion = self.toJSON() },\n  isPathDirty: (path) => {\n    const current = getPathValue(self.toJSON(), path)\n    const initial = getPathValue(self.savedVersion, path)\n    return !deepEqual(current, initial)\n  },\n  markAsClean() {\n    self.savedVersion = self.toJSON()\n\n    Object.keys(self.savedVersion).forEach((key) => {\n      const value = self[key]\n      if (!value) { return }\n\n      if (value.isIEditable) {\n        value.markAsClean()\n      } else if (isObservableArray(value)) {\n        value.forEach(child => (child && child.isIEditable && child.markAsClean()))\n      }\n    })\n  },\n  reset() { Object.assign(self, self.savedVersion) },\n  set(key = {}, value = undefined) {\n    if (typeof key === 'string' && value !== undefined) {\n      // allows: model.set('foo.bar', 'bar')\n      if (self[key] !== undefined) {\n        self[key] = value\n      } else {\n        setPathValue(self, key, value)\n      }\n    } else if (typeof key === 'object' && value === undefined) {\n      // allows: model.set({ foo: 'Foo', bar: 'Bar' })\n      Object.assign(self, key)\n    }\n  },\n\n  /* eslint-enable no-param-reassign */\n}))\n\nexport default IEditable\n","import splitObjectPath from '@/utilities/splitObjectPath'\n\nexport default (object, path, value) => {\n  const split = splitObjectPath(path)\n  const property = split.pop()\n  const target = split.reduce((o, key) => o[key] || {}, object)\n\n  if (target && target.isIEditable) {\n    target.set(property, value)\n  } else {\n    target[property] = value\n  }\n}\n","import { getParent, hasParent } from 'mobx-state-tree'\n\nexport default (child, filterFunction = Boolean) => {\n  if (!hasParent(child)) { return null }\n\n  let parent = getParent(child)\n  while (parent) {\n    if (filterFunction(parent)) {\n      return parent\n    }\n\n    if (!hasParent(parent)) { return null }\n    parent = getParent(parent)\n  }\n\n  return null\n}\n","import core from 'mathjs/core'\n\nconst math = core.create()\nmath.import(require('mathjs/lib/expression/function/eval'))\nmath.import(require('mathjs/lib/expression/function/parse'))\nmath.import(require('mathjs/lib/function/arithmetic/add'))\nmath.import(require('mathjs/lib/function/arithmetic/ceil'))\nmath.import(require('mathjs/lib/function/arithmetic/divide'))\nmath.import(require('mathjs/lib/function/arithmetic/floor'))\nmath.import(require('mathjs/lib/function/arithmetic/mod'))\nmath.import(require('mathjs/lib/function/arithmetic/multiply'))\nmath.import(require('mathjs/lib/function/arithmetic/pow'))\nmath.import(require('mathjs/lib/function/arithmetic/round'))\nmath.import(require('mathjs/lib/function/arithmetic/subtract'))\nmath.import(require('mathjs/lib/function/logical'))\nmath.import(require('mathjs/lib/function/statistics/max'))\nmath.import(require('mathjs/lib/function/statistics/mean'))\nmath.import(require('mathjs/lib/function/statistics/min'))\nmath.import(require('mathjs/lib/function/statistics/sum'))\nmath.import(require('mathjs/lib/function/utils/isInteger'))\nmath.import(require('mathjs/lib/type/matrix/function/matrix'))\nmath.import(require('mathjs/lib/type/matrix/Matrix'))\nmath.import(require('mathjs/lib/type/matrix/DenseMatrix'))\n\nexport default math\n","import math from '@/utilities/math'\n\nexport default (expression) => {\n  const symbols = []\n  math.parse(expression).traverse((node) => {\n    if (node.type === 'SymbolNode' && !symbols.includes(node.name)) {\n      symbols.push(node.name)\n    }\n  })\n  return symbols\n}\n","import { types } from 'mobx-state-tree'\nimport IEditable from '@/models/generic/IEditable'\nimport findParent from '@/utilities/findParent'\nimport math from '@/utilities/math'\nimport calculate from '@/utilities/math/calculate'\nimport toSymbols from '@/utilities/math/toSymbols'\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    name: 'New Attribute...',\n    raw: types.optional(types.union(types.number, types.string), 0),\n  }).views(self => ({\n    get character() { return findParent(self, p => p.isCharacter) },\n    get id() { return self.name.toLowerCase().replace(/[^a-z0-9]/ig, '') },\n    get isComputed() { return typeof self.raw === 'string' },\n  })).actions(self => ({\n    effects() {\n      if (!self.character) return []\n      return self.character.activeEffects().filter(effect => effect.targetName === self.name)\n    },\n    modifiedValue() { return self.value() + self.modifier() },\n    modifier() { return math.sum(self.effects().map(effect => effect.modifier)) },\n    modifierText() {\n      return self.effects().map(effect => `${effect.sourceName}: ${effect.modifier}`).join(', ')\n    },\n    value() {\n      if (!self.isComputed) return self.raw\n      if (self.character === null) return 0\n\n      try {\n        const values = toSymbols(self.raw).reduce((all, symbol) => {\n          const attribute = self.character.attributes.findBy('id', symbol)\n          return Object.assign(all, { [symbol]: attribute ? attribute.modifiedValue() : 0 })\n        }, {})\n\n        return calculate(self.raw, values)\n      } catch (error) {\n        // eslint-disable-next-line no-undef, no-console\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(`Error computing: ${self.raw}`)\n        }\n        return 0\n      }\n    },\n  }))\n    .preProcessSnapshot(({ value, ...snapshot }) => ({ ...snapshot, raw: value }))\n    .postProcessSnapshot(({ raw, ...snapshot }) => ({ ...snapshot, value: raw }))\n).named('Attribute')\n","import math from '@/utilities/math'\nimport toSymbols from '@/utilities/math/toSymbols'\n\nexport default (expression = '', data = {}, options = { defaultSymbolValue: 0 }) => {\n  const safeData = { ...data }\n  toSymbols(expression).forEach((symbol) => {\n    if (safeData[symbol] === undefined) {\n      safeData[symbol] = options.defaultSymbolValue\n    }\n  })\n\n  return math.eval(expression, safeData)\n}\n","import { types } from 'mobx-state-tree'\nimport IEditable from '@/models/generic/IEditable'\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    name: 'New Descriptor...',\n    value: '',\n  })\n).named('Descriptor')\n","import { isObservableArray } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport compareBy from '@/utilities/compareBy'\n\nexport default (TYPE, options = {}) => {\n  const TypedArrayWrapper = types.model({\n    values: types.array(TYPE),\n  }).views(self => ({\n    get asArray() { return self.values.slice() },\n    get first() { return self.length ? self.at(0) : undefined },\n    get last() { return self.length ? self.at(self.length - 1) : undefined },\n    get length() { return self.values.length },\n  })).actions(self => ({\n    /* eslint-disable no-param-reassign */\n\n    at: n => self.values[n],\n    clear: () => self.values.clear(),\n    delete: (object) => { self.values.replace(self.values.filter(item => item !== object)) },\n    deleteAt: (index) => { self.values.replace(self.values.filter((_, n) => n !== index)) },\n    every: fn => self.values.every(fn),\n    filter: fn => self.values.filter(fn),\n    find: fn => self.values.find(fn),\n    findBy: (key, value) => self.find(item => item[key] === value),\n    findById: (id) => {\n      if (!TYPE.identifierAttribute) return null\n      return self.find(item => item[TYPE.identifierAttribute] === id) || null\n    },\n    forEach: fn => self.values.forEach(fn),\n    includes: (searchElement, fromIndex) => self.values.includes(searchElement, fromIndex),\n    indexOf: element => self.values.indexOf(element),\n    insert: (object, index) => self.splice(index, 0, object),\n    map: fn => self.values.map(fn),\n    pop: () => self.values.pop(),\n    push: (...values) => self.values.replace([].concat(self.values, values)),\n    reduce: (fn, initial) => self.values.reduce(fn, initial),\n    replace: values => self.values.replace(values),\n    shift: () => self.values.shift(),\n    slice: (start, end) => self.values.slice(start, end),\n    some: fn => self.values.some(fn),\n    sortBy: (property, direction = 'asc') => {\n      if (!['asc', 'desc'].includes(direction)) {\n        throw new TypeError(`direction must be \"asc\" or \"desc\", got: \"${direction}\"`)\n      }\n      const values = self.values.slice().sort(compareBy(property))\n      self.values.replace(direction === 'desc' ? values.reverse() : values)\n      return self\n    },\n    splice: (index, deleteCount, value) => self.values.splice(index, deleteCount, value),\n    toObject: (keyProp, valueProp) => self.values.reduce((object, entry) => {\n      const key = entry[keyProp]\n      const value = valueProp !== undefined ? entry[valueProp] : entry\n      return { ...object, [key]: typeof value === 'function' ? value() : value }\n    }, {}),\n    unshift: (...values) => self.values.replace([].concat(values, self.values)),\n\n    /* eslint-enable no-param-reassign */\n  })).postProcessSnapshot(({ values }) => values)\n\n  return types.custom({\n    ...options,\n    fromSnapshot: (snapshot = []) => TypedArrayWrapper.create({ values: snapshot }),\n    getValidationMessage: (snapshot) => {\n      if (!snapshot) return ''\n      if (isObservableArray(snapshot) || Array.isArray(snapshot)) {\n        if (snapshot.every(f => TYPE.is(f))) return ''\n      }\n\n      return 'Collection types must be assigned an array of values or null'\n    },\n    isTargetType: target => TypedArrayWrapper.is(target),\n    name: options.name || 'Collection',\n  })\n}\n","export default (prop, reversed = false) => (objectA, objectB) => {\n  const a = String(objectA instanceof Map ? objectA.get(prop) : objectA[prop])\n  const b = String(objectB instanceof Map ? objectB.get(prop) : objectB[prop])\n\n  if (reversed) return b.localeCompare(a)\n  return a.localeCompare(b)\n}\n","import { isObservableArray } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport IEditable from '@/models/generic/IEditable'\nimport bound from '@/utilities/bound'\nimport findParent from '@/utilities/findParent'\n\nconst DAMAGE_LEVELS = [\n  'none',\n  'light',\n  'heavy',\n  'bane',\n]\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    damage: types.optional(types.union(...DAMAGE_LEVELS.map(dt => types.literal(dt))), 'none'),\n    name: 'New Health Level...',\n    penalty: 0,\n  }).views(self => ({\n    get healthBar() {\n      const parent = findParent(self)\n      return isObservableArray(parent) ? parent : null\n    },\n    get index() { return self.healthBar ? self.healthBar.indexOf(self) : null },\n    get severity() { return DAMAGE_LEVELS.indexOf(self.damage) },\n  })).actions(self => ({\n    adjust(byAmount) {\n      const index = bound(self.severity + byAmount, { max: 3, min: 0 })\n      self.apply(DAMAGE_LEVELS[index])\n    },\n    apply(damage) {\n      if (!DAMAGE_LEVELS.includes(damage)) return\n\n      const newSeverity = DAMAGE_LEVELS.indexOf(damage)\n      if (newSeverity === self.severity) return\n\n      const ownIndex = self.index\n      const direction = newSeverity < self.severity ? '↑' : '↓'\n\n      if (!self.healthBar) {\n        self.set({ damage })\n        return\n      }\n\n      self.healthBar.forEach((healthLevel, index) => {\n        if (\n          (direction === '↑' && index >= ownIndex && healthLevel.severity > newSeverity) ||\n          (direction === '↓' && index <= ownIndex && healthLevel.severity < newSeverity)\n        ) {\n          healthLevel.set({ damage })\n        }\n      })\n    },\n    heal() { self.apply('none') },\n  }))\n).named('HealthLevel')\n","export default (value, { min, max }) => {\n  if (min !== undefined && value < min) return min\n  if (max !== undefined && value > max) return max\n  return value\n}\n","import { types } from 'mobx-state-tree'\nimport Attribute from '@/models/Attribute'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    condition: '',\n    modifier: 0,\n    targetName: '',\n  }).views(self => ({\n    get available() {\n      return self.character ? self.character.attributes : CollectionOf(Attribute).create([])\n    },\n    get character() { return findParent(self, p => p.isCharacter) },\n    get isApplicable() {\n      return Boolean(\n        !self.condition ||\n        (self.character && self.character.conditions.includes(self.condition))\n      )\n    },\n    get source() { return findParent(self, p => p.name) || null },\n    get sourceName() { return self.source ? self.source.name : 'Unknown' },\n    get target() {\n      if (!self.character) return null\n      return self.character.attributes.findBy('name', self.targetName)\n    },\n  })).actions(self => ({\n    afterAttach() {\n      if (!self.targetName && self.available.length) {\n        // eslint-disable-next-line no-param-reassign\n        self.targetName = self.available.first.name\n      }\n    },\n  }))\n).named('Effect')\n","import { types } from 'mobx-state-tree'\n// import Descriptor from '@/models/Descriptor'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    description: '',\n    // descriptors: CollectionOf(Descriptor),\n    effects: CollectionOf(Effect),\n    equipped: false,\n    name: 'New Item...',\n  }),\n).named('Item')\n","import { types } from 'mobx-state-tree'\nimport IEditable from '@/models/generic/IEditable'\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    current: 0,\n    maximum: 10,\n    name: '',\n  })\n).named('Resource')\n","import { types } from 'mobx-state-tree'\nimport IEditable from '@/models/generic/IEditable'\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    mastery: 1,\n    name: 'New Skill...',\n    theory: 0,\n  }).views(self => ({\n    get isComplex() { return self.theory !== 0 },\n    get isSimple() { return self.theory === 0 },\n  }))\n).named('Skill')\n","import { types } from 'mobx-state-tree'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport Resource from '@/models/Resource'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    amount: 0,\n    resourceName: '',\n  }).views(self => ({\n    get available() {\n      return self.character ? self.character.resources : CollectionOf(Resource).create([])\n    },\n    get character() { return findParent(self, p => p.isCharacter) },\n  })).actions(self => ({\n    afterAttach() {\n      if (!self.resourceName && self.available.length) {\n        // eslint-disable-next-line no-param-reassign\n        self.resourceName = self.available.first.name\n      }\n    },\n    resource() {\n      if (!self.character) return null\n      return self.character.resources.findBy('name', self.resourceName)\n    },\n  }))\n).named('Cost')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport ResourceCost from '@/models/ResourceCost'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    costs: CollectionOf(ResourceCost), // Resources\n    description: '',\n    effects: CollectionOf(Effect),\n    isActive: false,\n    level: 0,\n    name: 'New Spell...',\n  }).views(self => ({\n    get character() { return findParent(self, p => p.isCharacter) },\n  })).actions(self => ({\n    cast() {\n      if (self.isAffordable()) {\n        self.costs.forEach((cost) => {\n          const resource = cost.resource()\n          resource.set({ current: resource.current - cost.amount })\n        })\n      }\n    },\n    isAffordable() {\n      if (!self.character || !self.costs.length) return true\n      return self.costs.every(cost => (\n        cost.resource() && cost.resource().current >= cost.amount\n      ))\n    },\n  }))\n).named('Spell')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\n\nexport default types.compose(\n  IEditable,\n  types.model('Trait', {\n    effects: CollectionOf(Effect),\n    name: 'New Trait...',\n    value: 0,\n  })\n).named('Trait')\n","import { types } from 'mobx-state-tree'\nimport Attribute from '@/models/Attribute'\nimport Descriptor from '@/models/Descriptor'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport HealthLevel from '@/models/HealthLevel'\nimport Item from '@/models/Item'\nimport Resource from '@/models/Resource'\nimport Skill from '@/models/Skill'\nimport Spell from '@/models/Spell'\nimport Trait from '@/models/Trait'\nimport flatten from '@/utilities/flatten'\n\nexport default types.compose(\n  IEditable,\n  types.model({\n    attributes: CollectionOf(Attribute),\n    conditions: CollectionOf(types.string), // ['vs Goblins', 'Crinos Form']\n    descriptors: CollectionOf(Descriptor),\n    experience: 0,\n    health: CollectionOf(HealthLevel),\n    items: CollectionOf(Item), // equipped / unequipped, have Effects\n    resources: CollectionOf(Resource),\n    skills: CollectionOf(Skill),\n    spells: CollectionOf(Spell),\n    traits: CollectionOf(Trait), // have Effects\n  }).volatile(() => ({\n    isCharacter: true,\n  })).actions(self => ({\n    activeEffects() {\n      return self.effects().filter(effect => effect && effect.isApplicable)\n    },\n    availableConditions() {\n      return self.effects()\n        .map(e => e.condition)\n        .sort()\n        .filter((effect, i, all) => !i || effect !== all[i - 1])\n        .filter(Boolean)\n    },\n    effects() {\n      return flatten([\n        // Trait Effects first, because they're inherent\n        self.traits.filter(Boolean).map(trait => trait.effects.values),\n        // Direct Effects second, because they're cast on the character\n        self.spells.filter(spell => spell.isActive).map(spell => spell.effects.values),\n        // Item Effects third, because they're indirect\n        self.items.filter(item => item.equipped).map(item => item.effects.values),\n      ]).filter(Boolean)\n    },\n  }))\n).named('Character')\n","export default function flatten(array, depth = Infinity) {\n  if (!array || !Array.isArray(array)) {\n    throw new TypeError(`cannot flatten non-Array value ${JSON.stringify(array)}`)\n  }\n\n  return array.reduce((all, next) => {\n    if (depth > 1 && next && Array.isArray(next)) {\n      return all.concat(flatten(next, depth - 1))\n    }\n\n    return all.concat(next)\n  }, [])\n}\n","import Character from '@/models/Character'\nimport '@fontello/css/sheetforge-embedded'\n\nexport default Character\n","'use strict'; // function utils\n\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {function(args: Array)} [hasher]  A custom hash builder.\n *                                          Is JSON.stringify by default.\n * @return {function}                       Returns the memoized function\n */\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexports.memoize = function (fn, hasher) {\n  return function memoize() {\n    if (_typeof(memoize.cache) !== 'object') {\n      memoize.cache = {};\n    }\n\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher ? hasher(args) : JSON.stringify(args);\n\n    if (!(hash in memoize.cache)) {\n      memoize.cache[hash] = fn.apply(fn, args);\n    }\n\n    return memoize.cache[hash];\n  };\n};\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\n\nexports.maxArgumentCount = function (fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n};\n/**\n * Call a typed function with the\n * @param {function} fn   A function or typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\n\nexports.callWithRightArgumentCount = function (fn, args, argCount) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n};","'use strict';\n\nvar objectUtils = require('./object');\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Test whether value is a number\n * @param {*} value\n * @return {boolean} isNumber\n */\n\n\nexports.isNumber = function (value) {\n  return typeof value === 'number';\n};\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\n\nexports.isInteger = function (value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well\n};\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {*}\n */\n\n\nexports.sign = Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexports.format = function (value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (exports.isNumber(options)) {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'engineering':\n      return exports.toEngineering(value, precision);\n\n    case 'auto':\n      // TODO: clean up some day. Deprecated since: 2018-01-24\n      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0\n      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {\n        var fixedOptions = objectUtils.map(options, function (x) {\n          return x;\n        });\n        fixedOptions.exponential = undefined;\n\n        if (options.exponential.lower !== undefined) {\n          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);\n        }\n\n        if (options.exponential.upper !== undefined) {\n          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);\n        }\n\n        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));\n        return exports.toPrecision(value, precision, fixedOptions);\n      }\n\n      return exports.toPrecision(value, precision, options && options) // remove trailing zeros after the decimal point\n      .replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\n\nexports.splitNumber = function (value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n};\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\n\nexports.toEngineering = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var rounded = exports.roundDigits(exports.splitNumber(value), precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if (exports.isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    if (precision > c.length) c = c.concat(zeros(precision - c.length));\n  } else {\n    // concatenate coefficients with necessary zeros\n    var significandsDiff = e >= 0 ? e : Math.abs(newExp); // add zeros if necessary (for ex: 1e+8)\n\n    if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (--expDiff >= 0) {\n    decimalIdx++;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = exports.isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n};\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\n\nexports.toFixed = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = exports.splitNumber(value);\n  var rounded = typeof precision === 'number' ? exports.roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n};\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\n\nexports.toExponential = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = exports.splitNumber(value);\n  var rounded = precision ? exports.roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n};\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\n\nexports.toPrecision = function (value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = exports.splitNumber(value);\n\n  if (split.exponent < lowerExp || split.exponent >= upperExp) {\n    // exponential notation\n    return exports.toExponential(value, precision);\n  } else {\n    var rounded = precision ? exports.roundDigits(split, precision) : split;\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n};\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\n\nexports.roundDigits = function (split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n};\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nexports.digits = function (value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n};\n/**\n * Minimum number added to one that makes the result different than one\n */\n\n\nexports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexports.nearlyEqual = function (x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < exports.DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n};","'use strict';\n\nvar scatter = require('./../../../utils/collection/scatter');\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm06 = function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      scatter(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace\n\n      scatter(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm06;\n}\n\nexports.name = 'algorithm06';\nexports.factory = factory;","'use strict';\n\nvar object = require('../../utils/object');\n\nfunction factory(type, config, load, typed, math) {\n  var MATRIX = ['Matrix', 'Array']; // valid values for option matrix\n\n  var NUMBER = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.eval('0.4')                    // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.eval('0.4')                    // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n\n  function _config(options) {\n    if (options) {\n      var prev = object.map(config, object.clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX);\n      validateOption(options, 'number', NUMBER); // merge options\n\n      object.deepExtend(config, options);\n      var curr = object.map(config, object.clone);\n      var changes = object.map(options, object.clone); // emit 'config' event\n\n      math.emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return object.map(config, object.clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX = MATRIX;\n  _config.NUMBER = NUMBER;\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Find a string in an array. Case insensitive search\n * @param {Array.<string>} array\n * @param {string} item\n * @return {number} Returns the index when found. Returns -1 when not found\n */\n\n\nfunction findIndex(array, item) {\n  return array.map(function (i) {\n    return i.toLowerCase();\n  }).indexOf(item.toLowerCase());\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    var index = findIndex(values, options[name]);\n\n    if (index !== -1) {\n      // right value, wrong casing\n      // TODO: lower case values are deprecated since v3, remove this warning some day.\n      console.warn('Warning: Wrong casing for configuration option \"' + name + '\", should be \"' + values[index] + '\" instead of \"' + options[name] + '\".');\n      options[name] = values[index]; // change the option to the right casing\n    } else {\n      // unknown value\n      console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". Available options: ' + values.map(JSON.stringify).join(', ') + '.');\n    }\n  }\n}\n\nexports.name = 'config';\nexports.math = true; // request the math namespace as fifth argument\n\nexports.factory = factory;","'use strict';\n/**\n * Execute the callback function element wise for each element in array and any\n * nested array\n * Returns an array with the results\n * @param {Array | Matrix} array\n * @param {Function} callback   The callback is called with two parameters:\n *                              value1 and value2, which contain the current\n *                              element of both arrays.\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n *\n * @return {Array | Matrix} res\n */\n\nmodule.exports = function deepMap(array, callback, skipZeros) {\n  if (array && typeof array.map === 'function') {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  } else {\n    return callback(array);\n  }\n};","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar errorTransform = require('../../transform/error.transform').transform;\n\nvar getSafeProperty = require('../../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  /**\n   * Retrieve part of an object:\n   *\n   * - Retrieve a property from an object\n   * - Retrieve a part of a string\n   * - Retrieve a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @return {Object | Array | Matrix | string} Returns the subset\n   */\n\n  return function access(object, index) {\n    try {\n      if (Array.isArray(object)) {\n        return subset(object, index);\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index);\n      } else if (typeof object === 'string') {\n        // TODO: move getStringSubset into a separate util file, use that\n        return subset(object, index);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw new TypeError('Cannot apply a numeric index as object property');\n        }\n\n        return getSafeProperty(object, index.getObjectProperty());\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}\n\nexports.factory = factory;","\"use strict\";\n\n// TODO: remove these polyfills as soon as we have a build process that transpiles the code to ES5\n// Polyfill for IE 11 (Number.isFinite is used in `complex.js`)\n// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\nNumber.isFinite = Number.isFinite || function (value) {\n  return typeof value === 'number' && isFinite(value);\n}; // Polyfill for IE 11\n// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\n\n\nNumber.isNaN = Number.isNaN || function (value) {\n  return value !== value; // eslint-disable-line no-self-compare\n};","'use strict';\n\nvar operators = require('../operators');\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var mathTypeOf = load(require('../../function/utils/typeof'));\n  /**\n   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n   *\n   * @param {Node} condition   Condition, must result in a boolean\n   * @param {Node} trueExpr    Expression evaluated when condition is true\n   * @param {Node} falseExpr   Expression evaluated when condition is true\n   *\n   * @constructor ConditionalNode\n   * @extends {Node}\n   */\n\n  function ConditionalNode(condition, trueExpr, falseExpr) {\n    if (!(this instanceof ConditionalNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!type.isNode(condition)) throw new TypeError('Parameter condition must be a Node');\n    if (!type.isNode(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');\n    if (!type.isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');\n    this.condition = condition;\n    this.trueExpr = trueExpr;\n    this.falseExpr = falseExpr;\n  }\n\n  ConditionalNode.prototype = new Node();\n  ConditionalNode.prototype.type = 'ConditionalNode';\n  ConditionalNode.prototype.isConditionalNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConditionalNode.prototype._compile = function (math, argNames) {\n    var evalCondition = this.condition._compile(math, argNames);\n\n    var evalTrueExpr = this.trueExpr._compile(math, argNames);\n\n    var evalFalseExpr = this.falseExpr._compile(math, argNames);\n\n    return function evalConditionalNode(scope, args, context) {\n      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConditionalNode.prototype.forEach = function (callback) {\n    callback(this.condition, 'condition', this);\n    callback(this.trueExpr, 'trueExpr', this);\n    callback(this.falseExpr, 'falseExpr', this);\n  };\n  /**\n   * Create a new ConditionalNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ConditionalNode} Returns a transformed copy of the node\n   */\n\n\n  ConditionalNode.prototype.map = function (callback) {\n    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConditionalNode}\n   */\n\n\n  ConditionalNode.prototype.clone = function () {\n    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConditionalNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode\n    // or have lower or equal precedence\n    // NOTE: enclosing all OperatorNodes in parentheses is a decision\n    // purely based on aesthetics and readability\n\n    var condition = this.condition.toString(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n\n    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n      condition = '(' + condition + ')';\n    }\n\n    var trueExpr = this.trueExpr.toString(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n      trueExpr = '(' + trueExpr + ')';\n    }\n\n    var falseExpr = this.falseExpr.toString(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n      falseExpr = '(' + falseExpr + ')';\n    }\n\n    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConditionalNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConditionalNode',\n      condition: this.condition,\n      trueExpr: this.trueExpr,\n      falseExpr: this.falseExpr\n    };\n  };\n  /**\n   * Instantiate an ConditionalNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ConditionalNode\", \"condition\": ..., \"trueExpr\": ..., \"falseExpr\": ...}`,\n   *                       where mathjs is optional\n   * @returns {ConditionalNode}\n   */\n\n\n  ConditionalNode.fromJSON = function (json) {\n    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConditionalNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode\n    // or have lower or equal precedence\n    // NOTE: enclosing all OperatorNodes in parentheses is a decision\n    // purely based on aesthetics and readability\n\n    var condition = this.condition.toHTML(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n\n    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n      condition = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + condition + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var trueExpr = this.trueExpr.toHTML(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n      trueExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + trueExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var falseExpr = this.falseExpr.toHTML(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n      falseExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + falseExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return condition + '<span class=\"math-operator math-conditional-operator\">?</span>' + trueExpr + '<span class=\"math-operator math-conditional-operator\">:</span>' + falseExpr;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConditionalNode.prototype._toTex = function (options) {\n    return '\\\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\\\quad{\\\\text{if }\\\\;' + this.condition.toTex(options) + '}\\\\\\\\{' + this.falseExpr.toTex(options) + '}, &\\\\quad{\\\\text{otherwise}}\\\\end{cases}';\n  };\n  /**\n   * Test whether a condition is met\n   * @param {*} condition\n   * @returns {boolean} true if condition is true or non-zero, else false\n   */\n\n\n  function testCondition(condition) {\n    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {\n      return !!condition;\n    }\n\n    if (condition) {\n      if (type.isBigNumber(condition)) {\n        return !condition.isZero();\n      }\n\n      if (type.isComplex(condition)) {\n        return !!(condition.re || condition.im);\n      }\n\n      if (type.isUnit(condition)) {\n        return !!condition.value;\n      }\n    }\n\n    if (condition === null || condition === undefined) {\n      return false;\n    }\n\n    throw new TypeError('Unsupported type of condition \"' + mathTypeOf(condition) + '\"');\n  }\n\n  return ConditionalNode;\n}\n\nexports.name = 'ConditionalNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar isMatrix = require('./isMatrix');\n/**\n * Recursively loop over all elements in a given multi dimensional array\n * and invoke the callback on each of the elements.\n * @param {Array | Matrix} array\n * @param {Function} callback     The callback method is invoked with one\n *                                parameter: the current element in the array\n */\n\n\nmodule.exports = function deepForEach(array, callback) {\n  if (isMatrix(array)) {\n    array = array.valueOf();\n  }\n\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    } else {\n      callback(value);\n    }\n  }\n};","'use strict';\n\nvar util = require('../../utils/index');\n\nvar object = util.object;\nvar string = util.string;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var unaryMinus = load(require('../arithmetic/unaryMinus'));\n  var lup = load(require('../algebra/decomposition/lup'));\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n\n  var det = typed('det', {\n    'any': function any(x) {\n      return object.clone(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n\n      if (type.isMatrix(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n\n      switch (size.length) {\n        case 0:\n          // scalar\n          return object.clone(x);\n\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return object.clone(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            return _det(x.clone().valueOf(), rows, cols);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + string.format(size) + ')');\n      }\n    }\n  });\n  det.toTex = {\n    1: \"\\\\det\\\\left(${args[0]}\\\\right)\"\n  };\n  return det;\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return object.clone(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Compute the LU decomposition\n      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)\n\n      var _det2 = decomp.U[0][0];\n\n      for (var _i = 1; _i < rows; _i++) {\n        _det2 = multiply(_det2, decomp.U[_i][_i]);\n      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.\n      // This can be determined by counting the cycles. This is roughly a linear time algorithm.\n\n\n      var evenCycles = 0;\n      var i = 0;\n      var visited = [];\n\n      while (true) {\n        while (visited[i]) {\n          i++;\n        }\n\n        if (i >= rows) break;\n        var j = i;\n        var cycleLen = 0;\n\n        while (!visited[decomp.p[j]]) {\n          visited[decomp.p[j]] = true;\n          j = decomp.p[j];\n          cycleLen++;\n        }\n\n        if (cycleLen % 2 === 0) {\n          evenCycles++;\n        }\n      }\n\n      return evenCycles % 2 === 0 ? _det2 : unaryMinus(_det2);\n    }\n  }\n}\n\nexports.name = 'det';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar hasOwnProperty = require('./object').hasOwnProperty;\n/**\n * Get a property of a plain object\n * Throws an error in case the object is not a plain object or the\n * property is not defined on the object itself\n * @param {Object} object\n * @param {string} prop\n * @return {*} Returns the property value when safe\n */\n\n\nfunction getSafeProperty(object, prop) {\n  // only allow getting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    return object[prop];\n  }\n\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\n * Set a property on a plain object.\n * Throws an error in case the object is not a plain object or the\n * property would override an inherited property like .constructor or .toString\n * @param {Object} object\n * @param {string} prop\n * @param {*} value\n * @return {*} Returns the value\n */\n// TODO: merge this function into access.js?\n\n\nfunction setSafeProperty(object, prop, value) {\n  // only allow setting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    object[prop] = value;\n    return value;\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\n * Test whether a property is safe to use for an object.\n * For example .toString and .constructor are not safe\n * @param {string} prop\n * @return {boolean} Returns true when safe\n */\n\n\nfunction isSafeProperty(object, prop) {\n  if (!object || _typeof(object) !== 'object') {\n    return false;\n  } // SAFE: whitelisted\n  // e.g length\n\n\n  if (hasOwnProperty(safeNativeProperties, prop)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (prop in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (prop in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n/**\n * Validate whether a method is safe.\n * Throws an error when that's not the case.\n * @param {Object} object\n * @param {string} method\n */\n// TODO: merge this function into assign.js?\n\n\nfunction validateSafeMethod(object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n}\n/**\n * Check whether a method is safe.\n * Throws an error when that's not the case (for example for `constructor`).\n * @param {Object} object\n * @param {string} method\n * @return {boolean} Returns true when safe, false otherwise\n */\n\n\nfunction isSafeMethod(object, method) {\n  if (!object || typeof object[method] !== 'function') {\n    return false;\n  } // UNSAFE: ghosted\n  // e.g overridden toString\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\n\n\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\n    return false;\n  } // SAFE: whitelisted\n  // e.g toString\n\n\n  if (hasOwnProperty(safeNativeMethods, method)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (method in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (method in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n\nfunction isPlainObject(object) {\n  return _typeof(object) === 'object' && object && object.constructor === Object;\n}\n\nvar safeNativeProperties = {\n  length: true,\n  name: true\n};\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\nexports.getSafeProperty = getSafeProperty;\nexports.setSafeProperty = setSafeProperty;\nexports.isSafeProperty = isSafeProperty;\nexports.validateSafeMethod = validateSafeMethod;\nexports.isSafeMethod = isSafeMethod;\nexports.isPlainObject = isPlainObject;","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  var algorithm02 = function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (SparseMatrix)\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update C(i,j)\n\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero\n\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  return algorithm02;\n}\n\nexports.name = 'algorithm02';\nexports.factory = factory;","'use strict';\n/**\n * Test whether a value is a Matrix\n * @param {*} x\n * @returns {boolean} returns true with input is a Matrix\n *                    (like a DenseMatrix or SparseMatrix)\n */\n\nmodule.exports = function isMatrix(x) {\n  return x && x.constructor.prototype.isMatrix || false;\n};","'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    'number': function number(x) {\n      return x;\n    },\n    'string': function string(x) {\n      if (x === 'NaN') return NaN;\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      return num;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.toNumber();\n    },\n    'Fraction': function Fraction(x) {\n      return x.valueOf();\n    },\n    'Unit': function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    'null': function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, number);\n    }\n  });\n  number.toTex = {\n    0: \"0\",\n    1: \"\\\\left(${args[0]}\\\\right)\",\n    2: \"\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)\"\n  };\n  return number;\n}\n\nexports.name = 'number';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n\n\n  var unaryMinus = typed('unaryMinus', {\n    'number': function number(x) {\n      return -x;\n    },\n    'Complex': function Complex(x) {\n      return x.neg();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.neg();\n    },\n    'Fraction': function Fraction(x) {\n      return x.neg();\n    },\n    'Unit': function Unit(x) {\n      var res = x.clone();\n      res.value = unaryMinus(x.value);\n      return res;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryMinus(0) = 0\n      return deepMap(x, unaryMinus, true);\n    } // TODO: add support for string\n\n  });\n  unaryMinus.toTex = {\n    1: \"\".concat(latex.operators['unaryMinus'], \"\\\\left(${args[0]}\\\\right)\")\n  };\n  return unaryMinus;\n}\n\nexports.name = 'unaryMinus';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var getTypeOf = load(require('../function/utils/typeof'));\n  var validInputTypes = {\n    'string': true,\n    'number': true,\n    'BigNumber': true,\n    'Fraction': true // Load the conversion functions for each output type\n\n  };\n  var validOutputTypes = {\n    'number': load(require('./number')),\n    'BigNumber': load(require('./bignumber/function/bignumber')),\n    'Fraction': load(require('./fraction/function/fraction'))\n    /**\n     * Convert a numeric value to a specific type: number, BigNumber, or Fraction\n     *\n     * @param {string | number | BigNumber | Fraction } value\n     * @param {'number' | 'BigNumber' | 'Fraction'} outputType\n     * @return {number | BigNumber | Fraction} Returns an instance of the\n     *                                         numeric in the requested type\n     */\n\n  };\n\n  var numeric = function numeric(value, outputType) {\n    var inputType = getTypeOf(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n\n  numeric.toTex = function (node, options) {\n    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.\n    return node.args[0].toTex();\n  };\n\n  return numeric;\n} // FIXME: expose numeric in the math namespace after we've decided on a name and have written proper docs for this function. See https://github.com/josdejong/mathjs/pull/1270\n// exports.name = 'type._numeric'\n\n\nexports.path = 'type';\nexports.name = '_numeric';\nexports.factory = factory;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar resize = require('../../utils/array').resize;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros(3)                  // returns [0, 0, 0]\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n\n  var zeros = typed('zeros', {\n    '': function _() {\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\n    },\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      } else if (config.matrix === 'Array') {\n        return _zeros(size);\n      } else {\n        return _zeros(size, 'default');\n      }\n    },\n    'Array': _zeros,\n    'Matrix': function Matrix(size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _zeros(size.valueOf(), format);\n    }\n  });\n  zeros.toTex = undefined; // use default template\n\n  return zeros;\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (type.isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n} // TODO: zeros contains almost the same code as ones. Reuse this?\n\n\nexports.name = 'zeros';\nexports.factory = factory;","'use strict';\n\nvar map = require('../../utils/array').map;\n\nvar escape = require('../../utils/string').escape;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var Range = load(require('../../type/matrix/Range'));\n  var isArray = Array.isArray;\n  /**\n   * @constructor IndexNode\n   * @extends Node\n   *\n   * Describes a subset of a matrix or an object property.\n   * Cannot be used on its own, needs to be used within an AccessorNode or\n   * AssignmentNode.\n   *\n   * @param {Node[]} dimensions\n   * @param {boolean} [dotNotation=false]  Optional property describing whether\n   *                                       this index was written using dot\n   *                                       notation like `a.b`, or using bracket\n   *                                       notation like `a[\"b\"]` (default).\n   *                                       Used to stringify an IndexNode.\n   */\n\n  function IndexNode(dimensions, dotNotation) {\n    if (!(this instanceof IndexNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.dimensions = dimensions;\n    this.dotNotation = dotNotation || false; // validate input\n\n    if (!isArray(dimensions) || !dimensions.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');\n    }\n\n    if (this.dotNotation && !this.isObjectProperty()) {\n      throw new Error('dotNotation only applicable for object properties');\n    } // TODO: deprecated since v3, remove some day\n\n\n    var deprecated = function deprecated() {\n      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');\n    };\n\n    Object.defineProperty(this, 'object', {\n      get: deprecated,\n      set: deprecated\n    });\n  }\n\n  IndexNode.prototype = new Node();\n  IndexNode.prototype.type = 'IndexNode';\n  IndexNode.prototype.isIndexNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  IndexNode.prototype._compile = function (math, argNames) {\n    // TODO: implement support for bignumber (currently bignumbers are silently\n    //       reduced to numbers when changing the value to zero-based)\n    // TODO: Optimization: when the range values are ConstantNodes,\n    //       we can beforehand resolve the zero-based value\n    // optimization for a simple object property\n    var evalDimensions = map(this.dimensions, function (range, i) {\n      if (type.isRangeNode(range)) {\n        if (range.needsEnd()) {\n          // create a range containing end (like '4:end')\n          var childArgNames = Object.create(argNames);\n          childArgNames['end'] = true;\n\n          var evalStart = range.start._compile(math, childArgNames);\n\n          var evalEnd = range.end._compile(math, childArgNames);\n\n          var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {\n            return 1;\n          };\n          return function evalDimension(scope, args, context) {\n            var size = math.size(context).valueOf();\n            var childArgs = Object.create(args);\n            childArgs['end'] = size[i];\n            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));\n          };\n        } else {\n          // create range\n          var _evalStart = range.start._compile(math, argNames);\n\n          var _evalEnd = range.end._compile(math, argNames);\n\n          var _evalStep = range.step ? range.step._compile(math, argNames) : function () {\n            return 1;\n          };\n\n          return function evalDimension(scope, args, context) {\n            return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));\n          };\n        }\n      } else if (type.isSymbolNode(range) && range.name === 'end') {\n        // SymbolNode 'end'\n        var _childArgNames = Object.create(argNames);\n\n        _childArgNames['end'] = true;\n\n        var evalRange = range._compile(math, _childArgNames);\n\n        return function evalDimension(scope, args, context) {\n          var size = math.size(context).valueOf();\n          var childArgs = Object.create(args);\n          childArgs['end'] = size[i];\n          return evalRange(scope, childArgs, context);\n        };\n      } else {\n        // ConstantNode\n        var _evalRange = range._compile(math, argNames);\n\n        return function evalDimension(scope, args, context) {\n          return _evalRange(scope, args, context);\n        };\n      }\n    });\n    return function evalIndexNode(scope, args, context) {\n      var dimensions = map(evalDimensions, function (evalDimension) {\n        return evalDimension(scope, args, context);\n      });\n      return math.index.apply(math, dimensions);\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  IndexNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.dimensions.length; i++) {\n      callback(this.dimensions[i], 'dimensions[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new IndexNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {IndexNode} Returns a transformed copy of the node\n   */\n\n\n  IndexNode.prototype.map = function (callback) {\n    var dimensions = [];\n\n    for (var i = 0; i < this.dimensions.length; i++) {\n      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));\n    }\n\n    return new IndexNode(dimensions);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {IndexNode}\n   */\n\n\n  IndexNode.prototype.clone = function () {\n    return new IndexNode(this.dimensions.slice(0));\n  };\n  /**\n   * Test whether this IndexNode contains a single property name\n   * @return {boolean}\n   */\n\n\n  IndexNode.prototype.isObjectProperty = function () {\n    return this.dimensions.length === 1 && type.isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';\n  };\n  /**\n   * Returns the property name if IndexNode contains a property.\n   * If not, returns null.\n   * @return {string | null}\n   */\n\n\n  IndexNode.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this.dimensions[0].value : null;\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  IndexNode.prototype._toString = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  IndexNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'IndexNode',\n      dimensions: this.dimensions,\n      dotNotation: this.dotNotation\n    };\n  };\n  /**\n   * Instantiate an IndexNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"IndexNode\", dimensions: [...], dotNotation: false}`,\n   *                       where mathjs is optional\n   * @returns {IndexNode}\n   */\n\n\n  IndexNode.fromJSON = function (json) {\n    return new IndexNode(json.dimensions, json.dotNotation);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  IndexNode.prototype.toHTML = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n    var dimensions = [];\n\n    for (var i = 0; i < this.dimensions.length; i++) {\n      dimensions[i] = this.dimensions[i].toHTML();\n    }\n\n    if (this.dotNotation) {\n      return '<span class=\"math-operator math-accessor-operator\">.</span>' + '<span class=\"math-symbol math-property\">' + escape(this.getObjectProperty()) + '</span>';\n    } else {\n      return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + dimensions.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n    }\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  IndexNode.prototype._toTex = function (options) {\n    var dimensions = this.dimensions.map(function (range) {\n      return range.toTex(options);\n    });\n    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';\n  }; // helper function to create a Range from start, step and end\n\n\n  function createRange(start, end, step) {\n    return new Range(type.isBigNumber(start) ? start.toNumber() : start, type.isBigNumber(end) ? end.toNumber() : end, type.isBigNumber(step) ? step.toNumber() : step);\n  }\n\n  return IndexNode;\n}\n\nexports.name = 'IndexNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar clone = require('../../../utils/object').clone;\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n\n  var algorithm14 = function algorithm14(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix\n\n    return new DenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  }; // recursive function\n\n\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n\n    return cv;\n  }\n\n  return algorithm14;\n}\n\nexports.name = 'algorithm14';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [require('./and'), require('./not'), require('./or'), require('./xor')];","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n\n\n  var not = typed('not', {\n    'number': function number(x) {\n      return !x;\n    },\n    'Complex': function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    'Unit': function Unit(x) {\n      return x.value !== null ? not(x.value) : true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, not);\n    }\n  });\n  not.toTex = {\n    1: latex.operators['not'] + \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return not;\n}\n\nexports.name = 'not';\nexports.factory = factory;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","'use strict'; // Reserved keywords not allowed to use in the parser\n\nmodule.exports = {\n  end: true\n};","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar size = require('../../utils/array').size;\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var identity = load(require('../matrix/identity'));\n  var multiply = load(require('./multiply'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var fraction = load(require('../../type/fraction/function/fraction'));\n  var number = load(require('../../type/number'));\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   * Matrix exponentiation is supported for square matrices `x`, and positive\n   * integer exponents `y`.\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                   The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n\n  var pow = typed('pow', {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.d !== 1) {\n        if (config.predictable) {\n          throw new Error('Function pow does not support non-integer exponents for fractions.');\n        } else {\n          return _pow(x.valueOf(), y.valueOf());\n        }\n      } else {\n        return x.pow(y);\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number': function UnitNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {} // fraction() throws an error if y is Infinity, etc.\n      // Unable to express y as a fraction, so continue on\n\n    } // x^Infinity === 0 if -1 < x < 1\n    // A real number 0 is returned instead of complex(0)\n\n\n    if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n      return 0;\n    } // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n\n\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return Math.pow(x, y);\n    } else {\n      return new type.Complex(x, 0).pow(y, 0);\n    }\n  }\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Array}\n   * @private\n   */\n\n\n  function _powArray(x, y) {\n    if (!isInteger(y) || y < 0) {\n      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n    } // verify that A is a 2 dimensional square matrix\n\n\n    var s = size(x);\n\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n\n    var res = identity(s[0]).valueOf();\n    var px = x;\n\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n\n      y >>= 1;\n      px = multiply(px, px);\n    }\n\n    return res;\n  }\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n\n  pow.toTex = {\n    2: \"\\\\left(${args[0]}\\\\right)\".concat(latex.operators['pow'], \"{${args[1]}}\")\n  };\n  return pow;\n}\n\nexports.name = 'pow';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var getType = load(require('../../utils/typeof'));\n  /**\n   * Improve error messages for statistics functions. Errors are typically\n   * thrown in an internally used function like larger, causing the error\n   * not to mention the function (like max) which is actually used by the user.\n   *\n   * @param {Error} err\n   * @param {String} fnName\n   * @param {*} [value]\n   * @return {Error}\n   */\n\n  return function improveErrorMessage(err, fnName, value) {\n    // TODO: add information with the index (also needs transform in expression parser)\n    var details;\n\n    if (String(err).indexOf('Unexpected type') !== -1) {\n      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n      return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n    }\n\n    if (String(err).indexOf('complex numbers') !== -1) {\n      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n      return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n    }\n\n    return err;\n  };\n}\n\nexports.factory = factory;","'use strict';\n\nvar operators = require('../operators');\n\nvar latex = require('../../utils/latex');\n\nvar escape = require('../../utils/string').escape;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n\n  var getSafeProperty = require('../../utils/customs').getSafeProperty;\n  /**\n   * A node representing a chained conditional expression, such as 'x > y > z'\n   *\n   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters\n   * @param {Node[]} params   The parameters that will be compared\n   *\n   * @constructor RelationalNode\n   * @extends {Node}\n   */\n\n\n  function RelationalNode(conditionals, params) {\n    if (!(this instanceof RelationalNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');\n    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');\n    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');\n    this.conditionals = conditionals;\n    this.params = params;\n  }\n\n  RelationalNode.prototype = new Node();\n  RelationalNode.prototype.type = 'RelationalNode';\n  RelationalNode.prototype.isRelationalNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  RelationalNode.prototype._compile = function (math, argNames) {\n    var self = this;\n    var compiled = this.params.map(function (p) {\n      return p._compile(math, argNames);\n    });\n    return function evalRelationalNode(scope, args, context) {\n      var evalLhs;\n      var evalRhs = compiled[0](scope, args, context);\n\n      for (var i = 0; i < self.conditionals.length; i++) {\n        evalLhs = evalRhs;\n        evalRhs = compiled[i + 1](scope, args, context);\n        var condFn = getSafeProperty(math, self.conditionals[i]);\n\n        if (!condFn(evalLhs, evalRhs)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  RelationalNode.prototype.forEach = function (callback) {\n    var _this = this;\n\n    this.params.forEach(function (n, i) {\n      return callback(n, 'params[' + i + ']', _this);\n    }, this);\n  };\n  /**\n   * Create a new RelationalNode having its childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RelationalNode} Returns a transformed copy of the node\n   */\n\n\n  RelationalNode.prototype.map = function (callback) {\n    var _this2 = this;\n\n    return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {\n      return _this2._ifNode(callback(n, 'params[' + i + ']', _this2));\n    }, this));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RelationalNode}\n   */\n\n\n  RelationalNode.prototype.clone = function () {\n    return new RelationalNode(this.conditionals, this.params);\n  };\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = operators.getPrecedence(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n    });\n    var operatorMap = {\n      'equal': '==',\n      'unequal': '!=',\n      'smaller': '<',\n      'larger': '>',\n      'smallerEq': '<=',\n      'largerEq': '>='\n    };\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  RelationalNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'RelationalNode',\n      conditionals: this.conditionals,\n      params: this.params\n    };\n  };\n  /**\n   * Instantiate a RelationalNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"RelationalNode\", \"condition\": ..., \"trueExpr\": ..., \"falseExpr\": ...}`,\n   *                       where mathjs is optional\n   * @returns {RelationalNode}\n   */\n\n\n  RelationalNode.fromJSON = function (json) {\n    return new RelationalNode(json.conditionals, json.params);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = operators.getPrecedence(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n    });\n    var operatorMap = {\n      'equal': '==',\n      'unequal': '!=',\n      'smaller': '<',\n      'larger': '>',\n      'smallerEq': '<=',\n      'largerEq': '>='\n    };\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = operators.getPrecedence(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toString(options) + '\\right)' : p.toString(options);\n    });\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += latex.operators[this.conditionals[i]] + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n\n  return RelationalNode;\n}\n\nexports.name = 'RelationalNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar objectUtils = require('../object');\n/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexports.format = function (value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'auto':\n      // TODO: clean up some day. Deprecated since: 2018-01-24\n      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0\n      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {\n        var fixedOptions = objectUtils.map(options, function (x) {\n          return x;\n        });\n        fixedOptions.exponential = undefined;\n\n        if (options.exponential.lower !== undefined) {\n          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);\n        }\n\n        if (options.exponential.upper !== undefined) {\n          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);\n        }\n\n        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));\n        return exports.format(value, fixedOptions);\n      } // determine lower and upper bound for exponential notation.\n      // TODO: implement support for upper and lower to be BigNumbers themselves\n\n\n      var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n      var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero\n\n      if (value.isZero()) return '0'; // determine whether or not to output exponential notation\n\n      var str;\n      var exp = value.logarithm();\n\n      if (exp.gte(lowerExp) && exp.lt(upperExp)) {\n        // normal number notation\n        str = value.toSignificantDigits(precision).toFixed();\n      } else {\n        // exponential notation\n        str = exports.toExponential(value, precision);\n      } // remove trailing zeros after the decimal point\n\n\n      return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\n\n\nexports.toExponential = function (value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n};\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=undefined] Optional number of decimals after the\n *                                       decimal point. Undefined by default.\n */\n\n\nexports.toFixed = function (value, precision) {\n  return value.toFixed(precision);\n};","'use strict';\n/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\n\nfunction ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';\n  this.stack = new Error().stack;\n}\n\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;\nmodule.exports = ArgumentsError;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var ceil = typed('ceil', {\n    'number': Math.ceil,\n    'Complex': function Complex(x) {\n      return x.ceil();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.ceil();\n    },\n    'Fraction': function Fraction(x) {\n      return x.ceil();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, ceil, true);\n    }\n  });\n  ceil.toTex = {\n    1: \"\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil\"\n  };\n  return ceil;\n}\n\nexports.name = 'ceil';\nexports.factory = factory;","'use strict';\n\nvar size = require('../../utils/array').size;\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var divide = load(require('../arithmetic/divide'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n\n  var mean = typed('mean', {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n  mean.toTex = undefined; // use default template\n\n  return mean;\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      var s = Array.isArray(array) ? size(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw improveErrorMessage(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n\n  function _mean(array) {\n    var sum = 0;\n    var num = 0;\n    deepForEach(array, function (value) {\n      try {\n        sum = add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'mean', value);\n      }\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n}\n\nexports.name = 'mean';\nexports.factory = factory;","'use strict';\n\nvar latex = require('../../utils/latex');\n\nvar escape = require('../../utils/string').escape;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed, math) {\n  var Node = load(require('./Node'));\n  /**\n   * Check whether some name is a valueless unit like \"inch\".\n   * @param {string} name\n   * @return {boolean}\n   */\n\n  function isValuelessUnit(name) {\n    return type.Unit ? type.Unit.isValuelessUnit(name) : false;\n  }\n  /**\n   * @constructor SymbolNode\n   * @extends {Node}\n   * A symbol node can hold and resolve a symbol\n   * @param {string} name\n   * @extends {Node}\n   */\n\n\n  function SymbolNode(name) {\n    if (!(this instanceof SymbolNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    this.name = name;\n  }\n\n  SymbolNode.prototype = new Node();\n  SymbolNode.prototype.type = 'SymbolNode';\n  SymbolNode.prototype.isSymbolNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  SymbolNode.prototype._compile = function (math, argNames) {\n    var name = this.name;\n\n    if (hasOwnProperty(argNames, name)) {\n      // this is a FunctionAssignment argument\n      // (like an x when inside the expression of a function assignment `f(x) = ...`)\n      return function (scope, args, context) {\n        return args[name];\n      };\n    } else if (name in math) {\n      return function (scope, args, context) {\n        return name in scope ? getSafeProperty(scope, name) : getSafeProperty(math, name);\n      };\n    } else {\n      var isUnit = isValuelessUnit(name);\n      return function (scope, args, context) {\n        return name in scope ? getSafeProperty(scope, name) : isUnit ? new type.Unit(null, name) : undef(name);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  SymbolNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs\n\n  /**\n   * Create a new SymbolNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {SymbolNode} Returns a clone of the node\n   */\n  ;\n\n  SymbolNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Throws an error 'Undefined symbol {name}'\n   * @param {string} name\n   */\n\n\n  function undef(name) {\n    throw new Error('Undefined symbol ' + name);\n  }\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {SymbolNode}\n   */\n\n\n  SymbolNode.prototype.clone = function () {\n    return new SymbolNode(this.name);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  SymbolNode.prototype._toString = function (options) {\n    return this.name;\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  SymbolNode.prototype.toHTML = function (options) {\n    var name = escape(this.name);\n\n    if (name === 'true' || name === 'false') {\n      return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n    } else if (name === 'i') {\n      return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n    } else if (name === 'Infinity') {\n      return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n    } else if (name === 'NaN') {\n      return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n    } else if (name === 'null') {\n      return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n    } else if (name === 'undefined') {\n      return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\n    }\n\n    return '<span class=\"math-symbol\">' + name + '</span>';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  SymbolNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'SymbolNode',\n      name: this.name\n    };\n  };\n  /**\n   * Instantiate a SymbolNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\n   *                       where mathjs is optional\n   * @returns {SymbolNode}\n   */\n\n\n  SymbolNode.fromJSON = function (json) {\n    return new SymbolNode(json.name);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  SymbolNode.prototype._toTex = function (options) {\n    var isUnit = false;\n\n    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\n      isUnit = true;\n    }\n\n    var symbol = latex.toSymbol(this.name, isUnit);\n\n    if (symbol[0] === '\\\\') {\n      // no space needed if the symbol starts with '\\'\n      return symbol;\n    } // the space prevents symbols from breaking stuff like '\\cdot' if it's written right before the symbol\n\n\n    return ' ' + symbol;\n  };\n\n  return SymbolNode;\n}\n\nexports.name = 'SymbolNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.factory = factory;","'use strict';\n\nvar isCollection = require('./isCollection');\n/**\n * Test whether an array contains collections\n * @param {Array} array\n * @returns {boolean} Returns true when the array contains one or multiple\n *                    collections (Arrays or Matrices). Returns false otherwise.\n */\n\n\nmodule.exports = function containsCollections(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n};","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3)             // returns false\n   *    math.larger(5, 2 + 2)         // returns true\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.larger(a, b)             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n\n\n  var larger = typed('larger', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x > y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === 1;\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return larger(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, larger);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, larger, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, larger, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, larger);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return larger(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return larger(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return larger(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, larger, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, larger, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, larger, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, larger, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, larger, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, larger, true).valueOf();\n    }\n  });\n  larger.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['larger'], \"${args[1]}\\\\right)\")\n  };\n  return larger;\n}\n\nexports.name = 'larger';\nexports.factory = factory;","'use strict';\n\nvar isMatrix = require('./isMatrix');\n/**\n * Test whether a value is a collection: an Array or Matrix\n * @param {*} x\n * @returns {boolean} isCollection\n */\n\n\nmodule.exports = function isCollection(x) {\n  return Array.isArray(x) || isMatrix(x);\n};","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var smaller = load(require('../relational/smaller'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the maximum value of a matrix or a  list of values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dim)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3)                  // returns 1\n   *     math.min([2, 1, 4, 3])                // returns 1\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n\n  var min = typed('min', {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n\n      return _min(args);\n    }\n  });\n  min.toTex = \"\\\\min\\\\left(${args}\\\\right)\";\n  return min;\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n\n\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    return min;\n  }\n}\n\nexports.name = 'min';\nexports.factory = factory;","'use strict';\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var access = load(require('./utils/access'));\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!type.isNode(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n\n    if (!type.isIndexNode(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index._compile(math, argNames);\n\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        return getSafeProperty(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n\n    if (needParenthesis(this.object)) {\n      object = \"\\\\left(' + object + '\\\\right)\";\n    }\n\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(type.isAccessorNode(node) || type.isArrayNode(node) || type.isConstantNode(node) || type.isFunctionNode(node) || type.isObjectNode(node) || type.isParenthesisNode(node) || type.isSymbolNode(node));\n  }\n\n  return AccessorNode;\n}\n\nexports.name = 'AccessorNode';\nexports.path = 'expression.node';\nexports.factory = factory;","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","'use strict';\n\nvar Emitter = require('tiny-emitter');\n/**\n * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n * @param {Object} obj\n * @return {Object} obj\n */\n\n\nexports.mixin = function (obj) {\n  // create event emitter\n  var emitter = new Emitter(); // bind methods to obj (we don't want to expose the emitter.e Array...)\n\n  obj.on = emitter.on.bind(emitter);\n  obj.off = emitter.off.bind(emitter);\n  obj.once = emitter.once.bind(emitter);\n  obj.emit = emitter.emit.bind(emitter);\n  return obj;\n};","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar keywords = require('../keywords');\n\nvar deepEqual = require('../../utils/object').deepEqual;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory(type, config, load, typed, math) {\n  /**\n   * Node\n   */\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n\n\n  Node.prototype.eval = function (scope) {\n    return this.compile().eval(scope);\n  };\n\n  Node.prototype.type = 'Node';\n  Node.prototype.isNode = true;\n  Node.prototype.comment = '';\n  /**\n   * Compile the node into an optimized, evauatable JavaScript function\n   * @return {{eval: function([Object])}} expr  Returns an object with a function 'eval',\n   *                                  which can be invoked as expr.eval([scope: Object]),\n   *                                  where scope is an optional object with\n   *                                  variables.\n   */\n\n  Node.prototype.compile = function () {\n    var expr = this._compile(math.expression.mathWithTransform, {});\n\n    var args = {};\n    var context = null;\n    return {\n      eval: function evalNode(scope) {\n        var s = scope || {};\n\n        _validateScope(s);\n\n        return expr(s, args, context);\n      }\n    };\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  Node.prototype._compile = function (math, argNames) {\n    throw new Error('Method _compile should be implemented by type ' + this.type);\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n\n\n  Node.prototype._ifNode = function (node) {\n    if (!type.isNode(node)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n\n    return node;\n  };\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n\n\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    callback(this, null, null); // eslint-disable-line standard/no-callback-literal\n    // recursively traverse over all childs of a node\n\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n\n        _traverse(child, callback);\n      });\n    }\n\n    _traverse(this, callback);\n  };\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     const res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n   *         return new ConstantNode(2)\n   *       }\n   *       else {\n   *         return node\n   *       }\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n\n\n  Node.prototype.transform = function (callback) {\n    // traverse over all childs\n    function _transform(node, callback) {\n      return node.map(function (child, path, parent) {\n        var replacement = callback(child, path, parent);\n        return _transform(replacement, callback);\n      });\n    }\n\n    var replacement = callback(this, null, null); // eslint-disable-line standard/no-callback-literal\n\n    return _transform(replacement, callback);\n  };\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     const results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name === 'x')\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n\n\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  }; // TODO: deprecated since version 1.1.0, remove this some day\n\n\n  Node.prototype.find = function () {\n    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');\n  }; // TODO: deprecated since version 1.1.0, remove this some day\n\n\n  Node.prototype.match = function () {\n    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');\n  };\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n\n\n  Node.prototype.equals = function (other) {\n    return other ? deepEqual(this, other) : false;\n  };\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toString = function (options) {\n    var customString;\n\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          break;\n\n        case 'function':\n          customString = options.handler(this, options);\n          break;\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n   * implementations of Node\n   * @returns {Object}\n   */\n\n\n  Node.prototype.toJSON = function () {\n    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n  };\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toHTML = function (options) {\n    var customString;\n\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          break;\n\n        case 'function':\n          customString = options.handler(this, options);\n          break;\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this.toHTML(options);\n  };\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toString = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          break;\n\n        case 'function':\n          customTex = options.handler(this, options);\n          break;\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    }\n\n    return this._toTex(options);\n  };\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toTex = function (options) {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n\n\n  Node.prototype.getContent = function () {\n    return this;\n  };\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n\n\n  function _validateScope(scope) {\n    for (var symbol in scope) {\n      if (hasOwnProperty(scope, symbol)) {\n        if (symbol in keywords) {\n          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n        }\n      }\n    }\n  }\n\n  return Node;\n}\n\nexports.name = 'Node';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.factory = factory;","'use strict';\n\nexports.array = require('./array');\nexports['boolean'] = require('./boolean');\nexports['function'] = require('./function');\nexports.number = require('./number');\nexports.object = require('./object');\nexports.string = require('./string');\nexports.emitter = require('./emitter');","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  var bignumber = typed('bignumber', {\n    '': function _() {\n      return new type.BigNumber(0);\n    },\n    'number': function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new type.BigNumber(x + '');\n    },\n    'string': function string(x) {\n      return new type.BigNumber(x);\n    },\n    'BigNumber': function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    'Fraction': function Fraction(x) {\n      return new type.BigNumber(x.n).div(x.d).times(x.s);\n    },\n    'null': function _null(x) {\n      return new type.BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, bignumber);\n    }\n  });\n  bignumber.toTex = {\n    0: '0',\n    1: \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return bignumber;\n}\n\nexports.name = 'bignumber';\nexports.factory = factory;","'use strict';\n\nvar array = require('../../utils/array');\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.identity(n)\n   *    math.identity(n, format)\n   *    math.identity(m, n)\n   *    math.identity(m, n, format)\n   *    math.identity([m, n])\n   *    math.identity([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n\n  var identity = typed('identity', {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    'string': function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    'Array': function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    'Matrix': function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n  identity.toTex = undefined; // use default template\n\n  return identity;\n\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n\n      case 1:\n        return _identity(size[0], size[0], format);\n\n      case 2:\n        return _identity(size[0], size[1], format);\n\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = type.isBigNumber(rows) || type.isBigNumber(cols) ? type.BigNumber : null;\n    if (type.isBigNumber(rows)) rows = rows.toNumber();\n    if (type.isBigNumber(cols)) cols = cols.toNumber();\n\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    var one = Big ? new type.BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols]; // check we need to return a matrix\n\n    if (format) {\n      // get matrix storage constructor\n      var F = type.Matrix.storage(format); // create diagonal matrix (use optimized implementation for storage format)\n\n      return F.diagonal(size, one, 0, defaultValue);\n    } // create and resize array\n\n\n    var res = array.resize([], size, defaultValue); // fill in ones on the diagonal\n\n    var minimum = rows < cols ? rows : cols; // fill diagonal\n\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n\n    return res;\n  }\n}\n\nexports.name = 'identity';\nexports.factory = factory;","'use strict';\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar ArgumentsError = require('../error/ArgumentsError');\n\nvar deepMap = require('../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var numeric = load(require('../type/numeric'));\n  var AccessorNode = load(require('./node/AccessorNode'));\n  var ArrayNode = load(require('./node/ArrayNode'));\n  var AssignmentNode = load(require('./node/AssignmentNode'));\n  var BlockNode = load(require('./node/BlockNode'));\n  var ConditionalNode = load(require('./node/ConditionalNode'));\n  var ConstantNode = load(require('./node/ConstantNode'));\n  var FunctionAssignmentNode = load(require('./node/FunctionAssignmentNode'));\n  var IndexNode = load(require('./node/IndexNode'));\n  var ObjectNode = load(require('./node/ObjectNode'));\n  var OperatorNode = load(require('./node/OperatorNode'));\n  var ParenthesisNode = load(require('./node/ParenthesisNode'));\n  var FunctionNode = load(require('./node/FunctionNode'));\n  var RangeNode = load(require('./node/RangeNode'));\n  var RelationalNode = load(require('./node/RelationalNode'));\n  var SymbolNode = load(require('./node/SymbolNode'));\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval().\n   *\n   * Syntax:\n   *\n   *     parse(expr)\n   *     parse(expr, options)\n   *     parse([expr1, expr2, expr3, ...])\n   *     parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     const node = parse('sqrt(3^2 + 4^2)')\n   *     node.compile(math).eval() // 5\n   *\n   *     let scope = {a:3, b:4}\n   *     const node = parse('a * b') // 12\n   *     const code = node.compile(math)\n   *     code.eval(scope) // 12\n   *     scope.a = 5\n   *     code.eval(scope) // 20\n   *\n   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].compile(math).eval() // 12\n   *\n   * @param {string | string[] | Matrix} expr\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n\n  function parse(expr, options) {\n    if (arguments.length !== 1 && arguments.length !== 2) {\n      throw new ArgumentsError('parse', arguments.length, 1, 2);\n    } // pass extra nodes\n\n\n    var extraNodes = options && options.nodes ? options.nodes : {};\n\n    if (typeof expr === 'string') {\n      // parse a single expression\n      return parseStart(expr, extraNodes);\n    } else if (Array.isArray(expr) || expr instanceof type.Matrix) {\n      // parse an array or matrix with expressions\n      return deepMap(expr, function (elem) {\n        if (typeof elem !== 'string') throw new TypeError('String expected');\n        return parseStart(elem, extraNodes);\n      });\n    } else {\n      // oops\n      throw new TypeError('String or matrix expected');\n    }\n  } // token types enumeration\n\n\n  var TOKENTYPE = {\n    NULL: 0,\n    DELIMITER: 1,\n    NUMBER: 2,\n    SYMBOL: 3,\n    UNKNOWN: 4 // map with all delimiters\n\n  };\n  var DELIMITERS = {\n    ',': true,\n    '(': true,\n    ')': true,\n    '[': true,\n    ']': true,\n    '{': true,\n    '}': true,\n    '\"': true,\n    '\\'': true,\n    ';': true,\n    '+': true,\n    '-': true,\n    '*': true,\n    '.*': true,\n    '/': true,\n    './': true,\n    '%': true,\n    '^': true,\n    '.^': true,\n    '~': true,\n    '!': true,\n    '&': true,\n    '|': true,\n    '^|': true,\n    '=': true,\n    ':': true,\n    '?': true,\n    '==': true,\n    '!=': true,\n    '<': true,\n    '>': true,\n    '<=': true,\n    '>=': true,\n    '<<': true,\n    '>>': true,\n    '>>>': true // map with all named delimiters\n\n  };\n  var NAMED_DELIMITERS = {\n    'mod': true,\n    'to': true,\n    'in': true,\n    'and': true,\n    'xor': true,\n    'or': true,\n    'not': true\n  };\n  var CONSTANTS = {\n    'true': true,\n    'false': false,\n    'null': null,\n    'undefined': undefined\n  };\n  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];\n\n  function initialState() {\n    return {\n      extraNodes: {},\n      // current extra nodes, must be careful not to mutate\n      expression: '',\n      // current expression\n      comment: '',\n      // last parsed comment\n      index: 0,\n      // current index in expr\n      token: '',\n      // current token\n      tokenType: TOKENTYPE.NULL,\n      // type of the token\n      nestingLevel: 0,\n      // level of nesting inside parameters, used to ignore newline characters\n      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here\n\n    };\n  }\n  /**\n   * View upto `length` characters of the expression starting at the current character.\n   *\n   * @param {State} state\n   * @param {number} [length=1] Number of characters to view\n   * @returns {string}\n   * @private\n   */\n\n\n  function currentString(state, length) {\n    return state.expression.substr(state.index, length);\n  }\n  /**\n   * View the current character. Returns '' if end of expression is reached.\n   *\n   * @param {State} state\n   * @returns {string}\n   * @private\n   */\n\n\n  function currentCharacter(state) {\n    return currentString(state, 1);\n  }\n  /**\n   * Get the next character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n\n\n  function next(state) {\n    state.index++;\n  }\n  /**\n   * Preview the previous character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n\n  function prevCharacter(state) {\n    return state.expression.charAt(state.index - 1);\n  }\n  /**\n   * Preview the next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n\n  function nextCharacter(state) {\n    return state.expression.charAt(state.index + 1);\n  }\n  /**\n   * Get next token in the current string expr.\n   * The token and token type are available as token and tokenType\n   * @private\n   */\n\n\n  function getToken(state) {\n    state.tokenType = TOKENTYPE.NULL;\n    state.token = '';\n    state.comment = ''; // skip over whitespaces\n    // space, tab, and newline when inside parameters\n\n    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {\n      next(state);\n    } // skip comment\n\n\n    if (currentCharacter(state) === '#') {\n      while (currentCharacter(state) !== '\\n' && currentCharacter(state) !== '') {\n        state.comment += currentCharacter(state);\n        next(state);\n      }\n    } // check for end of expression\n\n\n    if (currentCharacter(state) === '') {\n      // token is still empty\n      state.tokenType = TOKENTYPE.DELIMITER;\n      return;\n    } // check for new line character\n\n\n    if (currentCharacter(state) === '\\n' && !state.nestingLevel) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = currentCharacter(state);\n      next(state);\n      return;\n    }\n\n    var c1 = currentCharacter(state);\n    var c2 = currentString(state, 2);\n    var c3 = currentString(state, 3);\n\n    if (c3.length === 3 && DELIMITERS[c3]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c3;\n      next(state);\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 2 characters\n\n\n    if (c2.length === 2 && DELIMITERS[c2]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c2;\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 1 character\n\n\n    if (DELIMITERS[c1]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c1;\n      next(state);\n      return;\n    } // check for a number\n\n\n    if (parse.isDigitDot(c1)) {\n      state.tokenType = TOKENTYPE.NUMBER; // get number, can have a single dot\n\n      if (currentCharacter(state) === '.') {\n        state.token += currentCharacter(state);\n        next(state);\n\n        if (!parse.isDigit(currentCharacter(state))) {\n          // this is no number, it is just a dot (can be dot notation)\n          state.tokenType = TOKENTYPE.DELIMITER;\n        }\n      } else {\n        while (parse.isDigit(currentCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n\n        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n      }\n\n      while (parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      } // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"\n\n\n      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {\n        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {\n          state.token += currentCharacter(state);\n          next(state);\n\n          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {\n            state.token += currentCharacter(state);\n            next(state);\n          } // Scientific notation MUST be followed by an exponent\n\n\n          if (!parse.isDigit(currentCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n\n          while (parse.isDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n\n          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n        } else if (nextCharacter(state) === '.') {\n          next(state);\n          throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n        }\n      }\n\n      return;\n    } // check for variables, functions, named operators\n\n\n    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {\n      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      }\n\n      if (NAMED_DELIMITERS.hasOwnProperty(state.token)) {\n        state.tokenType = TOKENTYPE.DELIMITER;\n      } else {\n        state.tokenType = TOKENTYPE.SYMBOL;\n      }\n\n      return;\n    } // something unknown is found, wrong characters -> a syntax error\n\n\n    state.tokenType = TOKENTYPE.UNKNOWN;\n\n    while (currentCharacter(state) !== '') {\n      state.token += currentCharacter(state);\n      next(state);\n    }\n\n    throw createSyntaxError(state, 'Syntax error in part \"' + state.token + '\"');\n  }\n  /**\n   * Get next token and skip newline tokens\n   */\n\n\n  function getTokenSkipNewline(state) {\n    do {\n      getToken(state);\n    } while (state.token === '\\n'); // eslint-disable-line no-unmodified-loop-condition\n\n  }\n  /**\n   * Open parameters.\n   * New line characters will be ignored until closeParams(state) is called\n   */\n\n\n  function openParams(state) {\n    state.nestingLevel++;\n  }\n  /**\n   * Close parameters.\n   * New line characters will no longer be ignored\n   */\n\n\n  function closeParams(state) {\n    state.nestingLevel--;\n  }\n  /**\n   * Checks whether the current character `c` is a valid alpha character:\n   *\n   * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n   * - An underscore                        Ascii: _\n   * - A dollar sign                        Ascii: $\n   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n   * - A greek letter                       Unicode: \\u0370 - \\u03FF\n   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n   *\n   * The previous and next characters are needed to determine whether\n   * this character is part of a unicode surrogate pair.\n   *\n   * @param {string} c      Current character in the expression\n   * @param {string} cPrev  Previous character\n   * @param {string} cNext  Next character\n   * @return {boolean}\n   */\n\n\n  parse.isAlpha = function isAlpha(c, cPrev, cNext) {\n    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);\n  };\n  /**\n   * Test whether a character is a valid latin, greek, or letter-like character\n   * @param {string} c\n   * @return {boolean}\n   */\n\n\n  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {\n    return /^[a-zA-Z_$\\u00C0-\\u02AF\\u0370-\\u03FF\\u2100-\\u214F]$/.test(c);\n  };\n  /**\n   * Test whether two given 16 bit characters form a surrogate pair of a\n   * unicode math symbol.\n   *\n   * http://unicode-table.com/en/\n   * http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n   *\n   * Note: In ES6 will be unicode aware:\n   * http://stackoverflow.com/questions/280712/javascript-unicode-regexes\n   * https://mathiasbynens.be/notes/es6-unicode-regex\n   *\n   * @param {string} high\n   * @param {string} low\n   * @return {boolean}\n   */\n\n\n  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {\n    return /^[\\uD835]$/.test(high) && /^[\\uDC00-\\uDFFF]$/.test(low) && /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);\n  };\n  /**\n   * Check whether given character c is a white space character: space, tab, or enter\n   * @param {string} c\n   * @param {number} nestingLevel\n   * @return {boolean}\n   */\n\n\n  parse.isWhitespace = function isWhitespace(c, nestingLevel) {\n    // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?\n    return c === ' ' || c === '\\t' || c === '\\n' && nestingLevel > 0;\n  };\n  /**\n   * Test whether the character c is a decimal mark (dot).\n   * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n   * @param {string} c\n   * @param {string} cNext\n   * @return {boolean}\n   */\n\n\n  parse.isDecimalMark = function isDecimalMark(c, cNext) {\n    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';\n  };\n  /**\n   * checks if the given char c is a digit or dot\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n\n  parse.isDigitDot = function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  };\n  /**\n   * checks if the given char c is a digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n\n  parse.isDigit = function isDigit(c) {\n    return c >= '0' && c <= '9';\n  };\n  /**\n   * Start of the parse levels below, in order of precedence\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseStart(expression, extraNodes) {\n    var state = initialState();\n\n    _extends(state, {\n      expression: expression,\n      extraNodes: extraNodes\n    });\n\n    getToken(state);\n    var node = parseBlock(state); // check for garbage at the end of the expression\n    // an expression ends with a empty character '' and tokenType DELIMITER\n\n    if (state.token !== '') {\n      if (state.tokenType === TOKENTYPE.DELIMITER) {\n        // user entered a not existing operator like \"//\"\n        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean !== ?\"\n        throw createError(state, 'Unexpected operator ' + state.token);\n      } else {\n        throw createSyntaxError(state, 'Unexpected part \"' + state.token + '\"');\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Parse a block with expressions. Expressions can be separated by a newline\n   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output\n   * of the preceding line is returned.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBlock(state) {\n    var node;\n    var blocks = [];\n    var visible;\n\n    if (state.token !== '' && state.token !== '\\n' && state.token !== ';') {\n      node = parseAssignment(state);\n      node.comment = state.comment;\n    } // TODO: simplify this loop\n\n\n    while (state.token === '\\n' || state.token === ';') {\n      // eslint-disable-line no-unmodified-loop-condition\n      if (blocks.length === 0 && node) {\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n\n      getToken(state);\n\n      if (state.token !== '\\n' && state.token !== ';' && state.token !== '') {\n        node = parseAssignment(state);\n        node.comment = state.comment;\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n    }\n\n    if (blocks.length > 0) {\n      return new BlockNode(blocks);\n    } else {\n      if (!node) {\n        node = new ConstantNode(undefined);\n        node.comment = state.comment;\n      }\n\n      return node;\n    }\n  }\n  /**\n   * Assignment of a function or variable,\n   * - can be a variable like 'a=2.3'\n   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n   * - defining a function like 'f(x) = x^2'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAssignment(state) {\n    var name, args, value, valid;\n    var node = parseConditional(state);\n\n    if (state.token === '=') {\n      if (type.isSymbolNode(node)) {\n        // parse a variable assignment like 'a = 2/3'\n        name = node.name;\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(new SymbolNode(name), value);\n      } else if (type.isAccessorNode(node)) {\n        // parse a matrix subset assignment like 'A[1,2] = 4'\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(node.object, node.index, value);\n      } else if (type.isFunctionNode(node) && type.isSymbolNode(node.fn)) {\n        // parse function assignment like 'f(x) = x^2'\n        valid = true;\n        args = [];\n        name = node.name;\n        node.args.forEach(function (arg, index) {\n          if (type.isSymbolNode(arg)) {\n            args[index] = arg.name;\n          } else {\n            valid = false;\n          }\n        });\n\n        if (valid) {\n          getTokenSkipNewline(state);\n          value = parseAssignment(state);\n          return new FunctionAssignmentNode(name, args, value);\n        }\n      }\n\n      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');\n    }\n\n    return node;\n  }\n  /**\n   * conditional operation\n   *\n   *     condition ? truePart : falsePart\n   *\n   * Note: conditional operator is right-associative\n   *\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseConditional(state) {\n    var node = parseLogicalOr(state);\n\n    while (state.token === '?') {\n      // eslint-disable-line no-unmodified-loop-condition\n      // set a conditional level, the range operator will be ignored as long\n      // as conditionalLevel === state.nestingLevel.\n      var prev = state.conditionalLevel;\n      state.conditionalLevel = state.nestingLevel;\n      getTokenSkipNewline(state);\n      var condition = node;\n      var trueExpr = parseAssignment(state);\n      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');\n      state.conditionalLevel = null;\n      getTokenSkipNewline(state);\n      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity\n\n      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level\n\n      state.conditionalLevel = prev;\n    }\n\n    return node;\n  }\n  /**\n   * logical or, 'x or y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalOr(state) {\n    var node = parseLogicalXor(state);\n\n    while (state.token === 'or') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * logical exclusive or, 'x xor y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalXor(state) {\n    var node = parseLogicalAnd(state);\n\n    while (state.token === 'xor') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * logical and, 'x and y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalAnd(state) {\n    var node = parseBitwiseOr(state);\n\n    while (state.token === 'and') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise or, 'x | y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseOr(state) {\n    var node = parseBitwiseXor(state);\n\n    while (state.token === '|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise exclusive or (xor), 'x ^| y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseXor(state) {\n    var node = parseBitwiseAnd(state);\n\n    while (state.token === '^|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise and, 'x & y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseAnd(state) {\n    var node = parseRelational(state);\n\n    while (state.token === '&') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * Parse a chained conditional, like 'a > b >= c'\n   * @return {Node} node\n   */\n\n\n  function parseRelational(state) {\n    var params = [parseShift(state)];\n    var conditionals = [];\n    var operators = {\n      '==': 'equal',\n      '!=': 'unequal',\n      '<': 'smaller',\n      '>': 'larger',\n      '<=': 'smallerEq',\n      '>=': 'largerEq'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      var cond = {\n        name: state.token,\n        fn: operators[state.token]\n      };\n      conditionals.push(cond);\n      getTokenSkipNewline(state);\n      params.push(parseShift(state));\n    }\n\n    if (params.length === 1) {\n      return params[0];\n    } else if (params.length === 2) {\n      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);\n    } else {\n      return new RelationalNode(conditionals.map(function (c) {\n        return c.fn;\n      }), params);\n    }\n  }\n  /**\n   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseShift(state) {\n    var node, operators, name, fn, params;\n    node = parseConversion(state);\n    operators = {\n      '<<': 'leftShift',\n      '>>': 'rightArithShift',\n      '>>>': 'rightLogShift'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseConversion(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * conversion operators 'to' and 'in'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseConversion(state) {\n    var node, operators, name, fn, params;\n    node = parseRange(state);\n    operators = {\n      'to': 'to',\n      'in': 'to' // alias of 'to'\n\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n\n      if (name === 'in' && state.token === '') {\n        // end of expression -> this is the unit 'in' ('inch')\n        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);\n      } else {\n        // operator 'a to b' or 'a in b'\n        params = [node, parseRange(state)];\n        node = new OperatorNode(name, fn, params);\n      }\n    }\n\n    return node;\n  }\n  /**\n   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseRange(state) {\n    var node;\n    var params = [];\n\n    if (state.token === ':') {\n      // implicit start=1 (one-based)\n      node = new ConstantNode(1);\n    } else {\n      // explicit start\n      node = parseAddSubtract(state);\n    }\n\n    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {\n      // we ignore the range operator when a conditional operator is being processed on the same level\n      params.push(node); // parse step and end\n\n      while (state.token === ':' && params.length < 3) {\n        // eslint-disable-line no-unmodified-loop-condition\n        getTokenSkipNewline(state);\n\n        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {\n          // implicit end\n          params.push(new SymbolNode('end'));\n        } else {\n          // explicit end\n          params.push(parseAddSubtract(state));\n        }\n      }\n\n      if (params.length === 3) {\n        // params = [start, step, end]\n        node = new RangeNode(params[0], params[2], params[1]); // start, end, step\n      } else {\n        // length === 2\n        // params = [start, end]\n        node = new RangeNode(params[0], params[1]); // start, end\n      }\n    }\n\n    return node;\n  }\n  /**\n   * add or subtract\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAddSubtract(state) {\n    var node, operators, name, fn, params;\n    node = parseMultiplyDivide(state);\n    operators = {\n      '+': 'add',\n      '-': 'subtract'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseMultiplyDivide(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * multiply, divide, modulus\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseMultiplyDivide(state) {\n    var node, last, operators, name, fn;\n    node = parseImplicitMultiplication(state);\n    last = node;\n    operators = {\n      '*': 'multiply',\n      '.*': 'dotMultiply',\n      '/': 'divide',\n      './': 'dotDivide',\n      '%': 'mod',\n      'mod': 'mod'\n    };\n\n    while (true) {\n      if (operators.hasOwnProperty(state.token)) {\n        // explicit operators\n        name = state.token;\n        fn = operators[name];\n        getTokenSkipNewline(state);\n        last = parseImplicitMultiplication(state);\n        node = new OperatorNode(name, fn, [node, last]);\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * implicit multiplication\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseImplicitMultiplication(state) {\n    var node, last;\n    node = parseRule2(state);\n    last = node;\n\n    while (true) {\n      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && type.isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !type.isConstantNode(last) && (!type.isOperatorNode(last) || last.op === '!') || state.token === '(') {\n        // parse implicit multiplication\n        //\n        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'\n        // number:      implicit multiplication like '(2+3)2'\n        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'\n        last = parseRule2(state);\n        node = new OperatorNode('*', 'multiply', [node, last], true\n        /* implicit */\n        );\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Infamous \"rule 2\" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370\n   * Explicit division gets higher precedence than implicit multiplication\n   * when the division matches this pattern: [number] / [number] [symbol]\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseRule2(state) {\n    var node = parseUnary(state);\n    var last = node;\n    var tokenStates = [];\n\n    while (true) {\n      // Match the \"number /\" part of the pattern \"number / number symbol\"\n      if (state.token === '/' && type.isConstantNode(last)) {\n        // Look ahead to see if the next token is a number\n        tokenStates.push(_extends({}, state));\n        getTokenSkipNewline(state); // Match the \"number / number\" part of the pattern\n\n        if (state.tokenType === TOKENTYPE.NUMBER) {\n          // Look ahead again\n          tokenStates.push(_extends({}, state));\n          getTokenSkipNewline(state); // Match the \"symbol\" part of the pattern, or a left parenthesis\n\n          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {\n            // We've matched the pattern \"number / number symbol\".\n            // Rewind once and build the \"number / number\" node; the symbol will be consumed later\n            _extends(state, tokenStates.pop());\n\n            tokenStates.pop();\n            last = parseUnary(state);\n            node = new OperatorNode('/', 'divide', [node, last]);\n          } else {\n            // Not a match, so rewind\n            tokenStates.pop();\n\n            _extends(state, tokenStates.pop());\n\n            break;\n          }\n        } else {\n          // Not a match, so rewind\n          _extends(state, tokenStates.pop());\n\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Unary plus and minus, and logical and bitwise not\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseUnary(state) {\n    var name, params, fn;\n    var operators = {\n      '-': 'unaryMinus',\n      '+': 'unaryPlus',\n      '~': 'bitNot',\n      'not': 'not'\n    };\n\n    if (operators.hasOwnProperty(state.token)) {\n      fn = operators[state.token];\n      name = state.token;\n      getTokenSkipNewline(state);\n      params = [parseUnary(state)];\n      return new OperatorNode(name, fn, params);\n    }\n\n    return parsePow(state);\n  }\n  /**\n   * power\n   * Note: power operator is right associative\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parsePow(state) {\n    var node, name, fn, params;\n    node = parseLeftHandOperators(state);\n\n    if (state.token === '^' || state.token === '.^') {\n      name = state.token;\n      fn = name === '^' ? 'pow' : 'dotPow';\n      getTokenSkipNewline(state);\n      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'\n\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * Left hand operators: factorial x!, ctranspose x'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLeftHandOperators(state) {\n    var node, operators, name, fn, params;\n    node = parseCustomNodes(state);\n    operators = {\n      '!': 'factorial',\n      '\\'': 'ctranspose'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getToken(state);\n      params = [node];\n      node = new OperatorNode(name, fn, params);\n      node = parseAccessors(state, node);\n    }\n\n    return node;\n  }\n  /**\n   * Parse a custom node handler. A node handler can be used to process\n   * nodes in a custom way, for example for handling a plot.\n   *\n   * A handler must be passed as second argument of the parse function.\n   * - must extend math.expression.node.Node\n   * - must contain a function _compile(defs: Object) : string\n   * - must contain a function find(filter: Object) : Node[]\n   * - must contain a function toString() : string\n   * - the constructor is called with a single argument containing all parameters\n   *\n   * For example:\n   *\n   *     nodes = {\n   *       'plot': PlotHandler\n   *     }\n   *\n   * The constructor of the handler is called as:\n   *\n   *     node = new PlotHandler(params)\n   *\n   * The handler will be invoked when evaluating an expression like:\n   *\n   *     node = math.parse('plot(sin(x), x)', nodes)\n   *\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseCustomNodes(state) {\n    var params = [];\n\n    if (state.tokenType === TOKENTYPE.SYMBOL && state.extraNodes.hasOwnProperty(state.token)) {\n      var CustomNode = state.extraNodes[state.token];\n      getToken(state); // parse parameters\n\n      if (state.token === '(') {\n        params = [];\n        openParams(state);\n        getToken(state);\n\n        if (state.token !== ')') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n\n        if (state.token !== ')') {\n          throw createSyntaxError(state, 'Parenthesis ) expected');\n        }\n\n        closeParams(state);\n        getToken(state);\n      } // create a new custom node\n      // noinspection JSValidateTypes\n\n\n      return new CustomNode(params);\n    }\n\n    return parseSymbol(state);\n  }\n  /**\n   * parse symbols: functions, variables, constants, units\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseSymbol(state) {\n    var node, name;\n\n    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {\n      name = state.token;\n      getToken(state);\n\n      if (CONSTANTS.hasOwnProperty(name)) {\n        // true, false, null, ...\n        node = new ConstantNode(CONSTANTS[name]);\n      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {\n        // NaN, Infinity\n        node = new ConstantNode(numeric(name, 'number'));\n      } else {\n        node = new SymbolNode(name);\n      } // parse function parameters and matrix index\n\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseDoubleQuotesString(state);\n  }\n  /**\n   * parse accessors:\n   * - function invocation in round brackets (...), for example sqrt(2)\n   * - index enclosed in square brackets [...], for example A[2,3]\n   * - dot notation for properties, like foo.bar\n   * @param {Node} node    Node on which to apply the parameters. If there\n   *                       are no parameters in the expression, the node\n   *                       itself is returned\n   * @param {string[]} [types]  Filter the types of notations\n   *                            can be ['(', '[', '.']\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAccessors(state, node, types) {\n    var params;\n\n    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      params = [];\n\n      if (state.token === '(') {\n        if (type.isSymbolNode(node) || type.isAccessorNode(node)) {\n          // function invocation like fn(2, 3) or obj.fn(2, 3)\n          openParams(state);\n          getToken(state);\n\n          if (state.token !== ')') {\n            params.push(parseAssignment(state)); // parse a list with parameters\n\n            while (state.token === ',') {\n              // eslint-disable-line no-unmodified-loop-condition\n              getToken(state);\n              params.push(parseAssignment(state));\n            }\n          }\n\n          if (state.token !== ')') {\n            throw createSyntaxError(state, 'Parenthesis ) expected');\n          }\n\n          closeParams(state);\n          getToken(state);\n          node = new FunctionNode(node, params);\n        } else {\n          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)\n          // don't parse it here but let it be handled by parseImplicitMultiplication\n          // with correct precedence\n          return node;\n        }\n      } else if (state.token === '[') {\n        // index notation like variable[2, 3]\n        openParams(state);\n        getToken(state);\n\n        if (state.token !== ']') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n\n        if (state.token !== ']') {\n          throw createSyntaxError(state, 'Parenthesis ] expected');\n        }\n\n        closeParams(state);\n        getToken(state);\n        node = new AccessorNode(node, new IndexNode(params));\n      } else {\n        // dot notation like variable.prop\n        getToken(state);\n\n        if (state.tokenType !== TOKENTYPE.SYMBOL) {\n          throw createSyntaxError(state, 'Property name expected after dot');\n        }\n\n        params.push(new ConstantNode(state.token));\n        getToken(state);\n        var dotNotation = true;\n        node = new AccessorNode(node, new IndexNode(params, dotNotation));\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Parse a double quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseDoubleQuotesString(state) {\n    var node, str;\n\n    if (state.token === '\"') {\n      str = parseDoubleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseSingleQuotesString(state);\n  }\n  /**\n   * Parse a string surrounded by double quotes \"...\"\n   * @return {string}\n   */\n\n\n  function parseDoubleQuotesStringToken(state) {\n    var str = '';\n\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\"') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\\"'\n        str += currentCharacter(state);\n        next(state);\n      }\n\n      str += currentCharacter(state);\n      next(state);\n    }\n\n    getToken(state);\n\n    if (state.token !== '\"') {\n      throw createSyntaxError(state, 'End of string \" expected');\n    }\n\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * Parse a single quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseSingleQuotesString(state) {\n    var node, str;\n\n    if (state.token === '\\'') {\n      str = parseSingleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseMatrix(state);\n  }\n  /**\n   * Parse a string surrounded by single quotes '...'\n   * @return {string}\n   */\n\n\n  function parseSingleQuotesStringToken(state) {\n    var str = '';\n\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\\'') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\''\n        str += currentCharacter(state);\n        next(state);\n      }\n\n      str += currentCharacter(state);\n      next(state);\n    }\n\n    getToken(state);\n\n    if (state.token !== '\\'') {\n      throw createSyntaxError(state, 'End of string \\' expected');\n    }\n\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * parse the matrix\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseMatrix(state) {\n    var array, params, rows, cols;\n\n    if (state.token === '[') {\n      // matrix [...]\n      openParams(state);\n      getToken(state);\n\n      if (state.token !== ']') {\n        // this is a non-empty matrix\n        var row = parseRow(state);\n\n        if (state.token === ';') {\n          // 2 dimensional array\n          rows = 1;\n          params = [row]; // the rows of the matrix are separated by dot-comma's\n\n          while (state.token === ';') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params[rows] = parseRow(state);\n            rows++;\n          }\n\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n\n          closeParams(state);\n          getToken(state); // check if the number of columns matches in all rows\n\n          cols = params[0].items.length;\n\n          for (var r = 1; r < rows; r++) {\n            if (params[r].items.length !== cols) {\n              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');\n            }\n          }\n\n          array = new ArrayNode(params);\n        } else {\n          // 1 dimensional vector\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n\n          closeParams(state);\n          getToken(state);\n          array = row;\n        }\n      } else {\n        // this is an empty matrix \"[ ]\"\n        closeParams(state);\n        getToken(state);\n        array = new ArrayNode([]);\n      }\n\n      return parseAccessors(state, array);\n    }\n\n    return parseObject(state);\n  }\n  /**\n   * Parse a single comma-separated row from a matrix, like 'a, b, c'\n   * @return {ArrayNode} node\n   */\n\n\n  function parseRow(state) {\n    var params = [parseAssignment(state)];\n    var len = 1;\n\n    while (state.token === ',') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getToken(state); // parse expression\n\n      params[len] = parseAssignment(state);\n      len++;\n    }\n\n    return new ArrayNode(params);\n  }\n  /**\n   * parse an object, enclosed in angle brackets{...}, for example {value: 2}\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseObject(state) {\n    if (state.token === '{') {\n      var key;\n      var properties = {};\n\n      do {\n        getToken(state);\n\n        if (state.token !== '}') {\n          // parse key\n          if (state.token === '\"') {\n            key = parseDoubleQuotesStringToken(state);\n          } else if (state.token === '\\'') {\n            key = parseSingleQuotesStringToken(state);\n          } else if (state.tokenType === TOKENTYPE.SYMBOL) {\n            key = state.token;\n            getToken(state);\n          } else {\n            throw createSyntaxError(state, 'Symbol or string expected as object key');\n          } // parse key/value separator\n\n\n          if (state.token !== ':') {\n            throw createSyntaxError(state, 'Colon : expected after object key');\n          }\n\n          getToken(state); // parse key\n\n          properties[key] = parseAssignment(state);\n        }\n      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition\n\n\n      if (state.token !== '}') {\n        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');\n      }\n\n      getToken(state);\n      var node = new ObjectNode(properties); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseNumber(state);\n  }\n  /**\n   * parse a number\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseNumber(state) {\n    var numberStr;\n\n    if (state.tokenType === TOKENTYPE.NUMBER) {\n      // this is a number\n      numberStr = state.token;\n      getToken(state);\n      return new ConstantNode(numeric(numberStr, config.number));\n    }\n\n    return parseParentheses(state);\n  }\n  /**\n   * parentheses\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseParentheses(state) {\n    var node; // check if it is a parenthesized expression\n\n    if (state.token === '(') {\n      // parentheses (...)\n      openParams(state);\n      getToken(state);\n      node = parseAssignment(state); // start again\n\n      if (state.token !== ')') {\n        throw createSyntaxError(state, 'Parenthesis ) expected');\n      }\n\n      closeParams(state);\n      getToken(state);\n      node = new ParenthesisNode(node);\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseEnd(state);\n  }\n  /**\n   * Evaluated when the expression is not yet ended but expected to end\n   * @return {Node} res\n   * @private\n   */\n\n\n  function parseEnd(state) {\n    if (state.token === '') {\n      // syntax error or unexpected end of expression\n      throw createSyntaxError(state, 'Unexpected end of expression');\n    } else {\n      throw createSyntaxError(state, 'Value expected');\n    }\n  }\n  /**\n   * Shortcut for getting the current row value (one based)\n   * Returns the line of the currently handled expression\n   * @private\n   */\n\n  /* TODO: implement keeping track on the row number\n  function row () {\n    return null\n  }\n  */\n\n  /**\n   * Shortcut for getting the current col value (one based)\n   * Returns the column (position) where the last state.token starts\n   * @private\n   */\n\n\n  function col(state) {\n    return state.index - state.token.length + 1;\n  }\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {SyntaxError} instantiated error\n   * @private\n   */\n\n\n  function createSyntaxError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n    return error;\n  }\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {Error} instantiated error\n   * @private\n   */\n\n\n  function createError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n    return error;\n  }\n\n  return parse;\n}\n\nexports.name = 'parse';\nexports.path = 'expression';\nexports.factory = factory;","var defineProperty = require(\"./defineProperty\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread;","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  B(i,j)       ; B(i,j) !== 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm04 = function algorithm04(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspace\n\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop A(:,j)\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // update c\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop B(:,j)\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row exists in A\n\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]); // check for zero\n\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i); // update workspace\n\n          wb[i] = mark; // check we need to process values\n\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // check workspace has value @ i\n\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i]; // increment pointer\n\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i]; // increment pointer\n\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm04;\n}\n\nexports.name = 'algorithm04';\nexports.factory = factory;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar toFixed = require('../../utils/number').toFixed;\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nvar NO_INT = 'Number of decimals in function round must be an integer';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.2)              // returns number 3\n   *    math.round(3.8)              // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  var round = typed('round', {\n    'number': Math.round,\n    'number, number': function numberNumber(x, n) {\n      if (!isInteger(n)) {\n        throw new TypeError(NO_INT);\n      }\n\n      if (n < 0 || n > 15) {\n        throw new Error('Number of decimals in function round must be in te range of 0-15');\n      }\n\n      return _round(x, n);\n    },\n    'Complex': function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    'Fraction': function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, round, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, round, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, round, false);\n    },\n    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, round, true);\n    },\n    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, round, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, round, false).valueOf();\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, round, true).valueOf();\n    }\n  });\n  round.toTex = {\n    1: \"\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil\",\n    2: undefined // use default template\n\n  };\n  return round;\n}\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n * @private\n */\n\n\nfunction _round(value, decimals) {\n  return parseFloat(toFixed(value, decimals));\n}\n\nexports.name = 'round';\nexports.factory = factory;","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n\n  var latex = require('../../utils/latex.js');\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3)               // returns number 5\n   *    math.add(2, 3, 4)            // returns number 9\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(-4, 1)\n   *    math.add(a, b)               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   *    const c = math.unit('5 cm')\n   *    const d = math.unit('2.1 mm')\n   *    math.add(c, d)               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n\n  var add = typed('add', extend({\n    // we extend the signatures of addScalar with signatures dealing with matrices\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, addScalar);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, addScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, addScalar, true);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, addScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return add(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return add(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return add(x, matrix(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, addScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, y, addScalar, false);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, addScalar, true);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, addScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, addScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, addScalar, true).valueOf();\n    },\n    'any, any': addScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = add(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = add(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, addScalar.signatures));\n  add.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['add'], \"${args[1]}\\\\right)\")\n  };\n  return add;\n}\n\nexports.name = 'add';\nexports.factory = factory;","'use strict';\n/**\n * Test whether value is a boolean\n * @param {*} value\n * @return {boolean} isBoolean\n */\n\nexports.isBoolean = function (value) {\n  return typeof value === 'boolean';\n};","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nvar array = require('../../utils/array');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var multiplyScalar = load(require('./multiplyScalar'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  var DenseMatrix = type.DenseMatrix;\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n  var multiply = typed('multiply', extend({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': function ArrayArray(x, y) {\n      // check dimensions\n      _validateMatrixDimensions(array.size(x), array.size(y)); // use dense matrix implementation\n\n\n      var m = multiply(matrix(x), matrix(y)); // return array or scalar\n\n      return type.isMatrix(m) ? m.valueOf() : m;\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(x, matrix(y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(matrix(x, y.storage()), y);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = multiply(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = multiply(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, multiplyScalar.signatures));\n\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n\n            break;\n\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n\n            break;\n\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    } // a dense\n\n\n    var adata = a._data;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result (do not initialize it with zero)\n\n\n    var c = mf(adata[0], bdata[0]); // loop data\n\n    for (var i = 1; i < n; i++) {\n      // multiply and accumulate\n      c = af(c, mf(adata[i], bdata[i]));\n    }\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n\n      c[j] = sum;\n    } // return matrix\n\n\n    return new DenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n\n      c[i] = sum;\n    } // return matrix\n\n\n    return new DenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n\n    return new DenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n\n  multiply.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['multiply'], \"${args[1]}\\\\right)\")\n  };\n  return multiply;\n}\n\nexports.name = 'multiply';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var zeros = load(require('../matrix/zeros'));\n  var not = load(require('./not'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n\n  var and = typed('and', {\n    'number, number': function numberNumber(x, y) {\n      return !!(x && y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return and(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, and, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, and, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, and, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, and);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return and(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return and(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return and(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(x, y, and, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(x, y, and, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(y, x, and, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(y, x, and, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return and(matrix(x), y).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return and(x, matrix(y)).valueOf();\n    }\n  });\n  and.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['and'], \"${args[1]}\\\\right)\")\n  };\n  return and;\n}\n\nexports.name = 'and';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var unaryMinus = load(require('./unaryMinus'));\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14')); // TODO: split function subtract in two: subtract and subtractScalar\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  var subtract = typed('subtract', {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = subtract(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, subtract);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, subtract, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, subtract, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, subtract);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return subtract(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, subtract);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, subtract, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, subtract, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, subtract, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, subtract, true).valueOf();\n    }\n  });\n  subtract.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['subtract'], \"${args[1]}\\\\right)\")\n  };\n  return subtract;\n}\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}\n\nexports.name = 'subtract';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar formatNumber = require('./number').format;\n\nvar formatBigNumber = require('./bignumber/formatter').format;\n\nvar isBigNumber = require('./bignumber/isBigNumber');\n/**\n * Test whether value is a string\n * @param {*} value\n * @return {boolean} isString\n */\n\n\nexports.isString = function (value) {\n  return typeof value === 'string';\n};\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\n\n\nexports.endsWith = function (text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n};\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\n\n\nexports.format = function (value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if (exports.isString(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && _typeof(value) === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString() !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString();\n    } else {\n      var entries = [];\n\n      for (var key in value) {\n        if (value.hasOwnProperty(key)) {\n          entries.push('\"' + key + '\": ' + exports.format(value[key], options));\n        }\n      }\n\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n};\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\n\nexports.stringify = function (value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n};\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\n\nexports.escape = function (value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n};\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n\n      str += formatArray(array[i], options);\n    }\n\n    str += ']';\n    return str;\n  } else {\n    return exports.format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\n\nfunction looksLikeFraction(value) {\n  return value && _typeof(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nvar number = require('../../utils/number');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i')   // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isInteger = typed('isInteger', {\n    'number': number.isInteger,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    'BigNumber': function BigNumber(x) {\n      return x.isInt();\n    },\n    'Fraction': function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, isInteger);\n    }\n  });\n  return isInteger;\n}\n\nexports.name = 'isInteger';\nexports.factory = factory;","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","'use strict';\n\nvar util = require('../../utils/index');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var divideScalar = load(require('../arithmetic/divideScalar'));\n  var addScalar = load(require('../arithmetic/addScalar'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var unaryMinus = load(require('../arithmetic/unaryMinus'));\n  var det = load(require('../matrix/det'));\n  var identity = load(require('./identity'));\n  var abs = load(require('../arithmetic/abs'));\n  /**\n   * Calculate the inverse of a square matrix.\n   *\n   * Syntax:\n   *\n   *     math.inv(x)\n   *\n   * Examples:\n   *\n   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]\n   *     math.inv(4)                 // returns 0.25\n   *     1 / 4                       // returns 0.25\n   *\n   * See also:\n   *\n   *     det, transpose\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n\n  var inv = typed('inv', {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = type.isMatrix(x) ? x.size() : util.array.size(x);\n\n      switch (size.length) {\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            if (type.isMatrix(x)) {\n              return matrix([divideScalar(1, x.valueOf()[0])]);\n            } else {\n              return [divideScalar(1, x[0])];\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            if (type.isMatrix(x)) {\n              return matrix(_inv(x.valueOf(), rows, cols), x.storage());\n            } else {\n              // return an Array\n              return _inv(x, rows, cols);\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + util.string.format(size) + ')');\n      }\n    },\n    'any': function any(x) {\n      // scalar\n      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n    }\n  });\n  /**\n   * Calculate the inverse of a square matrix\n   * @param {Array[]} mat     A square matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns, must equal rows\n   * @return {Array[]} inv    Inverse matrix\n   * @private\n   */\n\n  function _inv(mat, rows, cols) {\n    var r, s, f, value, temp;\n\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      value = mat[0][0];\n\n      if (value === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n\n      return [[divideScalar(1, value)]];\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      var d = det(mat);\n\n      if (d === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n\n      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];\n    } else {\n      // this is a matrix of 3 x 3 or larger\n      // calculate inverse using gauss-jordan elimination\n      //      http://en.wikipedia.org/wiki/Gaussian_elimination\n      //      http://mathworld.wolfram.com/MatrixInverse.html\n      //      http://math.uww.edu/~mcfarlat/inverse.htm\n      // make a copy of the matrix (only the arrays, not of the elements)\n      var A = mat.concat();\n\n      for (r = 0; r < rows; r++) {\n        A[r] = A[r].concat();\n      } // create an identity matrix which in the end will contain the\n      // matrix inverse\n\n\n      var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions\n\n      for (var c = 0; c < cols; c++) {\n        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]\n        var ABig = abs(A[c][c]);\n        var rBig = c;\n        r = c + 1;\n\n        while (r < rows) {\n          if (abs(A[r][c]) > ABig) {\n            ABig = abs(A[r][c]);\n            rBig = r;\n          }\n\n          r++;\n        }\n\n        if (ABig === 0) {\n          throw Error('Cannot calculate inverse, determinant is zero');\n        }\n\n        r = rBig;\n\n        if (r !== c) {\n          temp = A[c];\n          A[c] = A[r];\n          A[r] = temp;\n          temp = B[c];\n          B[c] = B[r];\n          B[r] = temp;\n        } // eliminate non-zero values on the other rows at column c\n\n\n        var Ac = A[c];\n        var Bc = B[c];\n\n        for (r = 0; r < rows; r++) {\n          var Ar = A[r];\n          var Br = B[r];\n\n          if (r !== c) {\n            // eliminate value at column c and row r\n            if (Ar[c] !== 0) {\n              f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value\n              // at column c\n\n              for (s = c; s < cols; s++) {\n                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n              }\n\n              for (s = 0; s < cols; s++) {\n                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));\n              }\n            }\n          } else {\n            // normalize value at Acc to 1,\n            // divide each value on row r with the value at Acc\n            f = Ac[c];\n\n            for (s = c; s < cols; s++) {\n              Ar[s] = divideScalar(Ar[s], f);\n            }\n\n            for (s = 0; s < cols; s++) {\n              Br[s] = divideScalar(Br[s], f);\n            }\n          }\n        }\n      }\n\n      return B;\n    }\n  }\n\n  inv.toTex = {\n    1: \"\\\\left(${args[0]}\\\\right)^{-1}\"\n  };\n  return inv;\n}\n\nexports.name = 'inv';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.floor(c)                // returns Complex 3 - 3i\n   *\n   *    math.floor([3.2, 3.8, -4.7]) // returns Array [3, 3, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var floor = typed('floor', {\n    'number': Math.floor,\n    'Complex': function Complex(x) {\n      return x.floor();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.floor();\n    },\n    'Fraction': function Fraction(x) {\n      return x.floor();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, floor, true);\n    }\n  });\n  floor.toTex = {\n    1: \"\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor\"\n  };\n  return floor;\n}\n\nexports.name = 'floor';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format\n   *\n   * @return {Matrix} The created matrix\n   */\n  var matrix = typed('matrix', {\n    '': function _() {\n      return _create([]);\n    },\n    'string': function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    'Array': function Array(data) {\n      return _create(data);\n    },\n    'Matrix': function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n  matrix.toTex = {\n    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',\n    1: \"\\\\left(${args[0]}\\\\right)\",\n    2: \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return matrix;\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    var M = type.Matrix.storage(format || 'default'); // create instance\n\n    return new M(data, datatype);\n  }\n}\n\nexports.name = 'matrix';\nexports.factory = factory;","\"use strict\";\n\n// Map the characters to escape to their escaped values. The list is derived\n// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar defaultEscapes = {\n  \"{\": \"\\\\{\",\n  \"}\": \"\\\\}\",\n  \"\\\\\": \"\\\\textbackslash{}\",\n  \"#\": \"\\\\#\",\n  $: \"\\\\$\",\n  \"%\": \"\\\\%\",\n  \"&\": \"\\\\&\",\n  \"^\": \"\\\\textasciicircum{}\",\n  _: \"\\\\_\",\n  \"~\": \"\\\\textasciitilde{}\"\n};\nvar formatEscapes = {\n  \"–\": \"\\\\--\",\n  \"—\": \"\\\\---\",\n  \" \": \"~\",\n  \"\\t\": \"\\\\qquad{}\",\n  \"\\r\\n\": \"\\\\newline{}\",\n  \"\\n\": \"\\\\newline{}\"\n};\n\nvar defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {\n  return _extends({}, defaultEscapes, formatEscapes);\n};\n\n/**\n * Escape a string to be used in LaTeX documents.\n * @param {string} str the string to be escaped.\n * @param {boolean} params.preserveFormatting whether formatting escapes should\n *  be performed (default: false).\n * @param {function} params.escapeMapFn the function to modify the escape maps.\n * @return {string} the escaped string, ready to be used in LaTeX.\n */\nmodule.exports = function (str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$preserveFormatti = _ref.preserveFormatting,\n      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,\n      _ref$escapeMapFn = _ref.escapeMapFn,\n      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;\n\n  var runningStr = String(str);\n  var result = \"\";\n\n  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});\n  var escapeKeys = Object.keys(escapes); // as it is reused later on\n\n  // Algorithm: Go through the string character by character, if it matches\n  // with one of the special characters then we'll replace it with the escaped\n  // version.\n\n  var _loop = function _loop() {\n    var specialCharFound = false;\n    escapeKeys.forEach(function (key, index) {\n      if (specialCharFound) {\n        return;\n      }\n      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {\n        result += escapes[escapeKeys[index]];\n        runningStr = runningStr.slice(key.length, runningStr.length);\n        specialCharFound = true;\n      }\n    });\n    if (!specialCharFound) {\n      result += runningStr.slice(0, 1);\n      runningStr = runningStr.slice(1, runningStr.length);\n    }\n  };\n\n  while (runningStr) {\n    _loop();\n  }\n  return result;\n};","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar stringify = require('../../utils/string').stringify;\n\nvar escape = require('../../utils/string').escape;\n\nvar isSafeProperty = require('../../utils/customs').isSafeProperty;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor ObjectNode\n   * @extends {Node}\n   * Holds an object with keys/values\n   * @param {Object.<string, Node>} [properties]   object with key/value pairs\n   */\n\n  function ObjectNode(properties) {\n    if (!(this instanceof ObjectNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.properties = properties || {}; // validate input\n\n    if (properties) {\n      if (!(_typeof(properties) === 'object') || !Object.keys(properties).every(function (key) {\n        return type.isNode(properties[key]);\n      })) {\n        throw new TypeError('Object containing Nodes expected');\n      }\n    }\n  }\n\n  ObjectNode.prototype = new Node();\n  ObjectNode.prototype.type = 'ObjectNode';\n  ObjectNode.prototype.isObjectNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ObjectNode.prototype._compile = function (math, argNames) {\n    var evalEntries = {};\n\n    for (var key in this.properties) {\n      if (hasOwnProperty(this.properties, key)) {\n        // we stringify/parse the key here to resolve unicode characters,\n        // so you cannot create a key like {\"co\\\\u006Estructor\": null}\n        var stringifiedKey = stringify(key);\n        var parsedKey = JSON.parse(stringifiedKey);\n\n        if (!isSafeProperty(this.properties, parsedKey)) {\n          throw new Error('No access to property \"' + parsedKey + '\"');\n        }\n\n        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);\n      }\n    }\n\n    return function evalObjectNode(scope, args, context) {\n      var obj = {};\n\n      for (var _key in evalEntries) {\n        if (hasOwnProperty(evalEntries, _key)) {\n          obj[_key] = evalEntries[_key](scope, args, context);\n        }\n      }\n\n      return obj;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ObjectNode.prototype.forEach = function (callback) {\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);\n      }\n    }\n  };\n  /**\n   * Create a new ObjectNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ObjectNode} Returns a transformed copy of the node\n   */\n\n\n  ObjectNode.prototype.map = function (callback) {\n    var properties = {};\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));\n      }\n    }\n\n    return new ObjectNode(properties);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ObjectNode}\n   */\n\n\n  ObjectNode.prototype.clone = function () {\n    var properties = {};\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this.properties[key];\n      }\n    }\n\n    return new ObjectNode(properties);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ObjectNode.prototype._toString = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));\n      }\n    }\n\n    return '{' + entries.join(', ') + '}';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ObjectNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ObjectNode',\n      properties: this.properties\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ObjectNode\", \"properties\": {...}}`,\n   *                       where mathjs is optional\n   * @returns {ObjectNode}\n   */\n\n\n  ObjectNode.fromJSON = function (json) {\n    return new ObjectNode(json.properties);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ObjectNode.prototype.toHTML = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push('<span class=\"math-symbol math-property\">' + escape(key) + '</span>' + '<span class=\"math-operator math-assignment-operator math-property-assignment-operator math-binary-operator\">:</span>' + this.properties[key].toHTML(options));\n      }\n    }\n\n    return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ObjectNode.prototype._toTex = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push('\\\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\\\\\');\n      }\n    }\n\n    return \"\\\\left\\\\{\\\\begin{array}{ll}\".concat(entries.join('\\n'), \"\\\\end{array}\\\\right\\\\}\");\n  };\n\n  return ObjectNode;\n}\n\nexports.name = 'ObjectNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\n\nfunction IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = new Error().stack;\n}\n\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;\nmodule.exports = IndexError;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar lazy = require('../../utils/object').lazy;\n\nvar isFactory = require('../../utils/object').isFactory;\n\nvar traverse = require('../../utils/object').traverse;\n\nvar ArgumentsError = require('../../error/ArgumentsError');\n\nfunction factory(type, config, load, typed, math) {\n  /**\n   * Import functions from an object or a module\n   *\n   * Syntax:\n   *\n   *    math.import(object)\n   *    math.import(object, options)\n   *\n   * Where:\n   *\n   * - `object: Object`\n   *   An object with functions to be imported.\n   * - `options: Object` An object with import options. Available options:\n   *   - `override: boolean`\n   *     If true, existing functions will be overwritten. False by default.\n   *   - `silent: boolean`\n   *     If true, the function will not throw errors on duplicates or invalid\n   *     types. False by default.\n   *   - `wrap: boolean`\n   *     If true, the functions will be wrapped in a wrapper function\n   *     which converts data types like Matrix to primitive data types like Array.\n   *     The wrapper is needed when extending math.js with libraries which do not\n   *     support these data type. False by default.\n   *\n   * Examples:\n   *\n   *    // define new functions and variables\n   *    math.import({\n   *      myvalue: 42,\n   *      hello: function (name) {\n   *        return 'hello, ' + name + '!'\n   *      }\n   *    })\n   *\n   *    // use the imported function and variable\n   *    math.myvalue * 2               // 84\n   *    math.hello('user')             // 'hello, user!'\n   *\n   *    // import the npm module 'numbers'\n   *    // (must be installed first with `npm install numbers`)\n   *    math.import(require('numbers'), {wrap: true})\n   *\n   *    math.fibonacci(7) // returns 13\n   *\n   * @param {Object | Array} object   Object with functions to be imported.\n   * @param {Object} [options]        Import options.\n   */\n  function mathImport(object, options) {\n    var num = arguments.length;\n\n    if (num !== 1 && num !== 2) {\n      throw new ArgumentsError('import', num, 1, 2);\n    }\n\n    if (!options) {\n      options = {};\n    } // TODO: allow a typed-function with name too\n\n\n    if (isFactory(object)) {\n      _importFactory(object, options);\n    } else if (Array.isArray(object)) {\n      object.forEach(function (entry) {\n        mathImport(entry, options);\n      });\n    } else if (_typeof(object) === 'object') {\n      // a map with functions\n      for (var name in object) {\n        if (object.hasOwnProperty(name)) {\n          var value = object[name];\n\n          if (isSupportedType(value)) {\n            _import(name, value, options);\n          } else if (isFactory(object)) {\n            _importFactory(object, options);\n          } else {\n            mathImport(value, options);\n          }\n        }\n      }\n    } else {\n      if (!options.silent) {\n        throw new TypeError('Factory, Object, or Array expected');\n      }\n    }\n  }\n  /**\n   * Add a property to the math namespace and create a chain proxy for it.\n   * @param {string} name\n   * @param {*} value\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n\n\n  function _import(name, value, options) {\n    // TODO: refactor this function, it's to complicated and contains duplicate code\n    if (options.wrap && typeof value === 'function') {\n      // create a wrapper around the function\n      value = _wrap(value);\n    }\n\n    if (isTypedFunction(math[name]) && isTypedFunction(value)) {\n      if (options.override) {\n        // give the typed function the right name\n        value = typed(name, value.signatures);\n      } else {\n        // merge the existing and typed function\n        value = typed(math[name], value);\n      }\n\n      math[name] = value;\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (math[name] === undefined || options.override) {\n      math[name] = value;\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (!options.silent) {\n      throw new Error('Cannot import \"' + name + '\": already exists');\n    }\n  }\n\n  function _importTransform(name, value) {\n    if (value && typeof value.transform === 'function') {\n      math.expression.transform[name] = value.transform;\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value.transform;\n      }\n    } else {\n      // remove existing transform\n      delete math.expression.transform[name];\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value;\n      }\n    }\n  }\n\n  function _deleteTransform(name) {\n    delete math.expression.transform[name];\n\n    if (allowedInExpressions(name)) {\n      math.expression.mathWithTransform[name] = math[name];\n    } else {\n      delete math.expression.mathWithTransform[name];\n    }\n  }\n  /**\n   * Create a wrapper a round an function which converts the arguments\n   * to their primitive values (like convert a Matrix to Array)\n   * @param {Function} fn\n   * @return {Function} Returns the wrapped function\n   * @private\n   */\n\n\n  function _wrap(fn) {\n    var wrapper = function wrapper() {\n      var args = [];\n\n      for (var i = 0, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        args[i] = arg && arg.valueOf();\n      }\n\n      return fn.apply(math, args);\n    };\n\n    if (fn.transform) {\n      wrapper.transform = fn.transform;\n    }\n\n    return wrapper;\n  }\n  /**\n   * Import an instance of a factory into math.js\n   * @param {{factory: Function, name: string, path: string, math: boolean}} factory\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n\n\n  function _importFactory(factory, options) {\n    if (typeof factory.name === 'string') {\n      var name = factory.name;\n      var existingTransform = name in math.expression.transform;\n      var namespace = factory.path ? traverse(math, factory.path) : math;\n      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;\n\n      var resolver = function resolver() {\n        var instance = load(factory);\n\n        if (instance && typeof instance.transform === 'function') {\n          throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path=\"expression.transform\"');\n        }\n\n        if (isTypedFunction(existing) && isTypedFunction(instance)) {\n          if (options.override) {// replace the existing typed function (nothing to do)\n          } else {\n            // merge the existing and new typed function\n            instance = typed(existing, instance);\n          }\n\n          return instance;\n        }\n\n        if (existing === undefined || options.override) {\n          return instance;\n        }\n\n        if (!options.silent) {\n          throw new Error('Cannot import \"' + name + '\": already exists');\n        }\n      };\n\n      if (factory.lazy !== false) {\n        lazy(namespace, name, resolver);\n\n        if (existingTransform) {\n          _deleteTransform(name);\n        } else {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            lazy(math.expression.mathWithTransform, name, resolver);\n          }\n        }\n      } else {\n        namespace[name] = resolver();\n\n        if (existingTransform) {\n          _deleteTransform(name);\n        } else {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            math.expression.mathWithTransform[name] = resolver();\n          }\n        }\n      }\n\n      math.emit('import', name, resolver, factory.path);\n    } else {\n      // unnamed factory.\n      // no lazy loading\n      load(factory);\n    }\n  }\n  /**\n   * Check whether given object is a type which can be imported\n   * @param {Function | number | string | boolean | null | Unit | Complex} object\n   * @return {boolean}\n   * @private\n   */\n\n\n  function isSupportedType(object) {\n    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || object && type.isUnit(object) || object && type.isComplex(object) || object && type.isBigNumber(object) || object && type.isFraction(object) || object && type.isMatrix(object) || object && Array.isArray(object);\n  }\n  /**\n   * Test whether a given thing is a typed-function\n   * @param {*} fn\n   * @return {boolean} Returns true when `fn` is a typed-function\n   */\n\n\n  function isTypedFunction(fn) {\n    return typeof fn === 'function' && _typeof(fn.signatures) === 'object';\n  }\n\n  function allowedInExpressions(name) {\n    return !unsafe.hasOwnProperty(name);\n  }\n\n  function factoryAllowedInExpressions(factory) {\n    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);\n  } // namespaces and functions not available in the parser for safety reasons\n\n\n  var unsafe = {\n    'expression': true,\n    'type': true,\n    'docs': true,\n    'error': true,\n    'json': true,\n    'chain': true // chain method not supported. Note that there is a unit chain too.\n\n  };\n  return mathImport;\n}\n\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.name = 'import';\nexports.factory = factory;\nexports.lazy = true;","'use strict'; // list of identifiers of nodes in order of their precedence\n// also contains information about left/right associativity\n// and which other operator the operator is associative with\n// Example:\n// addition is associative with addition and subtraction, because:\n// (a+b)+c=a+(b+c)\n// (a+b)-c=a+(b-c)\n//\n// postfix operators are left associative, prefix operators\n// are right associative\n//\n// It's also possible to set the following properties:\n// latexParens: if set to false, this node doesn't need to be enclosed\n//              in parentheses when using LaTeX\n// latexLeftParens: if set to false, this !OperatorNode's!\n//                  left argument doesn't need to be enclosed\n//                  in parentheses\n// latexRightParens: the same for the right argument\n\nvar properties = [{\n  // assignment\n  'AssignmentNode': {},\n  'FunctionAssignmentNode': {}\n}, {\n  // conditional expression\n  'ConditionalNode': {\n    latexLeftParens: false,\n    latexRightParens: false,\n    latexParens: false // conditionals don't need parentheses in LaTeX because\n    // they are 2 dimensional\n\n  }\n}, {\n  // logical or\n  'OperatorNode:or': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // logical xor\n  'OperatorNode:xor': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // logical and\n  'OperatorNode:and': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise or\n  'OperatorNode:bitOr': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise xor\n  'OperatorNode:bitXor': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise and\n  'OperatorNode:bitAnd': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // relational operators\n  'OperatorNode:equal': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:unequal': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:smaller': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:larger': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:smallerEq': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:largerEq': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'RelationalNode': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitshift operators\n  'OperatorNode:leftShift': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:rightArithShift': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:rightLogShift': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // unit conversion\n  'OperatorNode:to': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // range\n  'RangeNode': {}\n}, {\n  // addition, subtraction\n  'OperatorNode:add': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n  },\n  'OperatorNode:subtract': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // multiply, divide, modulus\n  'OperatorNode:multiply': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']\n  },\n  'OperatorNode:divide': {\n    associativity: 'left',\n    associativeWith: [],\n    latexLeftParens: false,\n    latexRightParens: false,\n    latexParens: false // fractions don't require parentheses because\n    // they're 2 dimensional, so parens aren't needed\n    // in LaTeX\n\n  },\n  'OperatorNode:dotMultiply': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']\n  },\n  'OperatorNode:dotDivide': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:mod': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // unary prefix operators\n  'OperatorNode:unaryPlus': {\n    associativity: 'right'\n  },\n  'OperatorNode:unaryMinus': {\n    associativity: 'right'\n  },\n  'OperatorNode:bitNot': {\n    associativity: 'right'\n  },\n  'OperatorNode:not': {\n    associativity: 'right'\n  }\n}, {\n  // exponentiation\n  'OperatorNode:pow': {\n    associativity: 'right',\n    associativeWith: [],\n    latexRightParens: false // the exponent doesn't need parentheses in\n    // LaTeX because it's 2 dimensional\n    // (it's on top)\n\n  },\n  'OperatorNode:dotPow': {\n    associativity: 'right',\n    associativeWith: []\n  }\n}, {\n  // factorial\n  'OperatorNode:factorial': {\n    associativity: 'left'\n  }\n}, {\n  // matrix transpose\n  'OperatorNode:transpose': {\n    associativity: 'left'\n  }\n}];\n/**\n * Get the precedence of a Node.\n * Higher number for higher precedence, starting with 0.\n * Returns null if the precedence is undefined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {number|null}\n */\n\nfunction getPrecedence(_node, parenthesis) {\n  var node = _node;\n\n  if (parenthesis !== 'keep') {\n    // ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n\n  var identifier = node.getIdentifier();\n\n  for (var i = 0; i < properties.length; i++) {\n    if (identifier in properties[i]) {\n      return i;\n    }\n  }\n\n  return null;\n}\n/**\n * Get the associativity of an operator (left or right).\n * Returns a string containing 'left' or 'right' or null if\n * the associativity is not defined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {string|null}\n * @throws {Error}\n */\n\n\nfunction getAssociativity(_node, parenthesis) {\n  var node = _node;\n\n  if (parenthesis !== 'keep') {\n    // ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n\n  var identifier = node.getIdentifier();\n  var index = getPrecedence(node, parenthesis);\n\n  if (index === null) {\n    // node isn't in the list\n    return null;\n  }\n\n  var property = properties[index][identifier];\n\n  if (property.hasOwnProperty('associativity')) {\n    if (property.associativity === 'left') {\n      return 'left';\n    }\n\n    if (property.associativity === 'right') {\n      return 'right';\n    } // associativity is invalid\n\n\n    throw Error('\\'' + identifier + '\\' has the invalid associativity \\'' + property.associativity + '\\'.');\n  } // associativity is undefined\n\n\n  return null;\n}\n/**\n * Check if an operator is associative with another operator.\n * Returns either true or false or null if not defined.\n *\n * @param {Node} nodeA\n * @param {Node} nodeB\n * @param {string} parenthesis\n * @return {bool|null}\n */\n\n\nfunction isAssociativeWith(nodeA, nodeB, parenthesis) {\n  // ParenthesisNodes are only ignored when not in 'keep' mode\n  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;\n  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;\n  var identifierA = a.getIdentifier();\n  var identifierB = b.getIdentifier();\n  var index = getPrecedence(a, parenthesis);\n\n  if (index === null) {\n    // node isn't in the list\n    return null;\n  }\n\n  var property = properties[index][identifierA];\n\n  if (property.hasOwnProperty('associativeWith') && property.associativeWith instanceof Array) {\n    for (var i = 0; i < property.associativeWith.length; i++) {\n      if (property.associativeWith[i] === identifierB) {\n        return true;\n      }\n    }\n\n    return false;\n  } // associativeWith is not defined\n\n\n  return null;\n}\n\nmodule.exports.properties = properties;\nmodule.exports.getPrecedence = getPrecedence;\nmodule.exports.getAssociativity = getAssociativity;\nmodule.exports.isAssociativeWith = isAssociativeWith;","'use strict';\n\nvar number = require('../../utils/number');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a range. A range has a start, step, and end, and contains functions\n   * to iterate over the range.\n   *\n   * A range can be constructed as:\n   *\n   *     const range = new Range(start, end)\n   *     const range = new Range(start, end, step)\n   *\n   * To get the result of the range:\n   *     range.forEach(function (x) {\n   *         console.log(x)\n   *     })\n   *     range.map(function (x) {\n   *         return math.sin(x)\n   *     })\n   *     range.toArray()\n   *\n   * Example usage:\n   *\n   *     const c = new Range(2, 6)       // 2:1:5\n   *     c.toArray()                     // [2, 3, 4, 5]\n   *     const d = new Range(2, -3, -1)  // 2:-1:-2\n   *     d.toArray()                     // [2, 1, 0, -1, -2]\n   *\n   * @class Range\n   * @constructor Range\n   * @param {number} start  included lower bound\n   * @param {number} end    excluded upper bound\n   * @param {number} [step] step size, default value is 1\n   */\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    var hasStart = start !== null && start !== undefined;\n    var hasEnd = end !== null && end !== undefined;\n    var hasStep = step !== null && step !== undefined;\n\n    if (hasStart) {\n      if (type.isBigNumber(start)) {\n        start = start.toNumber();\n      } else if (typeof start !== 'number') {\n        throw new TypeError('Parameter start must be a number');\n      }\n    }\n\n    if (hasEnd) {\n      if (type.isBigNumber(end)) {\n        end = end.toNumber();\n      } else if (typeof end !== 'number') {\n        throw new TypeError('Parameter end must be a number');\n      }\n    }\n\n    if (hasStep) {\n      if (type.isBigNumber(step)) {\n        step = step.toNumber();\n      } else if (typeof step !== 'number') {\n        throw new TypeError('Parameter step must be a number');\n      }\n    }\n\n    this.start = hasStart ? parseFloat(start) : 0;\n    this.end = hasEnd ? parseFloat(end) : 0;\n    this.step = hasStep ? parseFloat(step) : 1;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Range.prototype.type = 'Range';\n  Range.prototype.isRange = true;\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @memberof Range\n   * @param {string} str\n   * @return {Range | null} range\n   */\n\n  Range.parse = function (str) {\n    if (typeof str !== 'string') {\n      return null;\n    }\n\n    var args = str.split(':');\n    var nums = args.map(function (arg) {\n      return parseFloat(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return new Range(nums[0], nums[1]);\n\n      case 3:\n        return new Range(nums[0], nums[2], nums[1]);\n\n      default:\n        return null;\n    }\n  };\n  /**\n   * Create a clone of the range\n   * @return {Range} clone\n   */\n\n\n  Range.prototype.clone = function () {\n    return new Range(this.start, this.end, this.step);\n  };\n  /**\n   * Retrieve the size of the range.\n   * Returns an array containing one number, the number of elements in the range.\n   * @memberof Range\n   * @returns {number[]} size\n   */\n\n\n  Range.prototype.size = function () {\n    var len = 0;\n    var start = this.start;\n    var step = this.step;\n    var end = this.end;\n    var diff = end - start;\n\n    if (number.sign(step) === number.sign(diff)) {\n      len = Math.ceil(diff / step);\n    } else if (diff === 0) {\n      len = 0;\n    }\n\n    if (isNaN(len)) {\n      len = 0;\n    }\n\n    return [len];\n  };\n  /**\n   * Calculate the minimum value in the range\n   * @memberof Range\n   * @return {number | undefined} min\n   */\n\n\n  Range.prototype.min = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start;\n      } else {\n        // negative step\n        return this.start + (size - 1) * this.step;\n      }\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * Calculate the maximum value in the range\n   * @memberof Range\n   * @return {number | undefined} max\n   */\n\n\n  Range.prototype.max = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start + (size - 1) * this.step;\n      } else {\n        // negative step\n        return this.start;\n      }\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * Execute a callback function for each value in the range.\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Range being traversed.\n   */\n\n\n  Range.prototype.forEach = function (callback) {\n    var x = this.start;\n    var step = this.step;\n    var end = this.end;\n    var i = 0;\n\n    if (step > 0) {\n      while (x < end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    } else if (step < 0) {\n      while (x > end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n  };\n  /**\n   * Execute a callback function for each value in the Range, and return the\n   * results as an array\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @returns {Array} array\n   */\n\n\n  Range.prototype.map = function (callback) {\n    var array = [];\n    this.forEach(function (value, index, obj) {\n      array[index[0]] = callback(value, index, obj);\n    });\n    return array;\n  };\n  /**\n   * Create an Array with a copy of the Ranges data\n   * @memberof Range\n   * @returns {Array} array\n   */\n\n\n  Range.prototype.toArray = function () {\n    var array = [];\n    this.forEach(function (value, index) {\n      array[index[0]] = value;\n    });\n    return array;\n  };\n  /**\n   * Get the primitive value of the Range, a one dimensional array\n   * @memberof Range\n   * @returns {Array} array\n   */\n\n\n  Range.prototype.valueOf = function () {\n    // TODO: implement a caching mechanism for range.valueOf()\n    return this.toArray();\n  };\n  /**\n   * Get a string representation of the range, with optional formatting options.\n   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\n   * @memberof Range\n   * @param {Object | number | function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  Range.prototype.format = function (options) {\n    var str = number.format(this.start, options);\n\n    if (this.step !== 1) {\n      str += ':' + number.format(this.step, options);\n    }\n\n    str += ':' + number.format(this.end, options);\n    return str;\n  };\n  /**\n   * Get a string representation of the range.\n   * @memberof Range\n   * @returns {string}\n   */\n\n\n  Range.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the range\n   * @memberof Range\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   */\n\n\n  Range.prototype.toJSON = function () {\n    return {\n      mathjs: 'Range',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n  /**\n   * Instantiate a Range from a JSON object\n   * @memberof Range\n   * @param {Object} json A JSON object structured as:\n   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   * @return {Range}\n   */\n\n\n  Range.fromJSON = function (json) {\n    return new Range(json.start, json.end, json.step);\n  };\n\n  return Range;\n}\n\nexports.name = 'Range';\nexports.path = 'type';\nexports.factory = factory;","module.exports = __WEBPACK_EXTERNAL_MODULE_VBo9__;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var numeric = load(require('../../type/numeric'));\n  var getTypeOf = load(require('../../function/utils/typeof'));\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n   * @private\n   */\n\n  var divideScalar = typed('divide', {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, getTypeOf(y));\n      res.value = divideScalar(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, getTypeOf(x));\n      res.value = divideScalar(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n  return divideScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar clone = require('../../utils/object').clone;\n\nvar validateIndex = require('../../utils/array').validateIndex;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index                     An index containing ranges for each\n   *                                          dimension\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n\n  var subset = typed('subset', {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n  subset.toTex = undefined; // use default template\n\n  return subset;\n  /**\n   * Retrieve a subset of a string\n   * @param {string} str            string from which to get a substring\n   * @param {Index} index           An index containing ranges for each dimension\n   * @returns {string} substring\n   * @private\n   */\n\n  function _getSubstring(str, index) {\n    if (!type.isIndex(index)) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n\n    if (index.size().length !== 1) {\n      throw new DimensionError(index.size().length, 1);\n    } // validate whether the range is out of range\n\n\n    var strLen = str.length;\n    validateIndex(index.min()[0], strLen);\n    validateIndex(index.max()[0], strLen);\n    var range = index.dimension(0);\n    var substr = '';\n    range.forEach(function (v) {\n      substr += str.charAt(v);\n    });\n    return substr;\n  }\n  /**\n   * Replace a substring in a string\n   * @param {string} str            string to be replaced\n   * @param {Index} index           An index containing ranges for each dimension\n   * @param {string} replacement    Replacement string\n   * @param {string} [defaultValue] Default value to be uses when resizing\n   *                                the string. is ' ' by default\n   * @returns {string} result\n   * @private\n   */\n\n\n  function _setSubstring(str, index, replacement, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n\n    if (index.size().length !== 1) {\n      throw new DimensionError(index.size().length, 1);\n    }\n\n    if (defaultValue !== undefined) {\n      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultValue = ' ';\n    }\n\n    var range = index.dimension(0);\n    var len = range.size()[0];\n\n    if (len !== replacement.length) {\n      throw new DimensionError(range.size()[0], replacement.length);\n    } // validate whether the range is out of range\n\n\n    var strLen = str.length;\n    validateIndex(index.min()[0]);\n    validateIndex(index.max()[0]); // copy the string into an array with characters\n\n    var chars = [];\n\n    for (var i = 0; i < strLen; i++) {\n      chars[i] = str.charAt(i);\n    }\n\n    range.forEach(function (v, i) {\n      chars[v] = replacement.charAt(i[0]);\n    }); // initialize undefined characters with a space\n\n    if (chars.length > strLen) {\n      for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n        if (!chars[_i]) {\n          chars[_i] = defaultValue;\n        }\n      }\n    }\n\n    return chars.join('');\n  }\n}\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\n\n\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return getSafeProperty(object, key);\n}\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\n\n\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  } // clone the object, and apply the property to the clone\n\n\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}\n\nexports.name = 'subset';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var parse = load(require('../parse'));\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.eval(expr)\n   *     math.eval(expr, scope)\n   *     math.eval([expr1, expr2, expr3, ...])\n   *     math.eval([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.eval('(2+3)/4')                // 1.25\n   *     math.eval('sqrt(3^2 + 4^2)')        // 5\n   *     math.eval('sqrt(-4)')               // 2i\n   *     math.eval(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.eval('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n\n  return typed('compile', {\n    'string': function string(expr) {\n      var scope = {};\n      return parse(expr).compile().eval(scope);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return parse(expr).compile().eval(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = {};\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    }\n  });\n}\n\nexports.name = 'eval';\nexports.factory = factory;","'use strict';\n/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\n\nfunction DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\n\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;\nmodule.exports = DimensionError;","'use strict';\n\nvar IndexError = require('../../error/IndexError');\n/**\n * Transform zero-based indices to one-based indices in errors\n * @param {Error} err\n * @returns {Error} Returns the transformed error\n */\n\n\nexports.transform = function (err) {\n  if (err && err.isIndexError) {\n    return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);\n  }\n\n  return err;\n};","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm07 = function algorithm07(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n\n    var i, j; // result arrays\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // matrix\n\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = [];\n    var xb = []; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop values in column j\n\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n\n  return algorithm07;\n}\n\nexports.name = 'algorithm07';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n   * @private\n   */\n  var add = typed('add', {\n    'number, number': function numberNumber(x, y) {\n      return x + y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = add(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n  return add;\n}\n\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar errorTransform = require('../../transform/error.transform').transform;\n\nvar setSafeProperty = require('../../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        return matrix(object).subset(index, value).valueOf();\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}\n\nexports.factory = factory;","module.exports = __WEBPACK_EXTERNAL_MODULE_YeEv__;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar latex = require('../../utils/latex');\n\nvar escape = require('../../utils/string').escape;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nvar map = require('../../utils/array').map;\n\nvar validateSafeMethod = require('../../utils/customs').validateSafeMethod;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed, math) {\n  var Node = load(require('./Node'));\n  var SymbolNode = load(require('./SymbolNode'));\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    } // validate input\n\n\n    if (!type.isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n    if (!Array.isArray(args) || !args.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.fn = fn;\n    this.args = args || []; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    }); // TODO: deprecated since v3, remove some day\n\n    var deprecated = function deprecated() {\n      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');\n    };\n\n    Object.defineProperty(this, 'object', {\n      get: deprecated,\n      set: deprecated\n    });\n  }\n\n  FunctionNode.prototype = new Node();\n  FunctionNode.prototype.type = 'FunctionNode';\n  FunctionNode.prototype.isFunctionNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionNode.prototype._compile = function (math, argNames) {\n    if (!(this instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode');\n    } // compile arguments\n\n\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (type.isSymbolNode(this.fn)) {\n      // we can statically determine whether the function has an rawArgs property\n      var name = this.fn.name;\n      var fn = name in math ? getSafeProperty(math, name) : undefined;\n      var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        // \"raw\" evaluation\n        var rawArgs = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          return (name in scope ? getSafeProperty(scope, name) : fn)(rawArgs, math, _extends({}, scope, args));\n        };\n      } else {\n        // \"regular\" evaluation\n        if (evalArgs.length === 1) {\n          var evalArg0 = evalArgs[0];\n          return function evalFunctionNode(scope, args, context) {\n            return (name in scope ? getSafeProperty(scope, name) : fn)(evalArg0(scope, args, context));\n          };\n        } else if (evalArgs.length === 2) {\n          var _evalArg = evalArgs[0];\n          var evalArg1 = evalArgs[1];\n          return function evalFunctionNode(scope, args, context) {\n            return (name in scope ? getSafeProperty(scope, name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));\n          };\n        } else {\n          return function evalFunctionNode(scope, args, context) {\n            return (name in scope ? getSafeProperty(scope, name) : fn).apply(null, map(evalArgs, function (evalArg) {\n              return evalArg(scope, args, context);\n            }));\n          };\n        }\n      }\n    } else if (type.isAccessorNode(this.fn) && type.isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      var evalObject = this.fn.object._compile(math, argNames);\n\n      var prop = this.fn.index.getObjectProperty();\n      var _rawArgs = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        validateSafeMethod(object, prop);\n        var isRaw = object[prop] && object[prop].rawArgs;\n        return isRaw ? object[prop](_rawArgs, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : object[prop].apply(object, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    } else {\n      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      var evalFn = this.fn._compile(math, argNames);\n\n      var _rawArgs2 = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var fn = evalFn(scope, args, context);\n        var isRaw = fn && fn.rawArgs;\n        return isRaw ? fn(_rawArgs2, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : fn.apply(fn, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this.fn.map(callback);\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new FunctionNode(fn, args);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n\n\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  }; // backup Node's toString function\n  // @private\n\n\n  var nodeToString = FunctionNode.prototype.toString;\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, name)) {\n      // callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    } // fall back to Node's toString\n\n\n    return nodeToString.call(this, options);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n    var fn = type.isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n    return fn + '(' + args.join(', ') + ')';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'FunctionNode',\n      fn: this.fn,\n      args: this.args\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionNode}\n   */\n\n\n  FunctionNode.fromJSON = function (json) {\n    return new FunctionNode(json.fn, json.args);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    }); // format the arguments like \"add(2, 4.2)\"\n\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = new RegExp('\\\\$(?:\\\\{([a-z_][a-z_0-9]*)(?:\\\\[([0-9]+)\\\\])?\\\\}|\\\\$)', 'ig');\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (_typeof(property)) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (type.isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (type.isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (type.isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  } // backup Node's toTex function\n  // @private\n\n\n  var nodeToTex = FunctionNode.prototype.toTex;\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, this.name)) {\n      // callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    } // fall back to Node's toTex\n\n\n    return nodeToTex.call(this, options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) {\n      // get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n    var latexConverter;\n\n    if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {\n      // .toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n\n    var customToTex;\n\n    switch (_typeof(latexConverter)) {\n      case 'function':\n        // a callback function\n        customToTex = latexConverter(this, options);\n        break;\n\n      case 'string':\n        // a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n\n      case 'object':\n        // an object with different \"converters\" for different numbers of arguments\n        switch (_typeof(latexConverter[args.length])) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n\n    }\n\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n\n    return expandTemplate(latex.defaultTemplate, this, options);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n\n  return FunctionNode;\n}\n\nexports.name = 'FunctionNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.factory = factory;","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n\n  var sum = typed('sum', {\n    'Array | Matrix': function ArrayMatrix(args) {\n      // sum([a, b, c, d, ...])\n      return _sum(args);\n    },\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber() {\n      // sum([a, b, c, d, ...], dim)\n      // TODO: implement sum(A, dim)\n      throw new Error('sum(A, dim) is not yet supported');\n    },\n    '...': function _(args) {\n      // sum(a, b, c, d, ...)\n      return _sum(args);\n    }\n  });\n  sum.toTex = undefined; // use default template\n\n  return sum;\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    if (sum === undefined) {\n      switch (config.number) {\n        case 'number':\n          return 0;\n\n        case 'BigNumber':\n          return new type.BigNumber(0);\n\n        case 'Fraction':\n          return new type.Fraction(0);\n\n        default:\n          return 0;\n      }\n    }\n\n    return sum;\n  }\n}\n\nexports.name = 'sum';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isBigNumber = require('./bignumber/isBigNumber');\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\n\n\nexports.clone = function clone(x) {\n  var type = _typeof(x); // immutable primitive types\n\n\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  } // use clone function of the object when available\n\n\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  } // array\n\n\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp\n  // object\n\n  return exports.map(x, clone);\n};\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\n\n\nexports.map = function (object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (exports.hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n};\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\n\n\nexports.extend = function (a, b) {\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n\n  return a;\n};\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\n\n\nexports.deepExtend = function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n\n        if (a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n\n  return a;\n};\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\n\n\nexports.deepEqual = function deepEqual(a, b) {\n  var prop, i, len;\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!exports.deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n};\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\n\n\nexports.canDefineProperty = function () {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {}\n      });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n};\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n * On older browsers (<IE8), the function will fall back to direct evaluation\n * of the properties value.\n * @param {Object} object   Object where to add the property\n * @param {string} prop     Property name\n * @param {Function} fn     Function returning the property value. Called\n *                          without arguments.\n */\n\n\nexports.lazy = function (object, prop, fn) {\n  if (exports.canDefineProperty()) {\n    var _uninitialized = true;\n\n    var _value;\n\n    Object.defineProperty(object, prop, {\n      get: function get() {\n        if (_uninitialized) {\n          _value = fn();\n          _uninitialized = false;\n        }\n\n        return _value;\n      },\n      set: function set(value) {\n        _value = value;\n        _uninitialized = false;\n      },\n      configurable: true,\n      enumerable: true\n    });\n  } else {\n    // fall back to immediate evaluation\n    object[prop] = fn();\n  }\n};\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\n\n\nexports.traverse = function (object, path) {\n  var obj = object;\n\n  if (path) {\n    var names = path.split('.');\n\n    for (var i = 0; i < names.length; i++) {\n      var name = names[i];\n\n      if (!(name in obj)) {\n        obj[name] = {};\n      }\n\n      obj = obj[name];\n    }\n  }\n\n  return obj;\n};\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\n\n\nexports.hasOwnProperty = function (object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n};\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\n\n\nexports.isFactory = function (object) {\n  return object && typeof object.factory === 'function';\n};","'use strict';\n\nvar util = require('../../utils/index');\n\nvar DimensionError = require('../../error/DimensionError');\n\nvar string = util.string;\nvar array = util.array;\nvar object = util.object;\nvar number = util.number;\nvar isArray = Array.isArray;\nvar isNumber = number.isNumber;\nvar isInteger = number.isInteger;\nvar isString = string.isString;\nvar validateIndex = array.validateIndex;\n\nfunction factory(type, config, load, typed) {\n  var getArrayDataType = load(require('./utils/getArrayDataType'));\n  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)\n\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   */\n\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (type.isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = object.clone(data._data);\n        this._size = object.clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data); // get the dimensions of the array\n\n      this._size = array.size(this._data); // verify the dimensions of the array, TODO: compute size while processing array\n\n      array.validate(this._data, this._size); // data type unknown\n\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n\n  DenseMatrix.prototype = new Matrix();\n  /**\n   * Attach type information\n   */\n\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | DenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    } // check index\n\n\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n\n    var data = this._data;\n\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    return data;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n\n\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n\n    var i, ii, indexI; // enlarge matrix when needed\n\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n\n    _fit(this, size, defaultValue); // traverse over the dimensions\n\n\n    var data = this._data;\n\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    } // set new value\n\n\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n\n\n  function _get(matrix, index) {\n    if (!type.isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = index.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      } // validate if any of the ranges in the index is out of range\n\n\n      var min = index.min();\n      var max = index.max();\n\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      } // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n\n\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n\n\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n\n\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if (type.isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = array.size(submatrix);\n    }\n\n    if (isScalar) {\n      // set a scalar\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!object.deepEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      } // enlarge matrix when needed\n\n\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n\n      _fit(matrix, size, defaultValue); // insert the sub matrix\n\n\n      var dims = iSize.length;\n      var dim = 0;\n\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n\n    return matrix;\n  }\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n\n\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isArray(size)) {\n      throw new TypeError('Array expected');\n    } // matrix to resize\n\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, size, defaultValue);\n  };\n\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data; // go deep\n\n      while (isArray(v)) {\n        v = v[0];\n      }\n\n      return v;\n    } // resize matrix\n\n\n    matrix._size = size.slice(0); // copy the array\n\n    matrix._data = array.resize(matrix._data, matrix._size, defaultValue); // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = array.reshape(m._data, size);\n    m._size = size.slice(0);\n    return m;\n  };\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n\n\n  function _fit(matrix, size, defaultValue) {\n    var // copy the array\n    newSize = matrix._size.slice(0);\n\n    var changed = false; // add dimensions when needed\n\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    } // enlarge size when needed\n\n\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n\n\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: object.clone(this._data),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n\n\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n\n\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        return callback(value, index, me);\n      }\n    }; // return dense format\n\n\n    return new DenseMatrix({\n      data: recurse(this._data, []),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n\n    recurse(this._data, []);\n  };\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.toArray = function () {\n    return object.clone(this._data);\n  };\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.format = function (options) {\n    return string.format(this._data, options);\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.toString = function () {\n    return string.format(this._data);\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n\n\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Array}                      The array vector with the diagonal values.\n   */\n\n\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (type.isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix\n\n    var data = []; // loop rows\n\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data: data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                   The matrix size.\n   * @param {number | Array} value          The values for the diagonal.\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]        The default value for non-diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if (type.isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if (type.isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    if (defaultValue && isString(datatype)) {\n      // convert defaultValue to the same datatype\n      defaultValue = typed.convert(defaultValue, datatype);\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (type.isMatrix(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // discover default value if needed\n\n\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = type.isBigNumber(_value(0)) ? new type.BigNumber(0) : 0;\n    } // empty array\n\n\n    var data = []; // check we need to resize array\n\n    if (size.length > 0) {\n      // resize array\n      data = array.resize(data, size, defaultValue); // fill diagonal\n\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data: data,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]); // swap rows\n\n    DenseMatrix._swapRows(i, j, this._data); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   */\n\n\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n\n\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n\n    return data;\n  } // register this type in the base class Matrix\n\n\n  type.Matrix._storage.dense = DenseMatrix;\n  type.Matrix._storage['default'] = DenseMatrix; // exports\n\n  return DenseMatrix;\n}\n\nexports.name = 'DenseMatrix';\nexports.path = 'type';\nexports.factory = factory;\nexports.lazy = false; // no lazy loading, as we alter type.Matrix._storage","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm05 = function algorithm05(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm05;\n}\n\nexports.name = 'algorithm05';\nexports.factory = factory;","'use strict';\n\nmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr; // c arrays\n\n  var cindex = c._index; // vars\n\n  var k, k0, k1, i; // check we need to process values (pattern matrix)\n\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i); // x(i) = A, check we need to call function this time\n\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row\n\n          u[i] = mark;\n        } else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      } else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row\n\n        u[i] = mark;\n      }\n    }\n  } else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i);\n      } else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n};","'use strict';\n\nrequire('./../utils/polyfills');\n\nvar isFactory = require('./../utils/object').isFactory;\n\nvar typedFactory = require('./typed');\n\nvar emitter = require('./../utils/emitter');\n\nvar importFactory = require('./function/import');\n\nvar configFactory = require('./function/config');\n/**\n * Math.js core. Creates a new, empty math.js instance\n * @param {Object} [options] Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\n\n\nexports.create = function create(options) {\n  // simple test for ES5 support\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');\n  } // cached factories and instances\n\n\n  var factories = [];\n  var instances = []; // create a namespace for the mathjs instance, and attach emitter functions\n\n  var math = emitter.mixin({});\n  math.type = {};\n  math.expression = {\n    transform: {},\n    mathWithTransform: {} // create a new typed instance\n\n  };\n  math.typed = typedFactory.create(math.type); // create configuration options. These are private\n\n  var _config = {\n    // minimum relative difference between two compared values,\n    // used by all comparison functions\n    epsilon: 1e-12,\n    // type of default matrix output. Choose 'matrix' (default) or 'array'\n    matrix: 'Matrix',\n    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n    number: 'number',\n    // number of significant digits in BigNumbers\n    precision: 64,\n    // predictable output type of functions. When true, output type depends only\n    // on the input types. When false (default), output type can vary depending\n    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n    // predictable is false, and returns `NaN` when true.\n    predictable: false,\n    // random seed for seeded pseudo random number generation\n    // null = randomly seed\n    randomSeed: null\n    /**\n     * Load a function or data type from a factory.\n     * If the function or data type already exists, the existing instance is\n     * returned.\n     * @param {{type: string, name: string, factory: Function}} factory\n     * @returns {*}\n     */\n\n  };\n\n  function load(factory) {\n    if (!isFactory(factory)) {\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n\n    var index = factories.indexOf(factory);\n    var instance;\n\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, _config, load, math.typed, math);\n      } else {\n        instance = factory.factory(math.type, _config, load, math.typed);\n      } // append to the cache\n\n\n      factories.push(factory);\n      instances.push(instance);\n    } else {\n      // already existing function, return the cached instance\n      instance = instances[index];\n    }\n\n    return instance;\n  } // load the import and config functions\n\n\n  math['import'] = load(importFactory);\n  math['config'] = load(configFactory);\n  math.expression.mathWithTransform['config'] = math['config']; // apply options\n\n  if (options) {\n    math.config(options);\n  }\n\n  return math;\n};","'use strict';\n\nvar escapeLatex = require('escape-latex');\n\nexports.symbols = {\n  // GREEK LETTERS\n  Alpha: 'A',\n  alpha: '\\\\alpha',\n  Beta: 'B',\n  beta: '\\\\beta',\n  Gamma: '\\\\Gamma',\n  gamma: '\\\\gamma',\n  Delta: '\\\\Delta',\n  delta: '\\\\delta',\n  Epsilon: 'E',\n  epsilon: '\\\\epsilon',\n  varepsilon: '\\\\varepsilon',\n  Zeta: 'Z',\n  zeta: '\\\\zeta',\n  Eta: 'H',\n  eta: '\\\\eta',\n  Theta: '\\\\Theta',\n  theta: '\\\\theta',\n  vartheta: '\\\\vartheta',\n  Iota: 'I',\n  iota: '\\\\iota',\n  Kappa: 'K',\n  kappa: '\\\\kappa',\n  varkappa: '\\\\varkappa',\n  Lambda: '\\\\Lambda',\n  lambda: '\\\\lambda',\n  Mu: 'M',\n  mu: '\\\\mu',\n  Nu: 'N',\n  nu: '\\\\nu',\n  Xi: '\\\\Xi',\n  xi: '\\\\xi',\n  Omicron: 'O',\n  omicron: 'o',\n  Pi: '\\\\Pi',\n  pi: '\\\\pi',\n  varpi: '\\\\varpi',\n  Rho: 'P',\n  rho: '\\\\rho',\n  varrho: '\\\\varrho',\n  Sigma: '\\\\Sigma',\n  sigma: '\\\\sigma',\n  varsigma: '\\\\varsigma',\n  Tau: 'T',\n  tau: '\\\\tau',\n  Upsilon: \"\\\\Upsilon\",\n  upsilon: \"\\\\upsilon\",\n  Phi: '\\\\Phi',\n  phi: '\\\\phi',\n  varphi: '\\\\varphi',\n  Chi: 'X',\n  chi: '\\\\chi',\n  Psi: '\\\\Psi',\n  psi: '\\\\psi',\n  Omega: '\\\\Omega',\n  omega: '\\\\omega',\n  // logic\n  'true': '\\\\mathrm{True}',\n  'false': '\\\\mathrm{False}',\n  // other\n  i: 'i',\n  // TODO use \\i ??\n  inf: '\\\\infty',\n  Inf: '\\\\infty',\n  infinity: '\\\\infty',\n  Infinity: '\\\\infty',\n  oo: '\\\\infty',\n  lim: '\\\\lim',\n  'undefined': '\\\\mathbf{?}'\n};\nexports.operators = {\n  'transpose': '^\\\\top',\n  'ctranspose': '^H',\n  'factorial': '!',\n  'pow': '^',\n  'dotPow': '.^\\\\wedge',\n  // TODO find ideal solution\n  'unaryPlus': '+',\n  'unaryMinus': '-',\n  'bitNot': '~',\n  // TODO find ideal solution\n  'not': '\\\\neg',\n  'multiply': '\\\\cdot',\n  'divide': '\\\\frac',\n  // TODO how to handle that properly?\n  'dotMultiply': '.\\\\cdot',\n  // TODO find ideal solution\n  'dotDivide': '.:',\n  // TODO find ideal solution\n  'mod': '\\\\mod',\n  'add': '+',\n  'subtract': '-',\n  'to': '\\\\rightarrow',\n  'leftShift': '<<',\n  'rightArithShift': '>>',\n  'rightLogShift': '>>>',\n  'equal': '=',\n  'unequal': '\\\\neq',\n  'smaller': '<',\n  'larger': '>',\n  'smallerEq': '\\\\leq',\n  'largerEq': '\\\\geq',\n  'bitAnd': '\\\\&',\n  'bitXor': \"\\\\underline{|}\",\n  'bitOr': '|',\n  'and': '\\\\wedge',\n  'xor': '\\\\veebar',\n  'or': '\\\\vee'\n};\nexports.defaultTemplate = \"\\\\mathrm{${name}}\\\\left(${args}\\\\right)\";\nvar units = {\n  deg: '^\\\\circ'\n};\n\nexports.escape = function (string) {\n  return escapeLatex(string, {\n    'preserveFormatting': true\n  });\n}; // @param {string} name\n// @param {boolean} isUnit\n\n\nexports.toSymbol = function (name, isUnit) {\n  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\n  if (isUnit) {\n    if (units.hasOwnProperty(name)) {\n      return units[name];\n    }\n\n    return '\\\\mathrm{' + exports.escape(name) + '}';\n  }\n\n  if (exports.symbols.hasOwnProperty(name)) {\n    return exports.symbols[name];\n  }\n\n  return exports.escape(name);\n};","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * A ResultSet contains a list or results\n   * @class ResultSet\n   * @param {Array} entries\n   * @constructor ResultSet\n   */\n  function ResultSet(entries) {\n    if (!(this instanceof ResultSet)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.entries = entries || [];\n  }\n  /**\n   * Attach type information\n   */\n\n\n  ResultSet.prototype.type = 'ResultSet';\n  ResultSet.prototype.isResultSet = true;\n  /**\n   * Returns the array with results hold by this ResultSet\n   * @memberof ResultSet\n   * @returns {Array} entries\n   */\n\n  ResultSet.prototype.valueOf = function () {\n    return this.entries;\n  };\n  /**\n   * Returns the stringified results of the ResultSet\n   * @memberof ResultSet\n   * @returns {string} string\n   */\n\n\n  ResultSet.prototype.toString = function () {\n    return '[' + this.entries.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the ResultSet\n   * @memberof ResultSet\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   */\n\n\n  ResultSet.prototype.toJSON = function () {\n    return {\n      mathjs: 'ResultSet',\n      entries: this.entries\n    };\n  };\n  /**\n   * Instantiate a ResultSet from a JSON object\n   * @memberof ResultSet\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   * @return {ResultSet}\n   */\n\n\n  ResultSet.fromJSON = function (json) {\n    return new ResultSet(json.entries);\n  };\n\n  return ResultSet;\n}\n\nexports.name = 'ResultSet';\nexports.path = 'type';\nexports.factory = factory;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","/**\n * typed-function\n *\n * Type checking for JavaScript functions\n *\n * https://github.com/josdejong/typed-function\n */\n'use strict';\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // OldNode. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like OldNode.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.typed = factory();\n  }\n}(this, function () {\n\n  function ok () {\n    return true;\n  }\n\n  function notOk () {\n    return false;\n  }\n\n  function undef () {\n    return undefined;\n  }\n\n  /**\n   * @typedef {{\n   *   params: Param[],\n   *   fn: function\n   * }} Signature\n   *\n   * @typedef {{\n   *   types: Type[],\n   *   restParam: boolean\n   * }} Param\n   *\n   * @typedef {{\n   *   name: string,\n   *   typeIndex: number,\n   *   test: function,\n   *   conversion?: ConversionDef,\n   *   conversionIndex: number,\n   * }} Type\n   *\n   * @typedef {{\n   *   from: string,\n   *   to: string,\n   *   convert: function (*) : *\n   * }} ConversionDef\n   *\n   * @typedef {{\n   *   name: string,\n   *   test: function(*) : boolean\n   * }} TypeDef\n   */\n\n  // create a new instance of typed-function\n  function create () {\n    // data type tests\n    var _types = [\n      { name: 'number',    test: function (x) { return typeof x === 'number' } },\n      { name: 'string',    test: function (x) { return typeof x === 'string' } },\n      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },\n      { name: 'Function',  test: function (x) { return typeof x === 'function'} },\n      { name: 'Array',     test: Array.isArray },\n      { name: 'Date',      test: function (x) { return x instanceof Date } },\n      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },\n      { name: 'Object',    test: function (x) {\n        return typeof x === 'object' && x.constructor === Object\n      }},\n      { name: 'null',      test: function (x) { return x === null } },\n      { name: 'undefined', test: function (x) { return x === undefined } }\n    ];\n\n    var anyType = {\n      name: 'any',\n      test: ok\n    }\n\n    // types which need to be ignored\n    var _ignore = [];\n\n    // type conversions\n    var _conversions = [];\n\n    // This is a temporary object, will be replaced with a typed function at the end\n    var typed = {\n      types: _types,\n      conversions: _conversions,\n      ignore: _ignore\n    };\n\n    /**\n     * Find the test function for a type\n     * @param {String} typeName\n     * @return {TypeDef} Returns the type definition when found,\n     *                    Throws a TypeError otherwise\n     */\n    function findTypeByName (typeName) {\n      var entry = findInArray(typed.types, function (entry) {\n        return entry.name === typeName;\n      });\n\n      if (entry) {\n        return entry;\n      }\n\n      if (typeName === 'any') { // special baked-in case 'any'\n        return anyType;\n      }\n\n      var hint = findInArray(typed.types, function (entry) {\n        return entry.name.toLowerCase() === typeName.toLowerCase();\n      });\n\n      throw new TypeError('Unknown type \"' + typeName + '\"' +\n          (hint ? ('. Did you mean \"' + hint.name + '\"?') : ''));\n    }\n\n    /**\n     * Find the index of a type definition. Handles special case 'any'\n     * @param {TypeDef} type\n     * @return {number}\n     */\n    function findTypeIndex(type) {\n      if (type === anyType) {\n        return 999;\n      }\n\n      return typed.types.indexOf(type);\n    }\n\n    /**\n     * Find a type that matches a value.\n     * @param {*} value\n     * @return {string} Returns the name of the first type for which\n     *                  the type test matches the value.\n     */\n    function findTypeName(value) {\n      var entry = findInArray(typed.types, function (entry) {\n        return entry.test(value);\n      });\n\n      if (entry) {\n        return entry.name;\n      }\n\n      throw new TypeError('Value has unknown type. Value: ' + value);\n    }\n\n    /**\n     * Find a specific signature from a (composed) typed function, for example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *\n     * Function find only only works for exact matches.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature   Signature to be found, can be\n     *                                        an array or a comma separated string.\n     * @return {Function}                     Returns the matching signature, or\n     *                                        throws an error when no signature\n     *                                        is found.\n     */\n    function find (fn, signature) {\n      if (!fn.signatures) {\n        throw new TypeError('Function is no typed-function');\n      }\n\n      // normalize input\n      var arr;\n      if (typeof signature === 'string') {\n        arr = signature.split(',');\n        for (var i = 0; i < arr.length; i++) {\n          arr[i] = arr[i].trim();\n        }\n      }\n      else if (Array.isArray(signature)) {\n        arr = signature;\n      }\n      else {\n        throw new TypeError('String array or a comma separated string expected');\n      }\n\n      var str = arr.join(',');\n\n      // find an exact match\n      var match = fn.signatures[str];\n      if (match) {\n        return match;\n      }\n\n      // TODO: extend find to match non-exact signatures\n\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');\n    }\n\n    /**\n     * Convert a given value to another data type.\n     * @param {*} value\n     * @param {string} type\n     */\n    function convert (value, type) {\n      var from = findTypeName(value);\n\n      // check conversion is needed\n      if (type === from) {\n        return value;\n      }\n\n      for (var i = 0; i < typed.conversions.length; i++) {\n        var conversion = typed.conversions[i];\n        if (conversion.from === from && conversion.to === type) {\n          return conversion.convert(value);\n        }\n      }\n\n      throw new Error('Cannot convert from ' + from + ' to ' + type);\n    }\n    \n    /**\n     * Stringify parameters in a normalized way\n     * @param {Param[]} params\n     * @return {string}\n     */\n    function stringifyParams (params) {\n      return params\n          .map(function (param) {\n            var typeNames = param.types.map(getTypeName);\n\n            return (param.restParam ? '...' : '') + typeNames.join('|');\n          })\n          .join(',');\n    }\n\n    /**\n     * Parse a parameter, like \"...number | boolean\"\n     * @param {string} param\n     * @param {ConversionDef[]} conversions\n     * @return {Param} param\n     */\n    function parseParam (param, conversions) {\n      var restParam = param.indexOf('...') === 0;\n      var types = (!restParam)\n          ? param\n          : (param.length > 3)\n              ? param.slice(3)\n              : 'any';\n\n      var typeNames = types.split('|').map(trim)\n          .filter(notEmpty)\n          .filter(notIgnore);\n\n      var matchingConversions = filterConversions(conversions, typeNames);\n\n      var exactTypes = typeNames.map(function (typeName) {\n        var type = findTypeByName(typeName);\n\n        return {\n          name: typeName,\n          typeIndex: findTypeIndex(type),\n          test: type.test,\n          conversion: null,\n          conversionIndex: -1\n        };\n      });\n\n      var convertibleTypes = matchingConversions.map(function (conversion) {\n        var type = findTypeByName(conversion.from);\n\n        return {\n          name: conversion.from,\n          typeIndex: findTypeIndex(type),\n          test: type.test,\n          conversion: conversion,\n          conversionIndex: conversions.indexOf(conversion)\n        };\n      });\n\n      return {\n        types: exactTypes.concat(convertibleTypes),\n        restParam: restParam\n      };\n    }\n\n    /**\n     * Parse a signature with comma separated parameters,\n     * like \"number | boolean, ...string\"\n     * @param {string} signature\n     * @param {function} fn\n     * @param {ConversionDef[]} conversions\n     * @return {Signature | null} signature\n     */\n    function parseSignature (signature, fn, conversions) {\n      var params = [];\n\n      if (signature.trim() !== '') {\n        params = signature\n            .split(',')\n            .map(trim)\n            .map(function (param, index, array) {\n              var parsedParam = parseParam(param, conversions);\n\n              if (parsedParam.restParam && (index !== array.length - 1)) {\n                throw new SyntaxError('Unexpected rest parameter \"' + param + '\": ' +\n                    'only allowed for the last parameter');\n              }\n\n              return parsedParam;\n          });\n      }\n\n      if (params.some(isInvalidParam)) {\n        // invalid signature: at least one parameter has no types\n        // (they may have been filtered)\n        return null;\n      }\n\n      return {\n        params: params,\n        fn: fn\n      };\n    }\n\n    /**\n     * Test whether a set of params contains a restParam\n     * @param {Param[]} params\n     * @return {boolean} Returns true when the last parameter is a restParam\n     */\n    function hasRestParam(params) {\n      var param = last(params)\n      return param ? param.restParam : false;\n    }\n\n    /**\n     * Test whether a parameter contains conversions\n     * @param {Param} param\n     * @return {boolean} Returns true when at least one of the parameters\n     *                   contains a conversion.\n     */\n    function hasConversions(param) {\n      return param.types.some(function (type) {\n        return type.conversion != null;\n      });\n    }\n\n    /**\n     * Create a type test for a single parameter, which can have one or multiple\n     * types.\n     * @param {Param} param\n     * @return {function(x: *) : boolean} Returns a test function\n     */\n    function compileTest(param) {\n      if (!param || param.types.length === 0) {\n        // nothing to do\n        return ok;\n      }\n      else if (param.types.length === 1) {\n        return findTypeByName(param.types[0].name).test;\n      }\n      else if (param.types.length === 2) {\n        var test0 = findTypeByName(param.types[0].name).test;\n        var test1 = findTypeByName(param.types[1].name).test;\n        return function or(x) {\n          return test0(x) || test1(x);\n        }\n      }\n      else { // param.types.length > 2\n        var tests = param.types.map(function (type) {\n          return findTypeByName(type.name).test;\n        })\n        return function or(x) {\n          for (var i = 0; i < tests.length; i++) {\n            if (tests[i](x)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n    }\n\n    /**\n     * Create a test for all parameters of a signature\n     * @param {Param[]} params\n     * @return {function(args: Array<*>) : boolean}\n     */\n    function compileTests(params) {\n      var tests, test0, test1;\n\n      if (hasRestParam(params)) {\n        // variable arguments like '...number'\n        tests = initial(params).map(compileTest);\n        var varIndex = tests.length;\n        var lastTest = compileTest(last(params));\n        var testRestParam = function (args) {\n          for (var i = varIndex; i < args.length; i++) {\n            if (!lastTest(args[i])) {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n          return testRestParam(args) && (args.length >= varIndex + 1);\n        };\n      }\n      else {\n        // no variable arguments\n        if (params.length === 0) {\n          return function testArgs(args) {\n            return args.length === 0;\n          };\n        }\n        else if (params.length === 1) {\n          test0 = compileTest(params[0]);\n          return function testArgs(args) {\n            return test0(args[0]) && args.length === 1;\n          };\n        }\n        else if (params.length === 2) {\n          test0 = compileTest(params[0]);\n          test1 = compileTest(params[1]);\n          return function testArgs(args) {\n            return test0(args[0]) && test1(args[1]) && args.length === 2;\n          };\n        }\n        else { // arguments.length > 2\n          tests = params.map(compileTest);\n          return function testArgs(args) {\n            for (var i = 0; i < tests.length; i++) {\n              if (!tests[i](args[i])) {\n                return false;\n              }\n            }\n            return args.length === tests.length;\n          };\n        }\n      }\n    }\n\n    /**\n     * Find the parameter at a specific index of a signature.\n     * Handles rest parameters.\n     * @param {Signature} signature\n     * @param {number} index\n     * @return {Param | null} Returns the matching parameter when found,\n     *                        null otherwise.\n     */\n    function getParamAtIndex(signature, index) {\n      return index < signature.params.length\n          ? signature.params[index]\n          : hasRestParam(signature.params)\n              ? last(signature.params)\n              : null\n    }\n\n    /**\n     * Get all type names of a parameter\n     * @param {Signature} signature\n     * @param {number} index\n     * @param {boolean} excludeConversions\n     * @return {string[]} Returns an array with type names\n     */\n    function getExpectedTypeNames (signature, index, excludeConversions) {\n      var param = getParamAtIndex(signature, index);\n      var types = param\n          ? excludeConversions\n                  ? param.types.filter(isExactType)\n                  : param.types\n          : [];\n\n      return types.map(getTypeName);\n    }\n\n    /**\n     * Returns the name of a type\n     * @param {Type} type\n     * @return {string} Returns the type name\n     */\n    function getTypeName(type) {\n      return type.name;\n    }\n\n    /**\n     * Test whether a type is an exact type or conversion\n     * @param {Type} type\n     * @return {boolean} Returns true when\n     */\n    function isExactType(type) {\n      return type.conversion === null || type.conversion === undefined;\n    }\n\n    /**\n     * Helper function for creating error messages: create an array with\n     * all available types on a specific argument index.\n     * @param {Signature[]} signatures\n     * @param {number} index\n     * @return {string[]} Returns an array with available types\n     */\n    function mergeExpectedParams(signatures, index) {\n      var typeNames = uniq(flatMap(signatures, function (signature) {\n        return getExpectedTypeNames(signature, index, false);\n      }));\n\n      return (typeNames.indexOf('any') !== -1) ? ['any'] : typeNames;\n    }\n\n    /**\n     * Create\n     * @param {string} name             The name of the function\n     * @param {array.<*>} args          The actual arguments passed to the function\n     * @param {Signature[]} signatures  A list with available signatures\n     * @return {TypeError} Returns a type error with additional data\n     *                     attached to it in the property `data`\n     */\n    function createError(name, args, signatures) {\n      var err, expected;\n      var _name = name || 'unnamed';\n\n      // test for wrong type at some index\n      var matchingSignatures = signatures;\n      var index;\n      for (index = 0; index < args.length; index++) {\n        var nextMatchingDefs = matchingSignatures.filter(function (signature) {\n          var test = compileTest(getParamAtIndex(signature, index));\n          return (index < signature.params.length || hasRestParam(signature.params)) &&\n              test(args[index]);\n        });\n\n        if (nextMatchingDefs.length === 0) {\n          // no matching signatures anymore, throw error \"wrong type\"\n          expected = mergeExpectedParams(matchingSignatures, index);\n          if (expected.length > 0) {\n            var actualType = findTypeName(args[index]);\n\n            err = new TypeError('Unexpected type of argument in function ' + _name +\n                ' (expected: ' + expected.join(' or ') +\n                ', actual: ' + actualType + ', index: ' + index + ')');\n            err.data = {\n              category: 'wrongType',\n              fn: _name,\n              index: index,\n              actual: actualType,\n              expected: expected\n            }\n            return err;\n          }\n        }\n        else {\n          matchingSignatures = nextMatchingDefs;\n        }\n      }\n\n      // test for too few arguments\n      var lengths = matchingSignatures.map(function (signature) {\n        return hasRestParam(signature.params) ? Infinity : signature.params.length;\n      });\n      if (args.length < Math.min.apply(null, lengths)) {\n        expected = mergeExpectedParams(matchingSignatures, index);\n        err = new TypeError('Too few arguments in function ' + _name +\n            ' (expected: ' + expected.join(' or ') +\n            ', index: ' + args.length + ')');\n        err.data = {\n          category: 'tooFewArgs',\n          fn: _name,\n          index: args.length,\n          expected: expected\n        }\n        return err;\n      }\n\n      // test for too many arguments\n      var maxLength = Math.max.apply(null, lengths);\n      if (args.length > maxLength) {\n        err = new TypeError('Too many arguments in function ' + _name +\n            ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n        err.data = {\n          category: 'tooManyArgs',\n          fn: _name,\n          index: args.length,\n          expectedLength: maxLength\n        }\n        return err;\n      }\n\n      err = new TypeError('Arguments of type \"' + args.join(', ') +\n          '\" do not match any of the defined signatures of function ' + _name + '.');\n      err.data = {\n        category: 'mismatch',\n        actual: args.map(findTypeName)\n      }\n      return err;\n    }\n\n    /**\n     * Find the lowest index of all exact types of a parameter (no conversions)\n     * @param {Param} param\n     * @return {number} Returns the index of the lowest type in typed.types\n     */\n    function getLowestTypeIndex (param) {\n      var min = 999;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].typeIndex);\n        }\n      }\n\n      return min;\n    }\n\n    /**\n     * Find the lowest index of the conversion of all types of the parameter\n     * having a conversion\n     * @param {Param} param\n     * @return {number} Returns the lowest index of the conversions of this type\n     */\n    function getLowestConversionIndex (param) {\n      var min = 999;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (!isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].conversionIndex);\n        }\n      }\n\n      return min;\n    }\n\n    /**\n     * Compare two params\n     * @param {Param} param1\n     * @param {Param} param2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareParams (param1, param2) {\n      var c;\n\n      // compare having a rest parameter or not\n      c = param1.restParam - param2.restParam;\n      if (c !== 0) {\n        return c;\n      }\n\n      // compare having conversions or not\n      c = hasConversions(param1) - hasConversions(param2);\n      if (c !== 0) {\n        return c;\n      }\n\n      // compare the index of the types\n      c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n      if (c !== 0) {\n        return c;\n      }\n\n      // compare the index of any conversion\n      return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n    }\n\n    /**\n     * Compare two signatures\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareSignatures (signature1, signature2) {\n      var len = Math.min(signature1.params.length, signature2.params.length);\n      var i;\n      var c;\n\n      // compare whether the params have conversions at all or not\n      c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions)\n      if (c !== 0) {\n        return c;\n      }\n\n      // next compare whether the params have conversions one by one\n      for (i = 0; i < len; i++) {\n        c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);\n        if (c !== 0) {\n          return c;\n        }\n      }\n\n      // compare the types of the params one by one\n      for (i = 0; i < len; i++) {\n        c = compareParams(signature1.params[i], signature2.params[i]);\n        if (c !== 0) {\n          return c;\n        }\n      }\n\n      // compare the number of params\n      return signature1.params.length - signature2.params.length;\n    }\n\n    /**\n     * Get params containing all types that can be converted to the defined types.\n     *\n     * @param {ConversionDef[]} conversions\n     * @param {string[]} typeNames\n     * @return {ConversionDef[]} Returns the conversions that are available\n     *                        for every type (if any)\n     */\n    function filterConversions(conversions, typeNames) {\n      var matches = {};\n\n      conversions.forEach(function (conversion) {\n        if (typeNames.indexOf(conversion.from) === -1 &&\n            typeNames.indexOf(conversion.to) !== -1 &&\n            !matches[conversion.from]) {\n          matches[conversion.from] = conversion;\n        }\n      });\n\n      return Object.keys(matches).map(function (from) {\n        return matches[from];\n      });\n    }\n\n    /**\n     * Preprocess arguments before calling the original function:\n     * - if needed convert the parameters\n     * - in case of rest parameters, move the rest parameters into an Array\n     * @param {Param[]} params\n     * @param {function} fn\n     * @return {function} Returns a wrapped function\n     */\n    function compileArgsPreprocessing(params, fn) {\n      var fnConvert = fn;\n\n      // TODO: can we make this wrapper function smarter/simpler?\n\n      if (params.some(hasConversions)) {\n        var restParam = hasRestParam(params);\n        var compiledConversions = params.map(compileArgConversion)\n\n        fnConvert = function convertArgs() {\n          var args = [];\n          var last = restParam ? arguments.length - 1 : arguments.length;\n          for (var i = 0; i < last; i++) {\n            args[i] = compiledConversions[i](arguments[i]);\n          }\n          if (restParam) {\n            args[last] = arguments[last].map(compiledConversions[last]);\n          }\n\n          return fn.apply(null, args);\n        }\n      }\n\n      var fnPreprocess = fnConvert;\n      if (hasRestParam(params)) {\n        var offset = params.length - 1;\n\n        fnPreprocess = function preprocessRestParams () {\n          return fnConvert.apply(null,\n              slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n        }\n      }\n\n      return fnPreprocess;\n    }\n\n    /**\n     * Compile conversion for a parameter to the right type\n     * @param {Param} param\n     * @return {function} Returns the wrapped function that will convert arguments\n     *\n     */\n    function compileArgConversion(param) {\n      var test0, test1, conversion0, conversion1;\n      var tests = [];\n      var conversions = [];\n\n      param.types.forEach(function (type) {\n        if (type.conversion) {\n          tests.push(findTypeByName(type.conversion.from).test);\n          conversions.push(type.conversion.convert);\n        }\n      });\n\n      // create optimized conversion functions depending on the number of conversions\n      switch (conversions.length) {\n        case 0:\n          return function convertArg(arg) {\n            return arg;\n          }\n\n        case 1:\n          test0 = tests[0]\n          conversion0 = conversions[0];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg)\n            }\n            return arg;\n          }\n\n        case 2:\n          test0 = tests[0]\n          test1 = tests[1]\n          conversion0 = conversions[0];\n          conversion1 = conversions[1];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg)\n            }\n            if (test1(arg)) {\n              return conversion1(arg)\n            }\n            return arg;\n          }\n\n        default:\n          return function convertArg(arg) {\n            for (var i = 0; i < conversions.length; i++) {\n              if (tests[i](arg)) {\n                return conversions[i](arg);\n              }\n            }\n            return arg;\n          }\n      }\n    }\n\n    /**\n     * Convert an array with signatures into a map with signatures,\n     * where signatures with union types are split into separate signatures\n     *\n     * Throws an error when there are conflicting types\n     *\n     * @param {Signature[]} signatures\n     * @return {Object.<string, function>}  Returns a map with signatures\n     *                                      as key and the original function\n     *                                      of this signature as value.\n     */\n    function createSignaturesMap(signatures) {\n      var signaturesMap = {};\n      signatures.forEach(function (signature) {\n        if (!signature.params.some(hasConversions)) {\n          splitParams(signature.params, true).forEach(function (params) {\n            signaturesMap[stringifyParams(params)] = signature.fn;\n          });\n        }\n      });\n\n      return signaturesMap;\n    }\n\n    /**\n     * Split params with union types in to separate params.\n     *\n     * For example:\n     *\n     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n     *     // returns:\n     *     // [\n     *     //   ['Array', 'string'],\n     *     //   ['Array', 'RegExp'],\n     *     //   ['Object', 'string'],\n     *     //   ['Object', 'RegExp']\n     *     // ]\n     *\n     * @param {Param[]} params\n     * @param {boolean} ignoreConversionTypes\n     * @return {Param[]}\n     */\n    function splitParams(params, ignoreConversionTypes) {\n      function _splitParams(params, index, types) {\n        if (index < params.length) {\n          var param = params[index]\n          var filteredTypes = ignoreConversionTypes\n              ? param.types.filter(isExactType)\n              : param.types;\n          var typeGroups\n\n          if (param.restParam) {\n            // split the types of a rest parameter in two:\n            // one with only exact types, and one with exact types and conversions\n            var exactTypes = filteredTypes.filter(isExactType)\n            typeGroups = exactTypes.length < filteredTypes.length\n                ? [exactTypes, filteredTypes]\n                : [filteredTypes]\n\n          }\n          else {\n            // split all the types of a regular parameter into one type per group\n            typeGroups = filteredTypes.map(function (type) {\n              return [type]\n            })\n          }\n\n          // recurse over the groups with types\n          return flatMap(typeGroups, function (typeGroup) {\n            return _splitParams(params, index + 1, types.concat([typeGroup]));\n          });\n\n        }\n        else {\n          // we've reached the end of the parameters. Now build a new Param\n          var splittedParams = types.map(function (type, typeIndex) {\n            return {\n              types: type,\n              restParam: (typeIndex === params.length - 1) && hasRestParam(params)\n            }\n          });\n\n          return [splittedParams];\n        }\n      }\n\n      return _splitParams(params, 0, []);\n    }\n\n    /**\n     * Test whether two signatures have a conflicting signature\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {boolean} Returns true when the signatures conflict, false otherwise.\n     */\n    function hasConflictingParams(signature1, signature2) {\n      var ii = Math.max(signature1.params.length, signature2.params.length);\n\n      for (var i = 0; i < ii; i++) {\n        var typesNames1 = getExpectedTypeNames(signature1, i, true);\n        var typesNames2 = getExpectedTypeNames(signature2, i, true);\n\n        if (!hasOverlap(typesNames1, typesNames2)) {\n          return false;\n        }\n      }\n\n      var len1 = signature1.params.length;\n      var len2 = signature2.params.length;\n      var restParam1 = hasRestParam(signature1.params);\n      var restParam2 = hasRestParam(signature2.params);\n\n      return restParam1\n          ? restParam2 ? (len1 === len2) : (len2 >= len1)\n          : restParam2 ? (len1 >= len2)  : (len1 === len2)\n    }\n\n    /**\n     * Create a typed function\n     * @param {String} name               The name for the typed function\n     * @param {Object.<string, function>} signaturesMap\n     *                                    An object with one or\n     *                                    multiple signatures as key, and the\n     *                                    function corresponding to the\n     *                                    signature as value.\n     * @return {function}  Returns the created typed function.\n     */\n    function createTypedFunction(name, signaturesMap) {\n      if (Object.keys(signaturesMap).length === 0) {\n        throw new SyntaxError('No signatures provided');\n      }\n\n      // parse the signatures, and check for conflicts\n      var parsedSignatures = [];\n      Object.keys(signaturesMap)\n          .map(function (signature) {\n            return parseSignature(signature, signaturesMap[signature], typed.conversions);\n          })\n          .filter(notNull)\n          .forEach(function (parsedSignature) {\n            // check whether this parameter conflicts with already parsed signatures\n            var conflictingSignature = findInArray(parsedSignatures, function (s) {\n              return hasConflictingParams(s, parsedSignature)\n            });\n            if (conflictingSignature) {\n              throw new TypeError('Conflicting signatures \"' +\n                  stringifyParams(conflictingSignature.params) + '\" and \"' +\n                  stringifyParams(parsedSignature.params) + '\".');\n            }\n\n            parsedSignatures.push(parsedSignature);\n          });\n\n      // split and filter the types of the signatures, and then order them\n      var signatures = flatMap(parsedSignatures, function (parsedSignature) {\n        var params = parsedSignature ? splitParams(parsedSignature.params, false) : []\n\n        return params.map(function (params) {\n          return {\n            params: params,\n            fn: parsedSignature.fn\n          };\n        });\n      }).filter(notNull);\n\n      signatures.sort(compareSignatures);\n\n      // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;\n\n      // compile the tests\n      var tests = signatures.map(function (signature) {\n        return compileTests(signature.params);\n      });\n\n      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n\n      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;\n\n      // compile the functions\n      var fns = signatures.map(function(signature) {\n        return compileArgsPreprocessing(signature.params, signature.fn)\n      });\n\n      var fn0 = ok0 ? fns[0] : undef;\n      var fn1 = ok1 ? fns[1] : undef;\n      var fn2 = ok2 ? fns[2] : undef;\n      var fn3 = ok3 ? fns[3] : undef;\n      var fn4 = ok4 ? fns[4] : undef;\n      var fn5 = ok5 ? fns[5] : undef;\n\n      var len0 = ok0 ? signatures[0].params.length : -1;\n      var len1 = ok1 ? signatures[1].params.length : -1;\n      var len2 = ok2 ? signatures[2].params.length : -1;\n      var len3 = ok3 ? signatures[3].params.length : -1;\n      var len4 = ok4 ? signatures[4].params.length : -1;\n      var len5 = ok5 ? signatures[5].params.length : -1;\n\n      // simple and generic, but also slow\n      var iStart = allOk ? 6 : 0;\n      var iEnd = signatures.length;\n      var generic = function generic() {\n        'use strict';\n\n        for (var i = iStart; i < iEnd; i++) {\n          if (tests[i](arguments)) {\n            return fns[i].apply(null, arguments);\n          }\n        }\n\n        throw createError(name, arguments, signatures);\n      }\n\n      // create the typed function\n      // fast, specialized version. Falls back to the slower, generic one if needed\n      var fn = function fn(arg0, arg1) {\n        'use strict';\n\n        if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(null, arguments); }\n        if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(null, arguments); }\n        if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(null, arguments); }\n        if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(null, arguments); }\n        if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(null, arguments); }\n        if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(null, arguments); }\n\n        return generic.apply(null, arguments);\n      }\n\n      // attach name the typed function\n      try {\n        Object.defineProperty(fn, 'name', {value: name});\n      }\n      catch (err) {\n        // old browsers do not support Object.defineProperty and some don't support setting the name property\n        // the function name is not essential for the functioning, it's mostly useful for debugging,\n        // so it's fine to have unnamed functions.\n      }\n\n      // attach signatures to the function\n      fn.signatures = createSignaturesMap(signatures);\n\n      return fn;\n    }\n\n    /**\n     * Test whether a type should be NOT be ignored\n     * @param {string} typeName\n     * @return {boolean}\n     */\n    function notIgnore(typeName) {\n      return typed.ignore.indexOf(typeName) === -1;\n    }\n\n    /**\n     * trim a string\n     * @param {string} str\n     * @return {string}\n     */\n    function trim(str) {\n      return str.trim();\n    }\n\n    /**\n     * Test whether a string is not empty\n     * @param {string} str\n     * @return {boolean}\n     */\n    function notEmpty(str) {\n      return !!str;\n    }\n\n    /**\n     * test whether a value is not strict equal to null\n     * @param {*} value\n     * @return {boolean}\n     */\n    function notNull(value) {\n      return value !== null;\n    }\n\n    /**\n     * Test whether a parameter has no types defined\n     * @param {Param} param\n     * @return {boolean}\n     */\n    function isInvalidParam (param) {\n      return param.types.length === 0;\n    }\n\n    /**\n     * Return all but the last items of an array\n     * @param {Array} arr\n     * @return {Array}\n     */\n    function initial(arr) {\n      return arr.slice(0, arr.length - 1);\n    }\n\n    /**\n     * return the last item of an array\n     * @param {Array} arr\n     * @return {*}\n     */\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n\n    /**\n     * Slice an array or function Arguments\n     * @param {Array | Arguments | IArguments} arr\n     * @param {number} start\n     * @param {number} [end]\n     * @return {Array}\n     */\n    function slice(arr, start, end) {\n      return Array.prototype.slice.call(arr, start, end);\n    }\n\n    /**\n     * Test whether an array contains some item\n     * @param {Array} array\n     * @param {*} item\n     * @return {boolean} Returns true if array contains item, false if not.\n     */\n    function contains(array, item) {\n      return array.indexOf(item) !== -1;\n    }\n\n    /**\n     * Test whether two arrays have overlapping items\n     * @param {Array} array1\n     * @param {Array} array2\n     * @return {boolean} Returns true when at least one item exists in both arrays\n     */\n    function hasOverlap(array1, array2) {\n      for (var i = 0; i < array1.length; i++) {\n        if (contains(array2, array1[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Return the first item from an array for which test(arr[i]) returns true\n     * @param {Array} arr\n     * @param {function} test\n     * @return {* | undefined} Returns the first matching item\n     *                         or undefined when there is no match\n     */\n    function findInArray(arr, test) {\n      for (var i = 0; i < arr.length; i++) {\n        if (test(arr[i])) {\n          return arr[i];\n        }\n      }\n      return undefined;\n    }\n\n    /**\n     * Filter unique items of an array with strings\n     * @param {string[]} arr\n     * @return {string[]}\n     */\n    function uniq(arr) {\n      var entries = {}\n      for (var i = 0; i < arr.length; i++) {\n        entries[arr[i]] = true;\n      }\n      return Object.keys(entries);\n    }\n\n    /**\n     * Flat map the result invoking a callback for every item in an array.\n     * https://gist.github.com/samgiles/762ee337dff48623e729\n     * @param {Array} arr\n     * @param {function} callback\n     * @return {Array}\n     */\n    function flatMap(arr, callback) {\n      return Array.prototype.concat.apply([], arr.map(callback));\n    }\n\n    /**\n     * Retrieve the function name from a set of typed functions,\n     * and check whether the name of all functions match (if given)\n     * @param {function[]} fns\n     */\n    function getName (fns) {\n      var name = '';\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n\n        // check whether the names are the same when defined\n        if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {\n          if (name === '') {\n            name = fn.name;\n          }\n          else if (name !== fn.name) {\n            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');\n            err.data = {\n              actual: fn.name,\n              expected: name\n            };\n            throw err;\n          }\n        }\n      }\n\n      return name;\n    }\n\n    // extract and merge all signatures of a list with typed functions\n    function extractSignatures(fns) {\n      var err;\n      var signaturesMap = {};\n\n      function validateUnique(_signature, _fn) {\n        if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {\n          err = new Error('Signature \"' + _signature + '\" is defined twice');\n          err.data = {signature: _signature};\n          throw err;\n          // else: both signatures point to the same function, that's fine\n        }\n      }\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n\n        // test whether this is a typed-function\n        if (typeof fn.signatures === 'object') {\n          // merge the signatures\n          for (var signature in fn.signatures) {\n            if (fn.signatures.hasOwnProperty(signature)) {\n              validateUnique(signature, fn.signatures[signature]);\n              signaturesMap[signature] = fn.signatures[signature];\n            }\n          }\n        }\n        else if (typeof fn.signature === 'string') {\n          validateUnique(fn.signature, fn);\n          signaturesMap[fn.signature] = fn;\n        }\n        else {\n          err = new TypeError('Function is no typed-function (index: ' + i + ')');\n          err.data = {index: i};\n          throw err;\n        }\n      }\n\n      return signaturesMap;\n    }\n\n    typed = createTypedFunction('typed', {\n      'string, Object': createTypedFunction,\n      'Object': function (signaturesMap) {\n        // find existing name\n        var fns = [];\n        for (var signature in signaturesMap) {\n          if (signaturesMap.hasOwnProperty(signature)) {\n            fns.push(signaturesMap[signature]);\n          }\n        }\n        var name = getName(fns);\n        return createTypedFunction(name, signaturesMap);\n      },\n      '...Function': function (fns) {\n        return createTypedFunction(getName(fns), extractSignatures(fns));\n      },\n      'string, ...Function': function (name, fns) {\n        return createTypedFunction(name, extractSignatures(fns));\n      }\n    });\n\n    typed.create = create;\n    typed.types = _types;\n    typed.conversions = _conversions;\n    typed.ignore = _ignore;\n    typed.convert = convert;\n    typed.find = find;\n\n    /**\n     * add a type\n     * @param {{name: string, test: function}} type\n     * @param {boolean} [beforeObjectTest=true]\n     *                          If true, the new test will be inserted before\n     *                          the test with name 'Object' (if any), since\n     *                          tests for Object match Array and classes too.\n     */\n    typed.addType = function (type, beforeObjectTest) {\n      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      if (beforeObjectTest !== false) {\n        for (var i = 0; i < typed.types.length; i++) {\n          if (typed.types[i].name === 'Object') {\n            typed.types.splice(i, 0, type);\n            return\n          }\n        }\n      }\n\n      typed.types.push(type);\n    };\n\n    // add a conversion\n    typed.addConversion = function (conversion) {\n      if (!conversion\n          || typeof conversion.from !== 'string'\n          || typeof conversion.to !== 'string'\n          || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n\n      typed.conversions.push(conversion);\n    };\n\n    return typed;\n  }\n\n  return create();\n}));","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  var algorithm01 = function algorithm01(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // process data types\n\n    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function\n\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars\n\n    var i, j; // result (DenseMatrix)\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated\n\n        w[i] = mark;\n      } // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        } else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  return algorithm01;\n}\n\nexports.name = 'algorithm01';\nexports.factory = factory;","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  var abs = typed('abs', {\n    'number': Math.abs,\n    'Complex': function Complex(x) {\n      return x.abs();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.abs();\n    },\n    'Fraction': function Fraction(x) {\n      return x.abs();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return deepMap(x, abs, true);\n    },\n    'Unit': function Unit(x) {\n      return x.abs();\n    }\n  });\n  abs.toTex = {\n    1: \"\\\\left|${args[0]}\\\\right|\"\n  };\n  return abs;\n}\n\nexports.name = 'abs';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var latex = require('../../utils/latex');\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See http://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  var mod = typed('mod', {\n    'number, number': _mod,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, mod, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, mod, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, mod, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, mod);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return mod(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, mod, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, mod, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, mod, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, mod, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, mod, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, mod, true).valueOf();\n    }\n  });\n  mod.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['mod'], \"${args[1]}\\\\right)\")\n  };\n  return mod;\n  /**\n   * Calculate the modulus of two numbers\n   * @param {number} x\n   * @param {number} y\n   * @returns {number} res\n   * @private\n   */\n\n  function _mod(x, y) {\n    if (y > 0) {\n      // We don't use JavaScript's % operator here as this doesn't work\n      // correctly for x < 0 and x === 0\n      // see http://en.wikipedia.org/wiki/Modulo_operation\n      return x - y * Math.floor(x / y);\n    } else if (y === 0) {\n      return x;\n    } else {\n      // y < 0\n      // TODO: implement mod for a negative divisor\n      throw new Error('Cannot calculate mod for a negative divisor');\n    }\n  }\n}\n\nexports.name = 'mod';\nexports.factory = factory;","'use strict';\n\nvar util = require('../../../utils/index');\n\nvar object = util.object;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var abs = load(require('../../arithmetic/abs'));\n  var addScalar = load(require('../../arithmetic/addScalar'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));\n  var subtract = load(require('../../arithmetic/subtract'));\n  var larger = load(require('../../relational/larger'));\n  var equalScalar = load(require('../../relational/equalScalar'));\n  var unaryMinus = load(require('../../arithmetic/unaryMinus'));\n  var SparseMatrix = type.SparseMatrix;\n  var DenseMatrix = type.DenseMatrix;\n  var Spa = type.Spa;\n  /**\n   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n   * row permutation vector `p` where `A[p,:] = L * U`\n   *\n   * Syntax:\n   *\n   *    math.lup(A)\n   *\n   * Example:\n   *\n   *    const m = [[2, 1], [1, 4]]\n   *    const r = math.lup(m)\n   *    // r = {\n   *    //   L: [[1, 0], [0.5, 1]],\n   *    //   U: [[2, 1], [0, 3.5]],\n   *    //   P: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    slu, lsolve, lusolve, usolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n   *\n   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n   */\n\n  var lup = typed('lup', {\n    'DenseMatrix': function DenseMatrix(m) {\n      return _denseLUP(m);\n    },\n    'SparseMatrix': function SparseMatrix(m) {\n      return _sparseLUP(m);\n    },\n    'Array': function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a); // lup, use matrix implementation\n\n      var r = _denseLUP(m); // result\n\n\n      return {\n        L: r.L.valueOf(),\n        U: r.U.valueOf(),\n        p: r.p\n      };\n    }\n  });\n\n  function _denseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1]; // minimum rows and columns\n\n    var n = Math.min(rows, columns); // matrix array, clone original data\n\n    var data = object.clone(m._data); // l matrix arrays\n\n    var ldata = [];\n    var lsize = [rows, n]; // u matrix arrays\n\n    var udata = [];\n    var usize = [n, columns]; // vars\n\n    var i, j, k; // permutation vector\n\n    var p = [];\n\n    for (i = 0; i < rows; i++) {\n      p[i] = i;\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows\n        for (i = 0; i < rows; i++) {\n          // min i,j\n          var min = Math.min(i, j); // v[i, j]\n\n          var s = 0; // loop up to min\n\n          for (k = 0; k < min; k++) {\n            // s = l[i, k] - data[k, j]\n            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n          }\n\n          data[i][j] = subtract(data[i][j], s);\n        }\n      } // row with larger value in cvector, row >= j\n\n\n      var pi = j;\n      var pabsv = 0;\n      var vjj = 0; // loop rows\n\n      for (i = j; i < rows; i++) {\n        // data @ i, j\n        var v = data[i][j]; // absolute value\n\n        var absv = abs(v); // value is greater than pivote value\n\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = i; // update max value\n\n          pabsv = absv; // value @ [j, j]\n\n          vjj = v;\n        }\n      } // swap rows (j <-> pi)\n\n\n      if (j !== pi) {\n        // swap values j <-> pi in p\n        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data\n\n        DenseMatrix._swapRows(j, pi, data);\n      } // check column is in lower triangular matrix\n\n\n      if (j < rows) {\n        // loop rows (lower triangular matrix)\n        for (i = j + 1; i < rows; i++) {\n          // value @ i, j\n          var vij = data[i][j];\n\n          if (!equalScalar(vij, 0)) {\n            // update data\n            data[i][j] = divideScalar(data[i][j], vjj);\n          }\n        }\n      }\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // initialize row in arrays\n        if (j === 0) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i] = [];\n          } // L\n\n\n          ldata[i] = [];\n        } // check we are in the upper triangular matrix\n\n\n        if (i < j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          } // check column exists in lower triangular matrix\n\n\n          if (j < rows) {\n            // L\n            ldata[i][j] = 0;\n          }\n\n          continue;\n        } // diagonal value\n\n\n        if (i === j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          } // check column exists in lower triangular matrix\n\n\n          if (j < rows) {\n            // L\n            ldata[i][j] = 1;\n          }\n\n          continue;\n        } // check row exists in upper triangular matrix\n\n\n        if (i < columns) {\n          // U\n          udata[i][j] = 0;\n        } // check column exists in lower triangular matrix\n\n\n        if (j < rows) {\n          // L\n          ldata[i][j] = data[i][j];\n        }\n      }\n    } // l matrix\n\n\n    var l = new DenseMatrix({\n      data: ldata,\n      size: lsize\n    }); // u matrix\n\n    var u = new DenseMatrix({\n      data: udata,\n      size: usize\n    }); // p vector\n\n    var pv = [];\n\n    for (i = 0, n = p.length; i < n; i++) {\n      pv[p[i]] = i;\n    } // return matrices\n\n\n    return {\n      L: l,\n      U: u,\n      p: pv,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n\n  function _sparseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1]; // minimum rows and columns\n\n    var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)\n\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // l matrix arrays\n\n    var lvalues = [];\n    var lindex = [];\n    var lptr = [];\n    var lsize = [rows, n]; // u matrix arrays\n\n    var uvalues = [];\n    var uindex = [];\n    var uptr = [];\n    var usize = [n, columns]; // vars\n\n    var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)\n\n    var pvCo = [];\n    var pvOc = [];\n\n    for (i = 0; i < rows; i++) {\n      pvCo[i] = i;\n      pvOc[i] = i;\n    } // swap indices in permutation vectors (condition x < y)!\n\n\n    var swapIndeces = function swapIndeces(x, y) {\n      // find pv indeces getting data from x and y\n      var kx = pvOc[x];\n      var ky = pvOc[y]; // update permutation vector current -> original\n\n      pvCo[kx] = y;\n      pvCo[ky] = x; // update permutation vector original -> current\n\n      pvOc[x] = ky;\n      pvOc[y] = kx;\n    }; // loop columns\n\n\n    var _loop = function _loop() {\n      // sparse accumulator\n      var spa = new Spa(); // check lower triangular matrix has a value @ column j\n\n      if (j < rows) {\n        // update ptr\n        lptr.push(lvalues.length); // first value in j column for lower triangular matrix\n\n        lvalues.push(1);\n        lindex.push(j);\n      } // update ptr\n\n\n      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // copy column j into sparse accumulator\n\n      for (k = k0; k < k1; k++) {\n        // row\n        i = index[k]; // copy column values into sparse accumulator (use permutation vector)\n\n        spa.set(pvCo[i], values[k]);\n      } // skip first column in upper triangular matrix\n\n\n      if (j > 0) {\n        // loop rows in column j (above diagonal)\n        spa.forEach(0, j - 1, function (k, vkj) {\n          // loop rows in column k (L)\n          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n            // check row is below k\n            if (i > k) {\n              // update spa value\n              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n            }\n          });\n        });\n      } // row with larger value in spa, row >= j\n\n\n      var pi = j;\n      var vjj = spa.get(j);\n      var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)\n\n      spa.forEach(j + 1, rows - 1, function (x, v) {\n        // absolute value\n        var absv = abs(v); // value is greater than pivote value\n\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = x; // update max value\n\n          pabsv = absv; // value @ [j, j]\n\n          vjj = v;\n        }\n      }); // swap rows (j <-> pi)\n\n      if (j !== pi) {\n        // swap values j <-> pi in L\n        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U\n\n\n        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa\n\n\n        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)\n\n        swapIndeces(j, pi);\n      } // loop values in spa (order by row)\n\n\n      spa.forEach(0, rows - 1, function (x, v) {\n        // check we are above diagonal\n        if (x <= j) {\n          // update upper triangular matrix\n          uvalues.push(v);\n          uindex.push(x);\n        } else {\n          // update value\n          v = divideScalar(v, vjj); // check value is non zero\n\n          if (!equalScalar(v, 0)) {\n            // update lower triangular matrix\n            lvalues.push(v);\n            lindex.push(x);\n          }\n        }\n      });\n    };\n\n    for (j = 0; j < columns; j++) {\n      _loop();\n    } // update ptrs\n\n\n    uptr.push(uvalues.length);\n    lptr.push(lvalues.length); // return matrices\n\n    return {\n      L: new SparseMatrix({\n        values: lvalues,\n        index: lindex,\n        ptr: lptr,\n        size: lsize\n      }),\n      U: new SparseMatrix({\n        values: uvalues,\n        index: uindex,\n        ptr: uptr,\n        size: usize\n      }),\n      p: pvCo,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n\n  return lup;\n}\n\nexports.name = 'lup';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  var algorithm03 = function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (DenseMatrix)\n\n\n    var cdata = []; // initialize dense matrix\n\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      } // process workspace\n\n\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  return algorithm03;\n}\n\nexports.name = 'algorithm03';\nexports.factory = factory;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Test whether two values are equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  var equalScalar = typed('equalScalar', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x === y || nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.equals(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return equalScalar(x.value, y.value);\n    }\n  });\n  return equalScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var larger = load(require('../relational/larger'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n\n  var max = typed('max', {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n  max.toTex = \"\\\\max\\\\left(${args}\\\\right)\";\n  return max;\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n\n\n  function _max(array) {\n    var max;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          max = NaN;\n        } else if (max === undefined || larger(value, max)) {\n          max = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n\n    if (max === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    return max;\n  }\n}\n\nexports.name = 'max';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar typedFunction = require('typed-function');\n\nvar digits = require('./../utils/number').digits;\n\nvar isBigNumber = require('./../utils/bignumber/isBigNumber');\n\nvar isMatrix = require('./../utils/collection/isMatrix'); // returns a new instance of typed-function\n\n\nvar _createTyped = function createTyped() {\n  // initially, return the original instance of typed-function\n  // consecutively, return a new instance from typed.create.\n  _createTyped = typedFunction.create;\n  return typedFunction;\n};\n/**\n * Factory function for creating a new typed instance\n * @param {Object} type   Object with data types like Complex and BigNumber\n * @returns {Function}\n */\n\n\nexports.create = function create(type) {\n  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n  // type checks for all known types\n  //\n  // note that:\n  //\n  // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.\n  //   instanceof cannot be used because that would not allow to pass data from\n  //   one instance of math.js to another since each has it's own instance of Unit.\n  // - check the `isUnit` property via the constructor, so there will be no\n  //   matches for \"fake\" instances like plain objects with a property `isUnit`.\n  //   That is important for security reasons.\n  // - It must not be possible to override the type checks used internally,\n  //   for security reasons, so these functions are not exposed in the expression\n  //   parser.\n  type.isNumber = function (x) {\n    return typeof x === 'number';\n  };\n\n  type.isComplex = function (x) {\n    return type.Complex && x instanceof type.Complex || false;\n  };\n\n  type.isBigNumber = isBigNumber;\n\n  type.isFraction = function (x) {\n    return type.Fraction && x instanceof type.Fraction || false;\n  };\n\n  type.isUnit = function (x) {\n    return x && x.constructor.prototype.isUnit || false;\n  };\n\n  type.isString = function (x) {\n    return typeof x === 'string';\n  };\n\n  type.isArray = Array.isArray;\n  type.isMatrix = isMatrix;\n\n  type.isDenseMatrix = function (x) {\n    return x && x.isDenseMatrix && x.constructor.prototype.isMatrix || false;\n  };\n\n  type.isSparseMatrix = function (x) {\n    return x && x.isSparseMatrix && x.constructor.prototype.isMatrix || false;\n  };\n\n  type.isRange = function (x) {\n    return x && x.constructor.prototype.isRange || false;\n  };\n\n  type.isIndex = function (x) {\n    return x && x.constructor.prototype.isIndex || false;\n  };\n\n  type.isBoolean = function (x) {\n    return typeof x === 'boolean';\n  };\n\n  type.isResultSet = function (x) {\n    return x && x.constructor.prototype.isResultSet || false;\n  };\n\n  type.isHelp = function (x) {\n    return x && x.constructor.prototype.isHelp || false;\n  };\n\n  type.isFunction = function (x) {\n    return typeof x === 'function';\n  };\n\n  type.isDate = function (x) {\n    return x instanceof Date;\n  };\n\n  type.isRegExp = function (x) {\n    return x instanceof RegExp;\n  };\n\n  type.isObject = function (x) {\n    return _typeof(x) === 'object' && x.constructor === Object && !type.isComplex(x) && !type.isFraction(x);\n  };\n\n  type.isNull = function (x) {\n    return x === null;\n  };\n\n  type.isUndefined = function (x) {\n    return x === undefined;\n  };\n\n  type.isAccessorNode = function (x) {\n    return x && x.isAccessorNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isArrayNode = function (x) {\n    return x && x.isArrayNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isAssignmentNode = function (x) {\n    return x && x.isAssignmentNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isBlockNode = function (x) {\n    return x && x.isBlockNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isConditionalNode = function (x) {\n    return x && x.isConditionalNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isConstantNode = function (x) {\n    return x && x.isConstantNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isFunctionAssignmentNode = function (x) {\n    return x && x.isFunctionAssignmentNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isFunctionNode = function (x) {\n    return x && x.isFunctionNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isIndexNode = function (x) {\n    return x && x.isIndexNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isNode = function (x) {\n    return x && x.isNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isObjectNode = function (x) {\n    return x && x.isObjectNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isOperatorNode = function (x) {\n    return x && x.isOperatorNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isParenthesisNode = function (x) {\n    return x && x.isParenthesisNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isRangeNode = function (x) {\n    return x && x.isRangeNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isSymbolNode = function (x) {\n    return x && x.isSymbolNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isChain = function (x) {\n    return x && x.constructor.prototype.isChain || false;\n  }; // get a new instance of typed-function\n\n\n  var typed = _createTyped(); // define all types. The order of the types determines in which order function\n  // arguments are type-checked (so for performance it's important to put the\n  // most used types first).\n\n\n  typed.types = [{\n    name: 'number',\n    test: type.isNumber\n  }, {\n    name: 'Complex',\n    test: type.isComplex\n  }, {\n    name: 'BigNumber',\n    test: type.isBigNumber\n  }, {\n    name: 'Fraction',\n    test: type.isFraction\n  }, {\n    name: 'Unit',\n    test: type.isUnit\n  }, {\n    name: 'string',\n    test: type.isString\n  }, {\n    name: 'Array',\n    test: type.isArray\n  }, {\n    name: 'Matrix',\n    test: type.isMatrix\n  }, {\n    name: 'DenseMatrix',\n    test: type.isDenseMatrix\n  }, {\n    name: 'SparseMatrix',\n    test: type.isSparseMatrix\n  }, {\n    name: 'Range',\n    test: type.isRange\n  }, {\n    name: 'Index',\n    test: type.isIndex\n  }, {\n    name: 'boolean',\n    test: type.isBoolean\n  }, {\n    name: 'ResultSet',\n    test: type.isResultSet\n  }, {\n    name: 'Help',\n    test: type.isHelp\n  }, {\n    name: 'function',\n    test: type.isFunction\n  }, {\n    name: 'Date',\n    test: type.isDate\n  }, {\n    name: 'RegExp',\n    test: type.isRegExp\n  }, {\n    name: 'null',\n    test: type.isNull\n  }, {\n    name: 'undefined',\n    test: type.isUndefined\n  }, {\n    name: 'OperatorNode',\n    test: type.isOperatorNode\n  }, {\n    name: 'ConstantNode',\n    test: type.isConstantNode\n  }, {\n    name: 'SymbolNode',\n    test: type.isSymbolNode\n  }, {\n    name: 'ParenthesisNode',\n    test: type.isParenthesisNode\n  }, {\n    name: 'FunctionNode',\n    test: type.isFunctionNode\n  }, {\n    name: 'FunctionAssignmentNode',\n    test: type.isFunctionAssignmentNode\n  }, {\n    name: 'ArrayNode',\n    test: type.isArrayNode\n  }, {\n    name: 'AssignmentNode',\n    test: type.isAssignmentNode\n  }, {\n    name: 'BlockNode',\n    test: type.isBlockNode\n  }, {\n    name: 'ConditionalNode',\n    test: type.isConditionalNode\n  }, {\n    name: 'IndexNode',\n    test: type.isIndexNode\n  }, {\n    name: 'RangeNode',\n    test: type.isRangeNode\n  }, {\n    name: 'Node',\n    test: type.isNode\n  }, {\n    name: 'Object',\n    test: type.isObject // order 'Object' last, it matches on other classes too\n\n  }]; // TODO: add conversion from BigNumber to number?\n\n  typed.conversions = [{\n    from: 'number',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      // note: conversion from number to BigNumber can fail if x has >15 digits\n      if (digits(x) > 15) {\n        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');\n      }\n\n      return new type.BigNumber(x);\n    }\n  }, {\n    from: 'number',\n    to: 'Complex',\n    convert: function convert(x) {\n      return new type.Complex(x, 0);\n    }\n  }, {\n    from: 'number',\n    to: 'string',\n    convert: function convert(x) {\n      return x + '';\n    }\n  }, {\n    from: 'BigNumber',\n    to: 'Complex',\n    convert: function convert(x) {\n      return new type.Complex(x.toNumber(), 0);\n    }\n  }, {\n    from: 'Fraction',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');\n    }\n  }, {\n    from: 'Fraction',\n    to: 'Complex',\n    convert: function convert(x) {\n      return new type.Complex(x.valueOf(), 0);\n    }\n  }, {\n    from: 'number',\n    to: 'Fraction',\n    convert: function convert(x) {\n      var f = new type.Fraction(x);\n\n      if (f.valueOf() !== x) {\n        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');\n      }\n\n      return new type.Fraction(x);\n    }\n  }, {\n    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n    //  from: 'Fraction',\n    //  to: 'number',\n    //  convert: function (x) {\n    //    return x.valueOf()\n    //  }\n    // }, {\n    from: 'string',\n    to: 'number',\n    convert: function convert(x) {\n      var n = Number(x);\n\n      if (isNaN(n)) {\n        throw new Error('Cannot convert \"' + x + '\" to a number');\n      }\n\n      return n;\n    }\n  }, {\n    from: 'string',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      try {\n        return new type.BigNumber(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to BigNumber');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Fraction',\n    convert: function convert(x) {\n      try {\n        return new type.Fraction(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Fraction');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Complex',\n    convert: function convert(x) {\n      try {\n        return new type.Complex(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Complex');\n      }\n    }\n  }, {\n    from: 'boolean',\n    to: 'number',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'boolean',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      return new type.BigNumber(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'Fraction',\n    convert: function convert(x) {\n      return new type.Fraction(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'string',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'Array',\n    to: 'Matrix',\n    convert: function convert(array) {\n      return new type.DenseMatrix(array);\n    }\n  }, {\n    from: 'Matrix',\n    to: 'Array',\n    convert: function convert(matrix) {\n      return matrix.valueOf();\n    }\n  }];\n  return typed;\n};","'use strict';\n\nvar format = require('../../utils/string').format;\n\nvar escapeLatex = require('../../utils/latex').escape;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var getType = load(require('../../function/utils/typeof'));\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (arguments.length === 2) {\n      // TODO: remove deprecation error some day (created 2018-01-23)\n      throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs\n\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n  ;\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return format(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch (getType(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch (getType(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        var index = value.toLowerCase().indexOf('e');\n\n        if (index !== -1) {\n          return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n        }\n\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}\n\nexports.name = 'ConstantNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar forEach = require('../../utils/array').forEach;\n\nvar map = require('../../utils/array').map;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var ResultSet = load(require('../../type/resultset/ResultSet'));\n  /**\n   * @constructor BlockNode\n   * @extends {Node}\n   * Holds a set with blocks\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n   *            An array with blocks, where a block is constructed as an Object\n   *            with properties block, which is a Node, and visible, which is\n   *            a boolean. The property visible is optional and is true by default\n   */\n\n  function BlockNode(blocks) {\n    if (!(this instanceof BlockNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input, copy blocks\n\n\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\n    this.blocks = blocks.map(function (block) {\n      var node = block && block.node;\n      var visible = block && block.visible !== undefined ? block.visible : true;\n      if (!type.isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n      return {\n        node: node,\n        visible: visible\n      };\n    });\n  }\n\n  BlockNode.prototype = new Node();\n  BlockNode.prototype.type = 'BlockNode';\n  BlockNode.prototype.isBlockNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  BlockNode.prototype._compile = function (math, argNames) {\n    var evalBlocks = map(this.blocks, function (block) {\n      return {\n        eval: block.node._compile(math, argNames),\n        visible: block.visible\n      };\n    });\n    return function evalBlockNodes(scope, args, context) {\n      var results = [];\n      forEach(evalBlocks, function evalBlockNode(block) {\n        var result = block.eval(scope, args, context);\n\n        if (block.visible) {\n          results.push(result);\n        }\n      });\n      return new ResultSet(results);\n    };\n  };\n  /**\n   * Execute a callback for each of the child blocks of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  BlockNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.blocks.length; i++) {\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n    }\n  };\n  /**\n   * Create a new BlockNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {BlockNode} Returns a transformed copy of the node\n   */\n\n\n  BlockNode.prototype.map = function (callback) {\n    var blocks = [];\n\n    for (var i = 0; i < this.blocks.length; i++) {\n      var block = this.blocks[i];\n\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\n      blocks[i] = {\n        node: node,\n        visible: block.visible\n      };\n    }\n\n    return new BlockNode(blocks);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {BlockNode}\n   */\n\n\n  BlockNode.prototype.clone = function () {\n    var blocks = this.blocks.map(function (block) {\n      return {\n        node: block.node,\n        visible: block.visible\n      };\n    });\n    return new BlockNode(blocks);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype._toString = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toString(options) + (param.visible ? '' : ';');\n    }).join('\\n');\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  BlockNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'BlockNode',\n      blocks: this.blocks\n    };\n  };\n  /**\n   * Instantiate an BlockNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n   *                       where mathjs is optional\n   * @returns {BlockNode}\n   */\n\n\n  BlockNode.fromJSON = function (json) {\n    return new BlockNode(json.blocks);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype.toHTML = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n    }).join('<span class=\"math-separator\"><br /></span>');\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  BlockNode.prototype._toTex = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toTex(options) + (param.visible ? '' : ';');\n    }).join('\\\\;\\\\;\\n');\n  };\n\n  return BlockNode;\n}\n\nexports.name = 'BlockNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var parse = load(require('../parse'));\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval().\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.parse(expr)\n   *     math.parse(expr, options)\n   *     math.parse([expr1, expr2, expr3, ...])\n   *     math.parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     const node1 = math.parse('sqrt(3^2 + 4^2)')\n   *     node1.compile().eval() // 5\n   *\n   *     let scope = {a:3, b:4}\n   *     const node2 = math.parse('a * b') // 12\n   *     const code2 = node2.compile()\n   *     code2.eval(scope) // 12\n   *     scope.a = 5\n   *     code2.eval(scope) // 20\n   *\n   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].compile().eval() // 12\n   *\n   * See also:\n   *\n   *     eval, compile\n   *\n   * @param {string | string[] | Matrix} expr          Expression to be parsed\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n\n  return typed('parse', {\n    'string | Array | Matrix': parse,\n    'string | Array | Matrix, Object': parse\n  });\n}\n\nexports.name = 'parse';\nexports.factory = factory;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n\n  var smaller = typed('smaller', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x < y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === -1;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return smaller(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, smaller);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, smaller, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, smaller, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, smaller);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return smaller(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, smaller, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, smaller, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, smaller, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, smaller, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smaller, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smaller, true).valueOf();\n    }\n  });\n  smaller.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['smaller'], \"${args[1]}\\\\right)\")\n  };\n  return smaller;\n}\n\nexports.name = 'smaller';\nexports.factory = factory;","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n\n  var xor = typed('xor', {\n    'number, number': function numberNumber(x, y) {\n      return !!x !== !!y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return xor(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, xor);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, xor, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, xor, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, xor);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return xor(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, xor, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, xor, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, xor, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, xor, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, xor, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, xor, true).valueOf();\n    }\n  });\n  xor.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['xor'], \"${args[1]}\\\\right)\")\n  };\n  return xor;\n}\n\nexports.name = 'xor';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm11 = function algorithm11(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k]; // invoke callback\n\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\n\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    } // update ptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm11;\n}\n\nexports.name = 'algorithm11';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n\n  var or = typed('or', {\n    'number, number': function numberNumber(x, y) {\n      return !!(x || y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return or(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, or);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, or, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, or, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, or);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return or(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return or(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return or(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, or, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, or, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, or, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, or, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, or, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, or, true).valueOf();\n    }\n  });\n  or.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['or'], \"${args[1]}\\\\right)\")\n  };\n  return or;\n}\n\nexports.name = 'or';\nexports.factory = factory;","'use strict';\n\nvar util = require('../../utils/index');\n\nvar string = util.string;\nvar isString = string.isString;\n\nfunction factory(type, config, load, typed) {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *\n   *     let matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *\n   *     let matrix = math.matrix([[1, 2], [3, 4]])\n   *     matix.size()              // [2, 2]\n   *     matrix.resize([3, 2], 5)\n   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n  /**\n   * Get the Matrix storage constructor for the given format.\n   *\n   * @param {string} format       The Matrix storage format.\n   *\n   * @return {Function}           The Matrix storage constructor.\n   */\n\n  Matrix.storage = function (format) {\n    // check storage format is a string\n    if (!isString(format)) {\n      throw new TypeError('format must be a string value');\n    } // get storage format constructor\n\n\n    var constructor = Matrix._storage[format];\n\n    if (!constructor) {\n      throw new SyntaxError('Unsupported matrix storage format: ' + format);\n    } // return storage constructor\n\n\n    return constructor;\n  }; // a map with all constructors for all storage types\n\n\n  Matrix._storage = {};\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n\n\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n\n\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n\n\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n\n\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n\n\n  Matrix.prototype.size = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n\n\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  }; // exports\n\n\n  return Matrix;\n}\n\nexports.name = 'Matrix';\nexports.path = 'type';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n   * @private\n   */\n  var multiplyScalar = typed('multiplyScalar', {\n    'number, number': function numberNumber(x, y) {\n      return x * y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n  return multiplyScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar keywords = require('../keywords');\n\nvar escape = require('../../utils/string').escape;\n\nvar forEach = require('../../utils/array').forEach;\n\nvar join = require('../../utils/array').join;\n\nvar latex = require('../../utils/latex');\n\nvar operators = require('../operators');\n\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor FunctionAssignmentNode\n   * @extends {Node}\n   * Function assignment\n   *\n   * @param {string} name           Function name\n   * @param {string[] | Array.<{name: string, type: string}>} params\n   *                                Array with function parameter names, or an\n   *                                array with objects containing the name\n   *                                and type of the parameter\n   * @param {Node} expr             The function expression\n   */\n\n  function FunctionAssignmentNode(name, params, expr) {\n    if (!(this instanceof FunctionAssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n    if (!type.isNode(expr)) throw new TypeError('Node expected for parameter \"expr\"');\n    if (name in keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n    this.name = name;\n    this.params = params.map(function (param) {\n      return param && param.name || param;\n    });\n    this.types = params.map(function (param) {\n      return param && param.type || 'any';\n    });\n    this.expr = expr;\n  }\n\n  FunctionAssignmentNode.prototype = new Node();\n  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';\n  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionAssignmentNode.prototype._compile = function (math, argNames) {\n    var childArgNames = Object.create(argNames);\n    forEach(this.params, function (param) {\n      childArgNames[param] = true;\n    }); // compile the function expression with the child args\n\n    var evalExpr = this.expr._compile(math, childArgNames);\n\n    var name = this.name;\n    var params = this.params;\n    var signature = join(this.types, ',');\n    var syntax = name + '(' + join(this.params, ', ') + ')';\n    return function evalFunctionAssignmentNode(scope, args, context) {\n      var signatures = {};\n\n      signatures[signature] = function () {\n        var childArgs = Object.create(args);\n\n        for (var i = 0; i < params.length; i++) {\n          childArgs[params[i]] = arguments[i];\n        }\n\n        return evalExpr(scope, childArgs, context);\n      };\n\n      var fn = typed(name, signatures);\n      fn.syntax = syntax;\n      setSafeProperty(scope, name, fn);\n      return fn;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionAssignmentNode.prototype.forEach = function (callback) {\n    callback(this.expr, 'expr', this);\n  };\n  /**\n   * Create a new FunctionAssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionAssignmentNode.prototype.map = function (callback) {\n    var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionAssignmentNode}\n   */\n\n\n  FunctionAssignmentNode.prototype.clone = function () {\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n  };\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toString(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '(' + expr + ')';\n    }\n\n    return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionAssignmentNode.prototype.toJSON = function () {\n    var types = this.types;\n    return {\n      mathjs: 'FunctionAssignmentNode',\n      name: this.name,\n      params: this.params.map(function (param, index) {\n        return {\n          name: param,\n          type: types[index]\n        };\n      }),\n      expr: this.expr\n    };\n  };\n  /**\n   * Instantiate an FunctionAssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionAssignmentNode\", name: ..., params: ..., expr: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionAssignmentNode}\n   */\n\n\n  FunctionAssignmentNode.fromJSON = function (json) {\n    return new FunctionAssignmentNode(json.name, json.params, json.expr);\n  };\n  /**\n   * get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var params = [];\n\n    for (var i = 0; i < this.params.length; i++) {\n      params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n    }\n\n    var expr = this.expr.toHTML(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span><span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n  };\n  /**\n   * get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toTex(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n    }\n\n    return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(latex.toSymbol).join(',') + '\\\\right):=' + expr;\n  };\n\n  return FunctionAssignmentNode;\n}\n\nexports.name = 'FunctionAssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n/**\n * Test whether a value is a BigNumber\n * @param {*} x\n * @return {boolean}\n */\n\nmodule.exports = function isBigNumber(x) {\n  return x && x.constructor.prototype.isBigNumber || false;\n};","'use strict';\n/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\n\nmodule.exports = function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  } // use \"==\" operator, handles infinities\n\n\n  if (x.eq(y)) {\n    return true;\n  } // NaN\n\n\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n};","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory(type, config, load, typed) {\n  var divideScalar = load(require('./divideScalar'));\n  var multiply = load(require('./multiply'));\n  var inv = load(require('../matrix/inv'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  var divide = typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n  divide.toTex = {\n    2: \"\\\\frac{${args[0]}}{${args[1]}}\"\n  };\n  return divide;\n}\n\nexports.name = 'divide';\nexports.factory = factory;","'use strict';\n\nvar arraySize = require('../array').size;\n\nvar isMatrix = require('../collection/isMatrix');\n\nvar IndexError = require('../../error/IndexError');\n/**\n * Reduce a given matrix or array to a new matrix or\n * array with one less dimension, applying the given\n * callback in the selected dimension.\n * @param {Array | Matrix} mat\n * @param {number} dim\n * @param {Function} callback\n * @return {Array | Matrix} res\n */\n\n\nmodule.exports = function (mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n\n  if (dim < 0 || dim >= size.length) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n\n  if (isMatrix(mat)) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback));\n  } else {\n    return _reduce(mat, dim, callback);\n  }\n};\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\n\n\nfunction _reduce(mat, dim, callback) {\n  var i, ret, val, tran;\n\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      val = mat[0];\n\n      for (i = 1; i < mat.length; i++) {\n        val = callback(val, mat[i]);\n      }\n\n      return val;\n    } else {\n      tran = _switch(mat);\n      ret = [];\n\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _reduce(tran[i], dim - 1, callback);\n      }\n\n      return ret;\n    }\n  } else {\n    ret = [];\n\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _reduce(mat[i], dim - 1, callback);\n    }\n\n    return ret;\n  }\n}\n/**\n * Transpose a matrix\n * @param {Array} mat\n * @returns {Array} ret\n * @private\n */\n\n\nfunction _switch(mat) {\n  var I = mat.length;\n  var J = mat[0].length;\n  var i, j;\n  var ret = [];\n\n  for (j = 0; j < J; j++) {\n    var tmp = [];\n\n    for (i = 0; i < I; i++) {\n      tmp.push(mat[i][j]);\n    }\n\n    ret.push(tmp);\n  }\n\n  return ret;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.size = size;\nexports.validate = validate;\nexports.validateIndex = validateIndex;\nexports.resize = resize;\nexports.reshape = reshape;\nexports.squeeze = squeeze;\nexports.unsqueeze = unsqueeze;\nexports.flatten = flatten;\nexports.map = map;\nexports.forEach = forEach;\nexports.filter = filter;\nexports.filterRegExp = filterRegExp;\nexports.join = join;\nexports.identify = identify;\nexports.generalize = generalize;\n\nvar _number = _interopRequireDefault(require(\"./number\"));\n\nvar _string = _interopRequireDefault(require(\"./string\"));\n\nvar _DimensionError = _interopRequireDefault(require(\"../error/DimensionError\"));\n\nvar _IndexError = _interopRequireDefault(require(\"../error/IndexError\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calculate the size of a multi dimensional array.\n * This function checks the size of the first entry, it does not validate\n * whether all dimensions match. (use function `validate` for that)\n * @param {Array} x\n * @Return {Number[]} size\n */\nfunction size(x) {\n  var s = [];\n\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n\n  return s;\n}\n/**\n * Recursively validate whether each element in a multi dimensional array\n * has a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @param {number} dim   Current dimension\n * @throws DimensionError\n * @private\n */\n\n\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n\n  if (len !== size[dim]) {\n    throw new _DimensionError.default(len, size[dim]);\n  }\n\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n\n      if (!Array.isArray(child)) {\n        throw new _DimensionError.default(size.length - 1, size.length, '<');\n      }\n\n      _validate(array[i], size, dimNext);\n    }\n  } else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new _DimensionError.default(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n/**\n * Validate whether each element in a multi dimensional array has\n * a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @throws DimensionError\n */\n\n\nfunction validate(array, size) {\n  var isScalar = size.length === 0;\n\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new _DimensionError.default(array.length, 0);\n    }\n  } else {\n    // array\n    _validate(array, size, 0);\n  }\n}\n/**\n * Test whether index is an integer number with index >= 0 and index < length\n * when length is provided\n * @param {number} index    Zero-based index\n * @param {number} [length] Length of the array\n */\n\n\nfunction validateIndex(index, length) {\n  if (!_number.default.isNumber(index) || !_number.default.isInteger(index)) {\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\n  }\n\n  if (index < 0 || typeof length === 'number' && index >= length) {\n    throw new _IndexError.default(index, length);\n  }\n}\n/**\n * Resize a multi dimensional array. The resized array is returned.\n * @param {Array} array         Array to be resized\n * @param {Array.<number>} size Array with the size of each dimension\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n *                              zero by default. Specify for example `null`,\n *                              to clearly see entries that are not explicitly\n *                              set.\n * @return {Array} array         The resized array\n */\n\n\nfunction resize(array, size, defaultValue) {\n  // TODO: add support for scalars, having size=[] ?\n  // check the type of the arguments\n  if (!Array.isArray(array) || !Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  } // check whether size contains positive integers\n\n\n  size.forEach(function (value) {\n    if (!_number.default.isNumber(value) || !_number.default.isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + _string.default.format(size) + ')');\n    }\n  }); // recursively resize the array\n\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\n\n  _resize(array, size, 0, _defaultValue);\n\n  return array;\n}\n/**\n * Recursively resize a multi dimensional array\n * @param {Array} array         Array to be resized\n * @param {number[]} size       Array with the size of each dimension\n * @param {number} dim          Current dimension\n * @param {*} [defaultValue]    Value to be filled in in new entries,\n *                              undefined by default.\n * @private\n */\n\n\nfunction _resize(array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen); // apply new length\n\n  array.length = newLen;\n\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1; // resize existing child arrays\n\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n\n        array[i] = elem;\n      }\n\n      _resize(elem, size, dimNext, defaultValue);\n    } // create new child arrays\n\n\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem; // resize new child array\n\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  } else {\n    // last dimension\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    } // fill new elements with the default value\n\n\n    for (i = minLen; i < newLen; i++) {\n      array[i] = defaultValue;\n    }\n  }\n}\n/**\n * Re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\n\n\nfunction reshape(array, sizes) {\n  var flatArray = flatten(array);\n  var newArray;\n\n  function product(arr) {\n    return arr.reduce(function (prev, curr) {\n      return prev * curr;\n    });\n  }\n\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (sizes.length === 0) {\n    throw new _DimensionError.default(0, product(size(array)), '!=');\n  }\n\n  var totalSize = 1;\n\n  for (var sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {\n    totalSize *= sizes[sizeIndex];\n  }\n\n  if (flatArray.length !== totalSize) {\n    throw new _DimensionError.default(product(sizes), product(size(array)), '!=');\n  }\n\n  try {\n    newArray = _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof _DimensionError.default) {\n      throw new _DimensionError.default(product(sizes), product(size(array)), '!=');\n    }\n\n    throw e;\n  }\n\n  return newArray;\n}\n/**\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n */\n\n\nfunction _reshape(array, sizes) {\n  // testing if there are enough elements for the requested shape\n  var tmpArray = array;\n  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one\n\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\n    var size = sizes[sizeIndex];\n    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size\n\n    var length = tmpArray.length / size;\n\n    for (var i = 0; i < length; i++) {\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\n    } // set it as the new tmpArray for the next loop turn or for return\n\n\n    tmpArray = tmpArray2;\n  }\n\n  return tmpArray;\n}\n/**\n * Squeeze a multi dimensional array\n * @param {Array} array\n * @param {Array} [arraySize]\n * @returns {Array} returns the array itself\n */\n\n\nfunction squeeze(array, arraySize) {\n  var s = arraySize || size(array); // squeeze outer dimensions\n\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  } // find the first dimension to be squeezed\n\n\n  var dims = s.length;\n\n  while (s[dims - 1] === 1) {\n    dims--;\n  } // squeeze inner dimensions\n\n\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n\n  return array;\n}\n/**\n * Recursively squeeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\n\nfunction _squeeze(array, dims, dim) {\n  var i, ii;\n\n  if (dim < dims) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  } else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n\n  return array;\n}\n/**\n * Unsqueeze a multi dimensional array: add dimensions when missing\n *\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n *\n * @param {Array} array\n * @param {number} dims       Desired number of dimensions of the array\n * @param {number} [outer]    Number of outer dimensions to be added\n * @param {Array} [arraySize] Current size of array.\n * @returns {Array} returns the array itself\n * @private\n */\n\n\nfunction unsqueeze(array, dims, outer, arraySize) {\n  var s = arraySize || size(array); // unsqueeze outer dimensions\n\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  } // unsqueeze inner dimensions\n\n\n  array = _unsqueeze(array, dims, 0);\n\n  while (s.length < dims) {\n    s.push(1);\n  }\n\n  return array;\n}\n/**\n * Recursively unsqueeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\n\nfunction _unsqueeze(array, dims, dim) {\n  var i, ii;\n\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  } else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n\n  return array;\n}\n/**\n * Flatten a multi dimensional array, put all elements in a one dimensional\n * array\n * @param {Array} array   A multi dimensional array\n * @return {Array}        The flattened array (1 dimensional)\n */\n\n\nfunction flatten(array) {\n  if (!Array.isArray(array)) {\n    // if not an array, return as is\n    return array;\n  }\n\n  var flat = [];\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback); // traverse through sub-arrays recursively\n    } else {\n      flat.push(value);\n    }\n  });\n  return flat;\n}\n/**\n * A safe map\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction map(array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n/**\n * A safe forEach\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction forEach(array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n/**\n * A safe filter\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction filter(array, callback) {\n  if (size(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, callback);\n}\n/**\n * Filter values in a callback given a regular expression\n * @param {Array} array\n * @param {RegExp} regexp\n * @return {Array} Returns the filtered array\n * @private\n */\n\n\nfunction filterRegExp(array, regexp) {\n  if (size(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, function (entry) {\n    return regexp.test(entry);\n  });\n}\n/**\n * A safe join\n * @param {Array} array\n * @param {string} separator\n */\n\n\nfunction join(array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n/**\n * Assign a numeric identifier to every element of a sorted array\n * @param {Array} a  An array\n * @return {Array} An array of objects containing the original value and its identifier\n */\n\n\nfunction identify(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n  var count = 0;\n  b[0] = {\n    value: a[0],\n    identifier: 0\n  };\n\n  for (var i = 1; i < a.length; i++) {\n    if (a[i] === a[i - 1]) {\n      count++;\n    } else {\n      count = 0;\n    }\n\n    b.push({\n      value: a[i],\n      identifier: count\n    });\n  }\n\n  return b;\n}\n/**\n * Remove the numeric identifier from the elements\n * @param {array} a  An array\n * @return {array} An array of values without identifiers\n */\n\n\nfunction generalize(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n\n  for (var i = 0; i < a.length; i++) {\n    b.push(a[i].value);\n  }\n\n  return b;\n}","'use strict';\n\nvar operators = require('../operators');\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor RangeNode\n   * @extends {Node}\n   * create a range\n   * @param {Node} start  included lower-bound\n   * @param {Node} end    included upper-bound\n   * @param {Node} [step] optional step\n   */\n\n  function RangeNode(start, end, step) {\n    if (!(this instanceof RangeNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate inputs\n\n\n    if (!type.isNode(start)) throw new TypeError('Node expected');\n    if (!type.isNode(end)) throw new TypeError('Node expected');\n    if (step && !type.isNode(step)) throw new TypeError('Node expected');\n    if (arguments.length > 3) throw new Error('Too many arguments');\n    this.start = start; // included lower-bound\n\n    this.end = end; // included upper-bound\n\n    this.step = step || null; // optional step\n  }\n\n  RangeNode.prototype = new Node();\n  RangeNode.prototype.type = 'RangeNode';\n  RangeNode.prototype.isRangeNode = true;\n  /**\n   * Check whether the RangeNode needs the `end` symbol to be defined.\n   * This end is the size of the Matrix in current dimension.\n   * @return {boolean}\n   */\n\n  RangeNode.prototype.needsEnd = function () {\n    // find all `end` symbols in this RangeNode\n    var endSymbols = this.filter(function (node) {\n      return type.isSymbolNode(node) && node.name === 'end';\n    });\n    return endSymbols.length > 0;\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  RangeNode.prototype._compile = function (math, argNames) {\n    var range = math.range;\n\n    var evalStart = this.start._compile(math, argNames);\n\n    var evalEnd = this.end._compile(math, argNames);\n\n    if (this.step) {\n      var evalStep = this.step._compile(math, argNames);\n\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));\n      };\n    } else {\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  RangeNode.prototype.forEach = function (callback) {\n    callback(this.start, 'start', this);\n    callback(this.end, 'end', this);\n\n    if (this.step) {\n      callback(this.step, 'step', this);\n    }\n  };\n  /**\n   * Create a new RangeNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RangeNode} Returns a transformed copy of the node\n   */\n\n\n  RangeNode.prototype.map = function (callback) {\n    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RangeNode}\n   */\n\n\n  RangeNode.prototype.clone = function () {\n    return new RangeNode(this.start, this.end, this.step && this.step);\n  };\n  /**\n   * Calculate the necessary parentheses\n   * @param {Node} node\n   * @param {string} parenthesis\n   * @return {Object} parentheses\n   * @private\n   */\n\n\n  function calculateNecessaryParentheses(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var parens = {};\n    var startPrecedence = operators.getPrecedence(node.start, parenthesis);\n    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';\n\n    if (node.step) {\n      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);\n      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';\n    }\n\n    var endPrecedence = operators.getPrecedence(node.end, parenthesis);\n    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';\n    return parens;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toString(options);\n\n    if (parens.start) {\n      start = '(' + start + ')';\n    }\n\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toString(options);\n\n      if (parens.step) {\n        step = '(' + step + ')';\n      }\n\n      str += ':' + step;\n    }\n\n    var end = this.end.toString(options);\n\n    if (parens.end) {\n      end = '(' + end + ')';\n    }\n\n    str += ':' + end;\n    return str;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  RangeNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'RangeNode',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n  /**\n   * Instantiate an RangeNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"RangeNode\", \"start\": ..., \"end\": ..., \"step\": ...}`,\n   *                       where mathjs is optional\n   * @returns {RangeNode}\n   */\n\n\n  RangeNode.fromJSON = function (json) {\n    return new RangeNode(json.start, json.end, json.step);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toHTML(options);\n\n    if (parens.start) {\n      start = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + start + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toHTML(options);\n\n      if (parens.step) {\n        step = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + step + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      str += '<span class=\"math-operator math-range-operator\">:</span>' + step;\n    }\n\n    var end = this.end.toHTML(options);\n\n    if (parens.end) {\n      end = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + end + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    str += '<span class=\"math-operator math-range-operator\">:</span>' + end;\n    return str;\n  };\n  /**\n   * Get LaTeX representation\n   * @params {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n    var str = this.start.toTex(options);\n\n    if (parens.start) {\n      str = \"\\\\left(\".concat(str, \"\\\\right)\");\n    }\n\n    if (this.step) {\n      var step = this.step.toTex(options);\n\n      if (parens.step) {\n        step = \"\\\\left(\".concat(step, \"\\\\right)\");\n      }\n\n      str += ':' + step;\n    }\n\n    var end = this.end.toTex(options);\n\n    if (parens.end) {\n      end = \"\\\\left(\".concat(end, \"\\\\right)\");\n    }\n\n    str += ':' + end;\n    return str;\n  };\n\n  return RangeNode;\n}\n\nexports.name = 'RangeNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Determine the type of a variable.\n   *\n   * Function `typeof` recognizes the following types of objects:\n   *\n   * Object                 | Returns       | Example\n   * ---------------------- | ------------- | ------------------------------------------\n   * null                   | `'null'`      | `math.typeof(null)`\n   * number                 | `'number'`    | `math.typeof(3.5)`\n   * boolean                | `'boolean'`   | `math.typeof(true)`\n   * string                 | `'string'`    | `math.typeof('hello world')`\n   * Array                  | `'Array'`     | `math.typeof([1, 2, 3])`\n   * Date                   | `'Date'`      | `math.typeof(new Date())`\n   * Function               | `'Function'`  | `math.typeof(function () {})`\n   * Object                 | `'Object'`    | `math.typeof({a: 2, b: 3})`\n   * RegExp                 | `'RegExp'`    | `math.typeof(/a regexp/)`\n   * undefined              | `'undefined'` | `math.typeof(undefined)`\n   * math.type.BigNumber    | `'BigNumber'` | `math.typeof(math.bignumber('2.3e500'))`\n   * math.type.Chain        | `'Chain'`     | `math.typeof(math.chain(2))`\n   * math.type.Complex      | `'Complex'`   | `math.typeof(math.complex(2, 3))`\n   * math.type.Fraction     | `'Fraction'`  | `math.typeof(math.fraction(1, 3))`\n   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`\n   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`\n   * math.type.Index        | `'Index'`     | `math.typeof(math.index(1, 3))`\n   * math.type.Matrix       | `'Matrix'`    | `math.typeof(math.matrix([[1,2], [3, 4]]))`\n   * math.type.Range        | `'Range'`     | `math.typeof(math.range(0, 10))`\n   * math.type.ResultSet    | `'ResultSet'` | `math.typeof(math.eval('a=2\\nb=3'))`\n   * math.type.Unit         | `'Unit'`      | `math.typeof(math.unit('45 deg'))`\n   * math.expression.node&#8203;.AccessorNode            | `'AccessorNode'`            | `math.typeof(math.parse('A[2]'))`\n   * math.expression.node&#8203;.ArrayNode               | `'ArrayNode'`               | `math.typeof(math.parse('[1,2,3]'))`\n   * math.expression.node&#8203;.AssignmentNode          | `'AssignmentNode'`          | `math.typeof(math.parse('x=2'))`\n   * math.expression.node&#8203;.BlockNode               | `'BlockNode'`               | `math.typeof(math.parse('a=2; b=3'))`\n   * math.expression.node&#8203;.ConditionalNode         | `'ConditionalNode'`         | `math.typeof(math.parse('x<0 ? -x : x'))`\n   * math.expression.node&#8203;.ConstantNode            | `'ConstantNode'`            | `math.typeof(math.parse('2.3'))`\n   * math.expression.node&#8203;.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeof(math.parse('f(x)=x^2'))`\n   * math.expression.node&#8203;.FunctionNode            | `'FunctionNode'`            | `math.typeof(math.parse('sqrt(4)'))`\n   * math.expression.node&#8203;.IndexNode               | `'IndexNode'`               | `math.typeof(math.parse('A[2]').index)`\n   * math.expression.node&#8203;.ObjectNode              | `'ObjectNode'`              | `math.typeof(math.parse('{a:2}'))`\n   * math.expression.node&#8203;.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeof(math.parse('(2+3)'))`\n   * math.expression.node&#8203;.RangeNode               | `'RangeNode'`               | `math.typeof(math.parse('1:10'))`\n   * math.expression.node&#8203;.SymbolNode              | `'SymbolNode'`              | `math.typeof(math.parse('x'))`\n   *\n   * Syntax:\n   *\n   *    math.typeof(x)\n   *\n   * Examples:\n   *\n   *    math.typeof(3.5)                     // returns 'number'\n   *    math.typeof(math.complex('2-4i'))    // returns 'Complex'\n   *    math.typeof(math.unit('45 deg'))     // returns 'Unit'\n   *    math.typeof('hello world')           // returns 'string'\n   *\n   * @param {*} x     The variable for which to test the type.\n   * @return {string} Returns the name of the type. Primitive types are lower case,\n   *                  non-primitive types are upper-camel-case.\n   *                  For example 'number', 'string', 'Array', 'Date'.\n   */\n  var _typeof = typed('_typeof', {\n    'any': function any(x) {\n      var t = _typeof2(x);\n\n      if (t === 'object') {\n        // JavaScript types\n        if (x === null) return 'null';\n        if (Array.isArray(x)) return 'Array';\n        if (x instanceof Date) return 'Date';\n        if (x instanceof RegExp) return 'RegExp'; // math.js types\n\n        if (type.isBigNumber(x)) return 'BigNumber';\n        if (type.isComplex(x)) return 'Complex';\n        if (type.isFraction(x)) return 'Fraction';\n        if (type.isMatrix(x)) return 'Matrix';\n        if (type.isUnit(x)) return 'Unit';\n        if (type.isIndex(x)) return 'Index';\n        if (type.isRange(x)) return 'Range';\n        if (type.isResultSet(x)) return 'ResultSet';\n        if (type.isNode(x)) return x.type;\n        if (type.isChain(x)) return 'Chain';\n        if (type.isHelp(x)) return 'Help';\n        return 'Object';\n      }\n\n      if (t === 'function') return 'Function';\n      return t; // can be 'string', 'number', 'boolean', ...\n    }\n  });\n\n  _typeof.toTex = undefined; // use default template\n\n  return _typeof;\n}\n\nexports.name = 'typeof';\nexports.factory = factory;","'use strict';\n\nvar latex = require('../../utils/latex');\n\nvar map = require('../../utils/array').map;\n\nvar escape = require('../../utils/string').escape;\n\nvar isSafeMethod = require('../../utils/customs').isSafeMethod;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nvar operators = require('../operators');\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor OperatorNode\n   * @extends {Node}\n   * An operator with two arguments, like 2+3\n   *\n   * @param {string} op           Operator name, for example '+'\n   * @param {string} fn           Function name, for example 'add'\n   * @param {Node[]} args         Operator arguments\n   * @param {boolean} [implicit]  Is this an implicit multiplication?\n   */\n\n  function OperatorNode(op, fn, args, implicit) {\n    if (!(this instanceof OperatorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof op !== 'string') {\n      throw new TypeError('string expected for parameter \"op\"');\n    }\n\n    if (typeof fn !== 'string') {\n      throw new TypeError('string expected for parameter \"fn\"');\n    }\n\n    if (!Array.isArray(args) || !args.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.implicit = implicit === true;\n    this.op = op;\n    this.fn = fn;\n    this.args = args || [];\n  }\n\n  OperatorNode.prototype = new Node();\n  OperatorNode.prototype.type = 'OperatorNode';\n  OperatorNode.prototype.isOperatorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  OperatorNode.prototype._compile = function (math, argNames) {\n    // validate fn\n    if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {\n      if (!math[this.fn]) {\n        throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n      } else {\n        throw new Error('No access to function \"' + this.fn + '\"');\n      }\n    }\n\n    var fn = getSafeProperty(math, this.fn);\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (evalArgs.length === 1) {\n      var evalArg0 = evalArgs[0];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(evalArg0(scope, args, context));\n      };\n    } else if (evalArgs.length === 2) {\n      var _evalArg = evalArgs[0];\n      var evalArg1 = evalArgs[1];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n      };\n    } else {\n      return function evalOperatorNode(scope, args, context) {\n        return fn.apply(null, map(evalArgs, function (evalArg) {\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  OperatorNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new OperatorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  OperatorNode.prototype.map = function (callback) {\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new OperatorNode(this.op, this.fn, args, this.implicit);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {OperatorNode}\n   */\n\n\n  OperatorNode.prototype.clone = function () {\n    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);\n  };\n  /**\n   * Check whether this is an unary OperatorNode:\n   * has exactly one argument, like `-a`.\n   * @return {boolean} Returns true when an unary operator node, false otherwise.\n   */\n\n\n  OperatorNode.prototype.isUnary = function () {\n    return this.args.length === 1;\n  };\n  /**\n   * Check whether this is a binary OperatorNode:\n   * has exactly two arguments, like `a + b`.\n   * @return {boolean} Returns true when a binary operator node, false otherwise.\n   */\n\n\n  OperatorNode.prototype.isBinary = function () {\n    return this.args.length === 2;\n  };\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n\n\n  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {\n    // precedence of the root OperatorNode\n    var precedence = operators.getPrecedence(root, parenthesis);\n    var associativity = operators.getAssociativity(root, parenthesis);\n\n    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {\n      var parens = args.map(function (arg) {\n        switch (arg.getContent().type) {\n          // Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n\n          default:\n            return true;\n        }\n      });\n      return parens;\n    }\n\n    var result;\n\n    switch (args.length) {\n      case 0:\n        result = [];\n        break;\n\n      case 1:\n        // unary operators\n        // precedence of the operand\n        var operandPrecedence = operators.getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n        if (latex && operandPrecedence !== null) {\n          var operandIdentifier;\n          var rootIdentifier;\n\n          if (parenthesis === 'keep') {\n            operandIdentifier = args[0].getIdentifier();\n            rootIdentifier = root.getIdentifier();\n          } else {\n            // Ignore Parenthesis Nodes when not in 'keep' mode\n            operandIdentifier = args[0].getContent().getIdentifier();\n            rootIdentifier = root.getContent().getIdentifier();\n          }\n\n          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {\n            result = [false];\n            break;\n          }\n\n          if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {\n            result = [false];\n            break;\n          }\n        }\n\n        if (operandPrecedence === null) {\n          // if the operand has no defined precedence, no parens are needed\n          result = [false];\n          break;\n        }\n\n        if (operandPrecedence <= precedence) {\n          // if the operands precedence is lower, parens are needed\n          result = [true];\n          break;\n        } // otherwise, no parens needed\n\n\n        result = [false];\n        break;\n\n      case 2:\n        // binary operators\n        var lhsParens; // left hand side needs parenthesis?\n        // precedence of the left hand side\n\n        var lhsPrecedence = operators.getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side\n\n        var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);\n\n        if (lhsPrecedence === null) {\n          // if the left hand side has no defined precedence, no parens are needed\n          // FunctionNode for example\n          lhsParens = false;\n        } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {\n          // In case of equal precedence, if the root node is left associative\n          // parens are **never** necessary for the left hand side.\n          // If it is right associative however, parens are necessary\n          // if the root node isn't associative with the left hand side\n          lhsParens = true;\n        } else if (lhsPrecedence < precedence) {\n          lhsParens = true;\n        } else {\n          lhsParens = false;\n        }\n\n        var rhsParens; // right hand side needs parenthesis?\n        // precedence of the right hand side\n\n        var rhsPrecedence = operators.getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?\n\n        var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);\n\n        if (rhsPrecedence === null) {\n          // if the right hand side has no defined precedence, no parens are needed\n          // FunctionNode for example\n          rhsParens = false;\n        } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {\n          // In case of equal precedence, if the root node is right associative\n          // parens are **never** necessary for the right hand side.\n          // If it is left associative however, parens are necessary\n          // if the root node isn't associative with the right hand side\n          rhsParens = true;\n        } else if (rhsPrecedence < precedence) {\n          rhsParens = true;\n        } else {\n          rhsParens = false;\n        } // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n\n        if (latex) {\n          var _rootIdentifier;\n\n          var lhsIdentifier;\n          var rhsIdentifier;\n\n          if (parenthesis === 'keep') {\n            _rootIdentifier = root.getIdentifier();\n            lhsIdentifier = root.args[0].getIdentifier();\n            rhsIdentifier = root.args[1].getIdentifier();\n          } else {\n            // Ignore ParenthesisNodes when not in 'keep' mode\n            _rootIdentifier = root.getContent().getIdentifier();\n            lhsIdentifier = root.args[0].getContent().getIdentifier();\n            rhsIdentifier = root.args[1].getContent().getIdentifier();\n          }\n\n          if (lhsPrecedence !== null) {\n            if (operators.properties[precedence][_rootIdentifier].latexLeftParens === false) {\n              lhsParens = false;\n            }\n\n            if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n              lhsParens = false;\n            }\n          }\n\n          if (rhsPrecedence !== null) {\n            if (operators.properties[precedence][_rootIdentifier].latexRightParens === false) {\n              rhsParens = false;\n            }\n\n            if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n              rhsParens = false;\n            }\n          }\n        }\n\n        result = [lhsParens, rhsParens];\n        break;\n\n      default:\n        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {\n          result = args.map(function (arg) {\n            var argPrecedence = operators.getPrecedence(arg, parenthesis);\n            var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);\n            var argAssociativity = operators.getAssociativity(arg, parenthesis);\n\n            if (argPrecedence === null) {\n              // if the argument has no defined precedence, no parens are needed\n              return false;\n            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {\n              return true;\n            } else if (argPrecedence < precedence) {\n              return true;\n            }\n\n            return false;\n          });\n        }\n\n        break;\n    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode\n    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be\n    // printed.\n\n\n    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {\n      result = args.map(function (arg, index) {\n        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';\n\n        if (result[index] || isParenthesisNode) {\n          // put in parenthesis?\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    return result;\n  }\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n      var operand = args[0].toString(options);\n\n      if (parens[0]) {\n        operand = '(' + operand + ')';\n      }\n\n      if (assoc === 'right') {\n        // prefix operator\n        return this.op + operand;\n      } else if (assoc === 'left') {\n        // postfix\n        return operand + this.op;\n      } // fall back to postfix\n\n\n      return operand + this.op;\n    } else if (args.length === 2) {\n      var lhs = args[0].toString(options); // left hand side\n\n      var rhs = args[1].toString(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '(' + lhs + ')';\n      }\n\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '(' + rhs + ')';\n      }\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + ' ' + rhs;\n      }\n\n      return lhs + ' ' + this.op + ' ' + rhs;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toString(options);\n\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '(' + arg + ')';\n        }\n\n        return arg;\n      });\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return stringifiedArgs.join(' ');\n      }\n\n      return stringifiedArgs.join(' ' + this.op + ' ');\n    } else {\n      // fallback to formatting as a function call\n      return this.fn + '(' + this.args.join(', ') + ')';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  OperatorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'OperatorNode',\n      op: this.op,\n      fn: this.fn,\n      args: this.args,\n      implicit: this.implicit\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"OperatorNode\", \"op\": \"+\", \"fn\": \"add\", \"args\": [...], \"implicit\": false}`,\n   *                       where mathjs is optional\n   * @returns {OperatorNode}\n   */\n\n\n  OperatorNode.fromJSON = function (json) {\n    return new OperatorNode(json.op, json.fn, json.args, json.implicit);\n  };\n  /**\n   * Get HTML representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n      var operand = args[0].toHTML(options);\n\n      if (parens[0]) {\n        operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (assoc === 'right') {\n        // prefix operator\n        return '<span class=\"math-operator math-unary-operator math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      } else if (assoc === 'left') {\n        // postfix\n        return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      } // fall back to postfix\n\n\n      return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n    } else if (args.length === 2) {\n      // binary operatoes\n      var lhs = args[0].toHTML(options); // left hand side\n\n      var rhs = args[1].toHTML(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + '<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>' + rhs;\n      }\n\n      return lhs + '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n    } else {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toHTML(options);\n\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n\n        return arg;\n      });\n\n      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>');\n        }\n\n        return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n      } else {\n        // fallback to formatting as a function call\n        return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n    }\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);\n    var op = latex.operators[this.fn];\n    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n      var operand = args[0].toTex(options);\n\n      if (parens[0]) {\n        operand = \"\\\\left(\".concat(operand, \"\\\\right)\");\n      }\n\n      if (assoc === 'right') {\n        // prefix operator\n        return op + operand;\n      } else if (assoc === 'left') {\n        // postfix operator\n        return operand + op;\n      } // fall back to postfix\n\n\n      return operand + op;\n    } else if (args.length === 2) {\n      // binary operators\n      var lhs = args[0]; // left hand side\n\n      var lhsTex = lhs.toTex(options);\n\n      if (parens[0]) {\n        lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n      }\n\n      var rhs = args[1]; // right hand side\n\n      var rhsTex = rhs.toTex(options);\n\n      if (parens[1]) {\n        rhsTex = \"\\\\left(\".concat(rhsTex, \"\\\\right)\");\n      } // handle some exceptions (due to the way LaTeX works)\n\n\n      var lhsIdentifier;\n\n      if (parenthesis === 'keep') {\n        lhsIdentifier = lhs.getIdentifier();\n      } else {\n        // Ignore ParenthesisNodes if in 'keep' mode\n        lhsIdentifier = lhs.getContent().getIdentifier();\n      }\n\n      switch (this.getIdentifier()) {\n        case 'OperatorNode:divide':\n          // op contains '\\\\frac' at this point\n          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n\n        case 'OperatorNode:pow':\n          lhsTex = '{' + lhsTex + '}';\n          rhsTex = '{' + rhsTex + '}';\n\n          switch (lhsIdentifier) {\n            case 'ConditionalNode': //\n\n            case 'OperatorNode:divide':\n              lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n          }\n\n          break;\n\n        case 'OperatorNode:multiply':\n          if (this.implicit && implicit === 'hide') {\n            return lhsTex + '~' + rhsTex;\n          }\n\n      }\n\n      return lhsTex + op + rhsTex;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var texifiedArgs = args.map(function (arg, index) {\n        arg = arg.toTex(options);\n\n        if (parens[index]) {\n          arg = \"\\\\left(\".concat(arg, \"\\\\right)\");\n        }\n\n        return arg;\n      });\n\n      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {\n        return texifiedArgs.join('~');\n      }\n\n      return texifiedArgs.join(op);\n    } else {\n      // fall back to formatting as a function call\n      // as this is a fallback, it doesn't use\n      // fancy function names\n      return '\\\\mathrm{' + this.fn + '}\\\\left(' + args.map(function (arg) {\n        return arg.toTex(options);\n      }).join(',') + '\\\\right)';\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  OperatorNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.fn;\n  };\n\n  return OperatorNode;\n}\n\nexports.name = 'OperatorNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var assign = load(require('./utils/assign'));\n  var access = load(require('./utils/access'));\n\n  var operators = require('../operators');\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!type.isSymbolNode(object) && !type.isAccessorNode(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if (type.isSymbolNode(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !type.isIndexNode(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!type.isNode(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!type.isSymbolNode(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        return setSafeProperty(scope, name, evalValue(scope, args, context));\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        return setSafeProperty(object, prop, value);\n      };\n    } else if (type.isSymbolNode(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        setSafeProperty(scope, name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // type.isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = getSafeProperty(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          setSafeProperty(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}\n\nexports.name = 'AssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm10 = function algorithm10(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  return algorithm10;\n}\n\nexports.name = 'algorithm10';\nexports.factory = factory;","'use strict';\n\nvar map = require('../../utils/array').map;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor ArrayNode\n   * @extends {Node}\n   * Holds an 1-dimensional array with items\n   * @param {Node[]} [items]   1 dimensional array with items\n   */\n\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.items = items || []; // validate input\n\n    if (!Array.isArray(this.items) || !this.items.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected');\n    } // TODO: deprecated since v3, remove some day\n\n\n    var deprecated = function deprecated() {\n      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');\n    };\n\n    Object.defineProperty(this, 'nodes', {\n      get: deprecated,\n      set: deprecated\n    });\n  }\n\n  ArrayNode.prototype = new Node();\n  ArrayNode.prototype.type = 'ArrayNode';\n  ArrayNode.prototype.isArrayNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ArrayNode.prototype._compile = function (math, argNames) {\n    var evalItems = map(this.items, function (item) {\n      return item._compile(math, argNames);\n    });\n    var asMatrix = math.config().matrix !== 'Array';\n\n    if (asMatrix) {\n      var matrix = math.matrix;\n      return function evalArrayNode(scope, args, context) {\n        return matrix(map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        }));\n      };\n    } else {\n      return function evalArrayNode(scope, args, context) {\n        return map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        });\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new ArrayNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ArrayNode} Returns a transformed copy of the node\n   */\n\n\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n\n    return new ArrayNode(items);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ArrayNode}\n   */\n\n\n  ArrayNode.prototype.clone = function () {\n    return new ArrayNode(this.items.slice(0));\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype._toString = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ArrayNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ArrayNode',\n      items: this.items\n    };\n  };\n  /**\n   * Instantiate an ArrayNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n   *                       where mathjs is optional\n   * @returns {ArrayNode}\n   */\n\n\n  ArrayNode.fromJSON = function (json) {\n    return new ArrayNode(json.items);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype.toHTML = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ArrayNode.prototype._toTex = function (options) {\n    var s = '\\\\begin{bmatrix}';\n    this.items.forEach(function (node) {\n      if (node.items) {\n        s += node.items.map(function (childNode) {\n          return childNode.toTex(options);\n        }).join('&');\n      } else {\n        s += node.toTex(options);\n      } // new line\n\n\n      s += '\\\\\\\\';\n    });\n    s += '\\\\end{bmatrix}';\n    return s;\n  };\n\n  return ArrayNode;\n}\n\nexports.name = 'ArrayNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  var fraction = typed('fraction', {\n    'number': function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new type.Fraction(x);\n    },\n    'string': function string(x) {\n      return new type.Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new type.Fraction(numerator, denominator);\n    },\n    'null': function _null(x) {\n      return new type.Fraction(0);\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.Fraction(x.toString());\n    },\n    'Fraction': function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    'Object': function Object(x) {\n      return new type.Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, fraction);\n    }\n  });\n  return fraction;\n}\n\nexports.name = 'fraction';\nexports.factory = factory;","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var _typeof = load(require('../../../function/utils/typeof'));\n\n  function getArrayDataType(array) {\n    var _type; // to hold type info\n\n\n    var _length = 0; // to hold length value to ensure it has consistent sizes\n\n    for (var i = 0; i < array.length; i++) {\n      var item = array[i];\n      var isArray = Array.isArray(item); // Saving the target matrix row size\n\n      if (i === 0 && isArray) {\n        _length = item.length;\n      } // If the current item is an array but the length does not equal the targetVectorSize\n\n\n      if (isArray && item.length !== _length) {\n        return undefined;\n      }\n\n      var itemType = isArray ? getArrayDataType(item) // recurse into a nested array\n      : _typeof(item);\n\n      if (_type === undefined) {\n        _type = itemType; // first item\n      } else if (_type !== itemType) {\n        return 'mixed';\n      } else {// we're good, everything has the same type so far\n      }\n    }\n\n    return _type;\n  }\n\n  return getArrayDataType;\n}\n/**\n * Check the datatype of a given object\n * This is a low level implementation that should only be used by\n * parent Matrix classes such as SparseMatrix or DenseMatrix\n * This method does not validate Array Matrix shape\n * @param array\n * @return string\n */\n\n\nexports.factory = factory;","module.exports = require('./lib/core/core')\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n\n  var algorithm13 = function algorithm13(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b arrays\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // c arrays\n\n    var csize = []; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // validate each one of the dimension sizes\n\n\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      } // update dimension in c\n\n\n      csize[s] = asize[s];\n    } // datatype\n\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix\n\n    return new DenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  }; // recursive function\n\n\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n\n    return cv;\n  }\n\n  return algorithm13;\n}\n\nexports.name = 'algorithm13';\nexports.factory = factory;"],"sourceRoot":""}