{"version":3,"sources":["webpack://sheetforge/webpack/universalModuleDefinition","webpack://sheetforge/webpack/bootstrap","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ParenthesisNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm12.js","webpack://sheetforge/./source/utilities/noop.js","webpack://sheetforge/./source/utilities/unique.js","webpack://sheetforge/./source/models/generic/ICategorizable/ICategorizable.js","webpack://sheetforge/./source/utilities/splitObjectPath.js","webpack://sheetforge/./source/utilities/getPathValue.js","webpack://sheetforge/./source/models/generic/IEditable/IEditable.js","webpack://sheetforge/./source/utilities/setPathValue.js","webpack://sheetforge/./source/utilities/hash.js","webpack://sheetforge/./source/models/generic/IIdentity/IIdentity.js","webpack://sheetforge/./source/utilities/findParent.js","webpack://sheetforge/./source/utilities/math/math.js","webpack://sheetforge/./source/utilities/math/toSymbols.js","webpack://sheetforge/./source/models/Attribute/Attribute.js","webpack://sheetforge/./source/utilities/math/calculate.js","webpack://sheetforge/./source/models/Descriptor/Descriptor.js","webpack://sheetforge/./source/models/generic/Collection/Collection.js","webpack://sheetforge/./source/utilities/compareBy.js","webpack://sheetforge/./source/models/Effect/Effect.js","webpack://sheetforge/./source/models/Item/Item.js","webpack://sheetforge/./source/models/Resource/Resource.js","webpack://sheetforge/./source/models/Skill/Skill.js","webpack://sheetforge/./source/models/ResourceCost/ResourceCost.js","webpack://sheetforge/./source/models/Spell/Spell.js","webpack://sheetforge/./source/models/Trait/Trait.js","webpack://sheetforge/./source/models/Character/Character.js","webpack://sheetforge/./source/utilities/flatten.js","webpack://sheetforge/./source/index.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/function.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/number.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm06.js","webpack://sheetforge/./node_modules/mathjs/lib/core/function/config.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/deepMap.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/utils/access.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/polyfills.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ConditionalNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/deepForEach.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/det.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/customs.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm02.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/isMatrix.js","webpack://sheetforge/./node_modules/mathjs/lib/type/number.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/unaryMinus.js","webpack://sheetforge/./node_modules/mathjs/lib/type/numeric.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/zeros.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/IndexNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm14.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/index.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/not.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/keywords.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/pow.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/utils/improveErrorMessage.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/RelationalNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/bignumber/formatter.js","webpack://sheetforge/./node_modules/mathjs/lib/error/ArgumentsError.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/ceil.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/mean.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/SymbolNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/containsCollections.js","webpack://sheetforge/./node_modules/mathjs/lib/function/relational/larger.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/isCollection.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/min.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/AccessorNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/emitter.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/Node.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/index.js","webpack://sheetforge/./node_modules/mathjs/lib/type/bignumber/function/bignumber.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/identity.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/parse.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/objectSpread.js","webpack://sheetforge/./node_modules/deep-equal/lib/keys.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm04.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/round.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/add.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/boolean.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/multiply.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/and.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/subtract.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/string.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/inv.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/floor.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/function/matrix.js","webpack://sheetforge/./node_modules/escape-latex/dist/index.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ObjectNode.js","webpack://sheetforge/./node_modules/mathjs/lib/error/IndexError.js","webpack://sheetforge/./node_modules/mathjs/lib/core/function/import.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/operators.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/Range.js","webpack://sheetforge/external \"mobx\"","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/divideScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/function/matrix/subset.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/function/eval.js","webpack://sheetforge/./node_modules/mathjs/lib/error/DimensionError.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/transform/error.transform.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm07.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/addScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/utils/assign.js","webpack://sheetforge/external \"mobx-state-tree\"","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/FunctionNode.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/sum.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/object.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/DenseMatrix.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm05.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/scatter.js","webpack://sheetforge/./node_modules/mathjs/lib/core/core.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/latex.js","webpack://sheetforge/./node_modules/mathjs/lib/type/resultset/ResultSet.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/typeof.js","webpack://sheetforge/./node_modules/typed-function/typed-function.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm01.js","webpack://sheetforge/./node_modules/deep-equal/index.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/abs.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/mod.js","webpack://sheetforge/./node_modules/mathjs/lib/function/algebra/decomposition/lup.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm03.js","webpack://sheetforge/./node_modules/mathjs/lib/function/relational/equalScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/function/statistics/max.js","webpack://sheetforge/./node_modules/mathjs/lib/core/typed.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ConstantNode.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/BlockNode.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/function/parse.js","webpack://sheetforge/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://sheetforge/./node_modules/mathjs/lib/function/relational/smaller.js","webpack://sheetforge/./node_modules/deep-equal/lib/is_arguments.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/xor.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm11.js","webpack://sheetforge/./node_modules/mathjs/lib/function/logical/or.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/Matrix.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/multiplyScalar.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/FunctionAssignmentNode.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/bignumber/isBigNumber.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/bignumber/nearlyEqual.js","webpack://sheetforge/./node_modules/mathjs/lib/function/arithmetic/divide.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/collection/reduce.js","webpack://sheetforge/./node_modules/mathjs/lib/utils/array.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/RangeNode.js","webpack://sheetforge/./node_modules/mathjs/lib/function/utils/typeof.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/OperatorNode.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/AssignmentNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm10.js","webpack://sheetforge/./node_modules/mathjs/lib/expression/node/ArrayNode.js","webpack://sheetforge/./node_modules/mathjs/lib/type/fraction/function/fraction.js","webpack://sheetforge/./node_modules/tiny-emitter/index.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/getArrayDataType.js","webpack://sheetforge/./node_modules/mathjs/core.js","webpack://sheetforge/./node_modules/mathjs/lib/type/matrix/utils/algorithm13.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE_VBo9__","__WEBPACK_EXTERNAL_MODULE_YeEv__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","path","type","config","load","typed","Node","ParenthesisNode","content","this","SyntaxError","isNode","TypeError","isParenthesisNode","_compile","math","argNames","getContent","forEach","callback","map","clone","_toString","options","parenthesis","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","concat","toTex","DenseMatrix","b","inverse","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","Error","dt","rows","columns","cf","convert","find","cdata","data","size","datatype","x","w","j","mark","k0","k1","k","noop","unique","arguments","length","undefined","filter","item","index","all","indexOf","ICategorizable","getValue","types","model","volatile","isICategorizable","views","self","getCategories","categories","split","pop","category","trim","Boolean","sort","lastUsedName","categoryValue","PATH_SPLITTER","splitObjectPath","match","getPathValue","Array","isArray","target","reduce","IEditable","isIEditable","savedVersion","isDirty","deepEqual","actions","afterCreate","isPathDirty","current","initial","markAsClean","keys","isObservableArray","child","reset","assign","set","setPathValue","typeof_default","randomHash","radix","string","String","h","char","charCodeAt","Math","abs","hash","random","findParent","filterFunction","hasParent","parent","getParent","core","import","toSymbols","expression","symbols","parse","traverse","node","includes","push","compose","IIdentity","modifiedValue","raw","optional","union","number","character","isCharacter","id","toLowerCase","replace","isComputed","computing","effects","activeEffects","effect","targetId","modifier","sum","modifierText","sourceName","join","computed","values","symbol","attribute","attributes","findBy","defineProperty_default","defaultSymbolValue","safeData","objectSpread_default","eval","calculate","error","process","preProcessSnapshot","_ref","snapshot","objectWithoutProperties_default","postProcessSnapshot","_ref2","named","Collection","TYPE","TypedArrayWrapper","array","asArray","slice","first","at","last","clear","delete","deleteAt","_","every","fn","findById","identifierAttribute","searchElement","fromIndex","element","insert","splice","_len","_key","shift","start","end","some","sortBy","direction","prop","reversed","objectA","objectB","a","Map","localeCompare","compareBy","reverse","deleteCount","toObject","keyProp","valueProp","entry","unshift","_len2","_key2","custom","fromSnapshot","getValidationMessage","f","is","isTargetType","condition","afterAttach","available","CollectionOf","Attribute","isApplicable","conditions","source","description","Effect","equipped","maximum","mastery","theory","isComplex","isSimple","amount","resourceName","resources","Resource","resource","level","costs","ResourceCost","isActive","cast","isAffordable","cost","descriptors","Descriptor","experience","items","Item","skills","Skill","spells","Spell","traits","Trait","availableConditions","e","flatten","depth","Infinity","JSON","stringify","next","trait","spell","Character","_typeof","obj","iterator","constructor","memoize","hasher","cache","args","apply","maxArgumentCount","signatures","signature","count","max","callWithRightArgumentCount","argCount","objectUtils","zeros","arr","isNumber","isInteger","isFinite","round","sign","format","isNaN","precision","notation","toFixed","toExponential","toEngineering","exponential","lower","upper","fixedOptions","lowerExp","log","LN10","upperExp","console","warn","toPrecision","digits","splitNumber","exponent","parseFloat","dot","coefficients","parseInt","rounded","roundDigits","newExp","significandsDiff","expDiff","decimalIdx","decimals","decimalVal","str","splitValue","pp","DBL_EPSILON","Number","EPSILON","nearlyEqual","y","epsilon","diff","scatter","DimensionError","equalScalar","SparseMatrix","bvalues","bsize","bdt","RangeError","eq","zero","cvalues","cindex","cptr","ptr","u","v","validateOption","findIndex","MATRIX","NUMBER","_config","prev","deepExtend","curr","changes","emit","deepMap","skipZeros","errorTransform","transform","getSafeProperty","subset","isObjectProperty","getObjectProperty","err","operators","mathTypeOf","ConditionalNode","trueExpr","falseExpr","isConditionalNode","evalCondition","evalTrueExpr","evalFalseExpr","scope","context","isBigNumber","isZero","re","im","isUnit","testCondition","_ifNode","precedence","getPrecedence","conditionPrecedence","truePrecedence","falsePrecedence","isMatrix","deepForEach","valueOf","ii","util","matrix","subtract","multiply","unaryMinus","lup","det","any","Array | Matrix","cols","decomp","_det2","U","_i","evenCycles","visited","cycleLen","_det","1","isSafeProperty","safeNativeProperties","Function","isSafeMethod","method","getPrototypeOf","safeNativeMethods","isPlainObject","toLocaleString","setSafeProperty","validateSafeMethod","denseMatrix","sparseMatrix","adata","_data","bindex","bptr","cij","","NaN","num","BigNumber","toNumber","Fraction","Unit","null","Unit, string | Unit","unit","valuelessUnit","0","2","latex","Complex","neg","res","getTypeOf","validInputTypes","validOutputTypes","numeric","outputType","inputType","excluded","sourceKeys","resize","_zeros","...number | BigNumber | string","Matrix","storage","Array | Matrix, string","defaultValue","hasBigNumbers","_normalize","_validate","escape","Range","IndexNode","dimensions","dotNotation","deprecated","createRange","step","isIndexNode","evalDimensions","range","isRangeNode","needsEnd","childArgNames","evalStart","evalEnd","evalStep","childArgs","_evalStart","_evalEnd","_evalStep","isSymbolNode","_childArgNames","evalRange","_evalRange","evalDimension","isConstantNode","_iterate","av","bv","cv","not","identity","fraction","pow","number, number","_pow","Complex, Complex","BigNumber, BigNumber","predictable","Fraction, Fraction","Array, number","_powArray","Array, BigNumber","Matrix, number","_powMatrix","Matrix, BigNumber","Unit, number | BigNumber","yFrac","yNum","ex","px","getType","fnName","details","actual","RelationalNode","conditionals","params","isRelationalNode","compiled","evalLhs","evalRhs","condFn","_this","_this2","paramStrings","paramPrecedence","operatorMap","equal","unequal","smaller","larger","smallerEq","largerEq","ret","gt","exp","toSignificantDigits","ArgumentsError","min","message","stack","isArgumentsError","ceil","containsCollections","add","divide","improveErrorMessage","mean","_mean","Array | Matrix, number | BigNumber","dim","...","isValuelessUnit","SymbolNode","undef","toSymbol","isCollection","bigNearlyEqual","algorithm03","algorithm07","algorithm12","algorithm13","algorithm14","boolean, boolean","compare","Unit, Unit","equalBase","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","Array, Matrix","Matrix, Array","SparseMatrix, any","DenseMatrix, any","any, SparseMatrix","any, DenseMatrix","Array, any","any, Array","_min","_smallest","access","AccessorNode","needParenthesis","isAccessorNode","isArrayNode","isFunctionNode","isObjectNode","evalObject","evalIndex","Emitter","mixin","emitter","on","off","once","keywords","compile","comment","expr","mathWithTransform","_validateScope","_traverse","_transform","nodes","cloneDeep","equals","other","customString","handler","customTex","getIdentifier","bignumber","div","times","number | BigNumber","_identity","number | BigNumber, string","number | BigNumber, number | BigNumber","number | BigNumber, number | BigNumber, string","_identityVector","Array, string","Matrix, string","Big","one","diagonal","minimum","_extends","ArrayNode","AssignmentNode","BlockNode","ConstantNode","FunctionAssignmentNode","ObjectNode","OperatorNode","FunctionNode","RangeNode","extraNodes","parseStart","elem","TOKENTYPE","NULL","DELIMITER","SYMBOL","UNKNOWN","DELIMITERS",",","(",")","[","]","{","}","\"","'",";","+","-","*",".*","/","./","%","^",".^","~","!","&","|","^|","=",":","?","==","!=","<",">","<=",">=","<<",">>",">>>","NAMED_DELIMITERS","mod","to","in","and","xor","or","CONSTANTS","true","false","NUMERIC_CONSTANTS","currentString","state","substr","currentCharacter","prevCharacter","charAt","nextCharacter","getToken","tokenType","token","isWhitespace","nestingLevel","c1","c2","c3","isDigitDot","isDigit","isDecimalMark","createSyntaxError","isAlpha","getTokenSkipNewline","openParams","closeParams","conditionalLevel","visible","blocks","parseAssignment","parseBlock","createError","valid","parseLogicalXor","parseLogicalOr","parseConditional","arg","parseLogicalAnd","parseBitwiseOr","parseBitwiseXor","parseBitwiseAnd","parseRelational","parseShift","cond","parseConversion","parseRange","parseAddSubtract","parseMultiplyDivide","parseImplicitMultiplication","parseRule2","isOperatorNode","op","parseUnary","tokenStates","CustomNode","parseAccessors","parseDoubleQuotesStringToken","parseSingleQuotesStringToken","row","parseRow","properties","numberStr","parseEnd","parseParentheses","parseNumber","parseObject","parseMatrix","parseSingleQuotesString","parseDoubleQuotesString","parseSymbol","parseCustomNodes","parseLeftHandOperators","parsePow","len","col","cPrev","cNext","isValidLatinOrGreek","isValidMathSymbol","test","high","low","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","shim","xa","xb","wa","wb","NO_INT","_round","algorithm11","Complex, number","Complex, BigNumber","_n","number, BigNumber","toDecimalPlaces","Fraction, number","SparseMatrix, number | BigNumber","DenseMatrix, number | BigNumber","number | Complex | BigNumber, SparseMatrix","number | Complex | BigNumber, DenseMatrix","Array, number | BigNumber","number | Complex | BigNumber, Array","extend","addScalar","algorithm01","algorithm04","algorithm10","any, any","any, any, ...any","rest","result","isBoolean","multiplyScalar","_validateMatrixDimensions","Matrix, Matrix","xsize","ysize","bdata","af","mf","_multiplyVectorVector","alength","bcolumns","_multiplyVectorDenseMatrix","_multiplyVectorMatrix","_multiplyMatrixVector","_multiplyMatrixMatrix","size1","size2","arows","acolumns","brows","ib","vbi","ka0","ka1","ka","ia","p1","ic","jb","kb0","kb1","kb","vbij","p0","algorithm02","algorithm06","checkEqualDimensions","algorithm05","sub","minus","fixPrefix","formatNumber","formatBigNumber","isString","endsWith","text","search","substring","looksLikeFraction","formatArray","syntax","entries","escaped","objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","divideScalar","inv","_inv","mat","temp","A","B","ABig","rBig","Ac","Bc","Ar","Br","floor","_create","string, string","Array | Matrix, string, string","defaultEscapes","\\","#","$","formatEscapes","–","—"," ","\t","\r\n","\n","defaultEscapeMapFn","_ref$preserveFormatti","preserveFormatting","_ref$escapeMapFn","escapeMapFn","runningStr","escapes","escapeKeys","_loop","specialCharFound","evalEntries","stringifiedKey","parsedKey","IndexError","isIndexError","lazy","isFactory","_import","wrap","wrapper","isTypedFunction","override","_importTransform","silent","allowedInExpressions","_deleteTransform","_importFactory","existingTransform","namespace","existing","resolver","instance","factoryAllowedInExpressions","isSupportedType","isFraction","unsafe","docs","chain","mathImport","latexLeftParens","latexRightParens","latexParens","OperatorNode:or","associativity","associativeWith","OperatorNode:xor","OperatorNode:and","OperatorNode:bitOr","OperatorNode:bitXor","OperatorNode:bitAnd","OperatorNode:equal","OperatorNode:unequal","OperatorNode:smaller","OperatorNode:larger","OperatorNode:smallerEq","OperatorNode:largerEq","OperatorNode:leftShift","OperatorNode:rightArithShift","OperatorNode:rightLogShift","OperatorNode:to","OperatorNode:add","OperatorNode:subtract","OperatorNode:multiply","OperatorNode:divide","OperatorNode:dotMultiply","OperatorNode:dotDivide","OperatorNode:mod","OperatorNode:unaryPlus","OperatorNode:unaryMinus","OperatorNode:bitNot","OperatorNode:not","OperatorNode:pow","OperatorNode:dotPow","OperatorNode:factorial","OperatorNode:transpose","_node","identifier","getAssociativity","isAssociativeWith","nodeA","nodeB","identifierA","identifierB","hasStart","hasEnd","hasStep","isRange","nums","toArray","Unit, number | Fraction | BigNumber","number | Fraction | BigNumber, Unit","validateIndex","_getObjectProperty","dimension","_setObjectProperty","replacement","updated","Array, Index","isScalar","Matrix, Index","Object, Index","string, Index","isIndex","strLen","Array, Index, any","Array, Index, any, any","Matrix, Index, any","Matrix, Index, any, any","string, Index, string","_setSubstring","string, Index, string, string","Object, Index, any","chars","string, Object","Array | Matrix, Object","expected","relation","isDimensionError","_scatter","va","vb","plus","evalArgs","rawArgs","evalArg0","_evalArg","evalArg1","evalArg","_rawArgs","evalFn","_rawArgs2","nodeToString","expandTemplate","template","regex","RegExp","inputPos","exec","ReferenceError","isFunctionAssignmentNode","nodeToTex","latexConverter","customToTex","defaultTemplate","_sum","_sum2","Date","canDefineProperty","_value","_uninitialized","configurable","names","getArrayDataType","preprocess","validate","_resize","_fit","newSize","changed","isDenseMatrix","getDataType","_getSubmatrix","dims","_get","submatrix","sSize","iSize","outer","unsqueeze","_setSubmatrix","dataIndex","subIndex","_set","indexI","copy","reshape","me","recurse","kSuper","kSub","ms","swapRows","_swapRows","vi","_storage","dense","wai","wbi","vc","update","typedFactory","importFactory","configFactory","factories","instances","randomSeed","escapeLatex","Alpha","alpha","Beta","beta","Gamma","gamma","Delta","delta","Epsilon","varepsilon","Zeta","zeta","Eta","eta","Theta","theta","vartheta","Iota","iota","Kappa","kappa","varkappa","Lambda","lambda","Mu","mu","Nu","nu","Xi","xi","Omicron","omicron","Pi","pi","varpi","Rho","rho","varrho","Sigma","sigma","varsigma","Tau","tau","Upsilon","upsilon","Phi","phi","varphi","Chi","chi","Psi","psi","Omega","omega","inf","Inf","infinity","oo","lim","transpose","ctranspose","factorial","dotPow","unaryPlus","bitNot","dotMultiply","dotDivide","leftShift","rightArithShift","rightLogShift","bitAnd","bitXor","bitOr","units","deg","ResultSet","isResultSet","_typeof2","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","ok","notOk","_types","anyType","_ignore","_conversions","conversions","ignore","findTypeByName","typeName","findInArray","hint","findTypeIndex","findTypeName","stringifyParams","param","typeNames","getTypeName","restParam","parseParam","notEmpty","notIgnore","matchingConversions","matches","conversion","from","filterConversions","exactTypes","typeIndex","conversionIndex","convertibleTypes","hasRestParam","hasConversions","compileTest","test0","test1","tests","compileTests","varIndex","lastTest","testRestParam","getParamAtIndex","getExpectedTypeNames","excludeConversions","isExactType","mergeExpectedParams","uniq","flatMap","getLowestTypeIndex","getLowestConversionIndex","compareParams","param1","param2","compareSignatures","signature1","signature2","compileArgConversion","conversion0","conversion1","splitParams","ignoreConversionTypes","_splitParams","typeGroups","filteredTypes","typeGroup","splittedParams","createTypedFunction","signaturesMap","parsedSignatures","parsedParam","isInvalidParam","parseSignature","notNull","parsedSignature","conflictingSignature","typesNames1","typesNames2","hasOverlap","len1","len2","restParam1","restParam2","hasConflictingParams","ok0","ok1","ok2","ok3","ok4","ok5","allOk","test00","test10","test20","test30","test40","test50","test01","test11","test21","test31","test41","test51","fns","fnConvert","compiledConversions","fnPreprocess","offset","compileArgsPreprocessing","fn0","fn1","fn2","fn3","fn4","fn5","len0","len3","len4","len5","iStart","iEnd","generic","_name","matchingSignatures","nextMatchingDefs","actualType","lengths","maxLength","expectedLength","arg0","arg1","createSignaturesMap","array1","array2","getName","extractSignatures","validateUnique","_signature","_fn","...Function","string, ...Function","addType","beforeObjectTest","addConversion","pSlice","objectKeys","isArguments","opts","getTime","strict","isUndefinedOrNull","isBuffer","objEquiv","Spa","_denseLUP","ldata","lsize","udata","usize","pabsv","vjj","absv","vij","pv","L","_sparseLUP","lvalues","lindex","lptr","uvalues","uindex","uptr","pvCo","pvOc","spa","vkj","_forEachRow","vik","accumulate","kx","ky","swap","z","_max","_largest","typedFunction","_createTyped","isSparseMatrix","isHelp","isFunction","isDate","isRegExp","isObject","isNull","isUndefined","isAssignmentNode","isBlockNode","isChain","toLatex","block","evalBlocks","results","string | Array | Matrix","string | Array | Matrix, Object","writable","lt","supportsArgumentsClass","supported","unsupported","mul","number | Fraction | BigNumber | Complex, Unit","Unit, number | Fraction | BigNumber | Complex","exprPrecedence","evalExpr","lte","Array | Matrix, Array | Matrix","any, Array | Matrix","arraySize","_reduce","val","tran","I","J","tmp","_switch","_DimensionError","default","dimNext","_number","_IndexError","_string","_defaultValue","oldLen","newLen","minLen","sizes","newArray","flatArray","product","totalSize","sizeIndex","tmpArray2","tmpArray","_reshape","squeeze","_squeeze","_unsqueeze","filterRegExp","regexp","separator","identify","generalize","_interopRequireDefault","flat","calculateNecessaryParentheses","parens","startPrecedence","stepPrecedence","endPrecedence","implicit","operandPrecedence","operandIdentifier","rootIdentifier","lhsParens","rhsParens","lhsPrecedence","assocWithLhs","_rootIdentifier","lhsIdentifier","rhsIdentifier","rhsPrecedence","assocWithRhs","argPrecedence","assocWithArg","argAssociativity","isUnary","isBinary","assoc","operand","opIsNamed","lhs","rhs","stringifiedArgs","lhsTex","rhsTex","texifiedArgs","evalValue","childObject","evalParentObject","parentProp","evalParentIndex","parentIndex","evalItems","evalItem","childNode","numerator","denominator","E","ctx","listener","evtArr","evts","liveEvents","TinyEmitter","_type","_length","itemType","csize"],"mappings":"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","file":"sheetforge.production.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"mobx\"), require(\"mobx-state-tree\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sheetforge\", [\"mobx\", \"mobx-state-tree\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sheetforge\"] = factory(require(\"mobx\"), require(\"mobx-state-tree\"));\n\telse\n\t\troot[\"sheetforge\"] = factory(root[\"mobx\"], root[\"mobx-state-tree\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_VBo9__, __WEBPACK_EXTERNAL_MODULE_YeEv__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"05fm\");\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor ParenthesisNode\n   * @extends {Node}\n   * A parenthesis node describes manual parenthesis from the user input\n   * @param {Node} content\n   * @extends {Node}\n   */\n\n  function ParenthesisNode(content) {\n    if (!(this instanceof ParenthesisNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (!type.isNode(content)) {\n      throw new TypeError('Node expected for parameter \"content\"');\n    }\n\n    this.content = content;\n  }\n\n  ParenthesisNode.prototype = new Node();\n  ParenthesisNode.prototype.type = 'ParenthesisNode';\n  ParenthesisNode.prototype.isParenthesisNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ParenthesisNode.prototype._compile = function (math, argNames) {\n    return this.content._compile(math, argNames);\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} content\n   * @override\n   **/\n\n\n  ParenthesisNode.prototype.getContent = function () {\n    return this.content.getContent();\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ParenthesisNode.prototype.forEach = function (callback) {\n    callback(this.content, 'content', this);\n  };\n  /**\n   * Create a new ParenthesisNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ParenthesisNode} Returns a clone of the node\n   */\n\n\n  ParenthesisNode.prototype.map = function (callback) {\n    var content = callback(this.content, 'content', this);\n    return new ParenthesisNode(content);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.prototype.clone = function () {\n    return new ParenthesisNode(this.content);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toString = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '(' + this.content.toString(options) + ')';\n    }\n\n    return this.content.toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ParenthesisNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ParenthesisNode',\n      content: this.content\n    };\n  };\n  /**\n   * Instantiate an ParenthesisNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n   *                       where mathjs is optional\n   * @returns {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.fromJSON = function (json) {\n    return new ParenthesisNode(json.content);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype.toHTML = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return this.content.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toTex = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n    }\n\n    return this.content.toTex(options);\n  };\n\n  return ParenthesisNode;\n}\n\nexports.name = 'ParenthesisNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm12 = function algorithm12(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  return algorithm12;\n}\n\nexports.name = 'algorithm12';\nexports.factory = factory;","export default () => {}\n","export default (array = []) => (\n  array.filter((item, index, all) => all.indexOf(item) === index)\n)\n","import { types } from 'mobx-state-tree'\nimport noop from '@/utilities/noop'\nimport unique from '@/utilities/unique'\n\nexport default (getValue = noop) => types.model({\n}).volatile(() => ({\n  isICategorizable: true,\n})).views((self) => {\n  function getCategories() {\n    if (!self.name) return []\n\n    const categories = self.name.split(':')\n    categories.pop() // remove the name\n\n    return unique(categories.map(category => category.trim()).filter(Boolean)).sort()\n  }\n  let lastUsedName = self.name\n  let categories = getCategories()\n\n  return {\n    get categories() {\n      if (!self.name || self.name === lastUsedName) return categories\n\n      lastUsedName = self.name\n      categories = getCategories()\n\n      return categories\n    },\n    get categoryValue() { return getValue(self) },\n  }\n})\n","const PATH_SPLITTER = /([a-z0-9-_]+)(?![[\"'\\].])*/ig\n\nexport default (path) => {\n  if (typeof path !== 'string') return null\n  return path.match(PATH_SPLITTER)\n}\n","import splitObjectPath from '@/utilities/splitObjectPath'\n\nexport default (object, path) => {\n  if (typeof path !== 'string') return undefined\n\n  const split = splitObjectPath(path)\n\n  if (!Array.isArray(split)) return undefined\n\n  const property = split.pop()\n  const target = split.reduce((o, key) => o[key] || {}, object)\n\n  if (target) return target[property]\n  return undefined\n}\n","import deepEqual from 'deep-equal'\nimport { isObservableArray } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport getPathValue from '@/utilities/getPathValue'\nimport setPathValue from '@/utilities/setPathValue'\n\nconst IEditable = types.model('IEditable', {\n  // Any\n}).volatile(() => ({\n  isIEditable: true,\n  savedVersion: {},\n})).views(self => ({\n  get isDirty() { return !deepEqual(self.toJSON(), self.savedVersion) },\n})).actions(self => ({\n  /* eslint-disable no-param-reassign */\n\n  afterCreate() { self.savedVersion = self.toJSON() },\n  isPathDirty: (path) => {\n    const current = getPathValue(self.toJSON(), path)\n    const initial = getPathValue(self.savedVersion, path)\n    return !deepEqual(current, initial)\n  },\n  markAsClean() {\n    self.savedVersion = self.toJSON()\n\n    Object.keys(self.savedVersion).forEach((key) => {\n      const value = self[key]\n      if (!value) { return }\n\n      if (value.isIEditable) {\n        value.markAsClean()\n      } else if (isObservableArray(value)) {\n        value.forEach(child => (child && child.isIEditable && child.markAsClean()))\n      }\n    })\n  },\n  reset() { Object.assign(self, self.savedVersion) },\n  set(key = {}, value = undefined) {\n    if (typeof key === 'string' && value !== undefined) {\n      // allows: model.set('foo.bar', 'bar')\n      if (self[key] !== undefined) {\n        self[key] = value\n      } else {\n        setPathValue(self, key, value)\n      }\n    } else if (typeof key === 'object' && value === undefined) {\n      // allows: model.set({ foo: 'Foo', bar: 'Bar' })\n      Object.assign(self, key)\n    }\n  },\n\n  /* eslint-enable no-param-reassign */\n}))\n\nexport default IEditable\n","import splitObjectPath from '@/utilities/splitObjectPath'\n\nexport default (object, path, value) => {\n  const split = splitObjectPath(path)\n  const property = split.pop()\n  const target = split.reduce((o, key) => o[key] || {}, object)\n\n  if (target && target.isIEditable) {\n    target.set(property, value)\n  } else {\n    target[property] = value\n  }\n}\n","export default function hash(value = '', radix = 16) {\n  const string = String(value)\n  let h = 0\n  string.split('').forEach((char) => {\n    /* eslint-disable no-bitwise */\n    h = ((h << 5) - h) + char.charCodeAt(0)\n    h &= h // Convert to 32-bit integer\n    /* eslint-enable no-bitwise */\n  })\n  return Math.abs(h).toString(radix)\n}\n\nexport const randomHash = () => hash(Math.random().toString())\n","import { types } from 'mobx-state-tree'\nimport { randomHash } from '@/utilities/hash'\n\nexport default types.model({\n  // Nothing\n}).volatile(() => ({\n  hash: '',\n})).actions(self => ({\n  afterCreate() { self.hash = randomHash() }, // eslint-disable-line no-param-reassign\n}))\n","import { getParent, hasParent } from 'mobx-state-tree'\n\nexport default (child, filterFunction = Boolean) => {\n  if (!hasParent(child)) { return null }\n\n  let parent = getParent(child)\n  while (parent) {\n    if (filterFunction(parent)) {\n      return parent\n    }\n\n    if (!hasParent(parent)) { return null }\n    parent = getParent(parent)\n  }\n\n  return null\n}\n","import core from 'mathjs/core'\n\nconst math = core.create()\nmath.import(require('mathjs/lib/expression/function/eval'))\nmath.import(require('mathjs/lib/expression/function/parse'))\nmath.import(require('mathjs/lib/function/arithmetic/add'))\nmath.import(require('mathjs/lib/function/arithmetic/ceil'))\nmath.import(require('mathjs/lib/function/arithmetic/divide'))\nmath.import(require('mathjs/lib/function/arithmetic/floor'))\nmath.import(require('mathjs/lib/function/arithmetic/mod'))\nmath.import(require('mathjs/lib/function/arithmetic/multiply'))\nmath.import(require('mathjs/lib/function/arithmetic/pow'))\nmath.import(require('mathjs/lib/function/arithmetic/round'))\nmath.import(require('mathjs/lib/function/arithmetic/subtract'))\nmath.import(require('mathjs/lib/function/logical'))\nmath.import(require('mathjs/lib/function/statistics/max'))\nmath.import(require('mathjs/lib/function/statistics/mean'))\nmath.import(require('mathjs/lib/function/statistics/min'))\nmath.import(require('mathjs/lib/function/statistics/sum'))\nmath.import(require('mathjs/lib/type/matrix/function/matrix'))\nmath.import(require('mathjs/lib/type/matrix/Matrix'))\nmath.import(require('mathjs/lib/type/matrix/DenseMatrix'))\n\nexport default math\n","import math from '@/utilities/math'\n\nexport default (expression) => {\n  const symbols = []\n  math.parse(expression).traverse((node) => {\n    if (node.type === 'SymbolNode' && !symbols.includes(node.name)) {\n      symbols.push(node.name)\n    }\n  })\n  return symbols\n}\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport findParent from '@/utilities/findParent'\nimport math from '@/utilities/math'\nimport calculate from '@/utilities/math/calculate'\nimport toSymbols from '@/utilities/math/toSymbols'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.modifiedValue()),\n  IEditable,\n  types.model({\n    name: 'New Attribute...',\n    raw: types.optional(types.union(types.number, types.string), 0),\n  }).views(self => ({\n    get character() { return findParent(self, p => p.isCharacter) },\n    get id() {\n      return self.name.split(':').pop()\n        .trim().toLowerCase()\n        .replace(/[^a-z0-9]/ig, '')\n    },\n    get isComputed() { return typeof self.raw === 'string' },\n  })).actions((self) => {\n    let computing = false\n\n    return ({\n      effects() {\n        if (!self.character) return []\n        return self.character.activeEffects().filter(effect => effect.targetId === self.id)\n      },\n      modifiedValue() { return (self.value() || 0) + self.modifier() },\n      modifier() { return math.sum(self.effects().map(effect => effect.modifier)) },\n      modifierText() {\n        return self.effects().map(effect => `${effect.sourceName()}: ${effect.modifier}`).join(', ')\n      },\n      value() {\n        if (!self.isComputed) return self.raw\n        if (self.character === null) return 0\n        if (computing) return 0\n\n        computing = true\n        let computed = 0\n\n        try {\n          const values = toSymbols(self.raw).reduce((all, symbol) => {\n            const attribute = self.character.attributes.findBy('id', symbol)\n            return Object.assign(all, { [symbol]: attribute ? attribute.modifiedValue() : 0 })\n          }, {})\n\n          computed = calculate(self.raw, values)\n        } catch (error) {\n          // eslint-disable-next-line no-undef\n          if (process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.error(`Error computing: ${self.raw}`)\n          }\n          computed = 0\n        }\n\n        computing = false\n        return computed\n      },\n    })\n  }).preProcessSnapshot(({ value, ...snapshot }) => ({ ...snapshot, raw: value }))\n    .postProcessSnapshot(({ raw, ...snapshot }) => ({ ...snapshot, value: raw }))\n).named('Attribute')\n","import math from '@/utilities/math'\nimport toSymbols from '@/utilities/math/toSymbols'\n\nexport default (expression = '', data = {}, options = { defaultSymbolValue: 0 }) => {\n  const safeData = { ...data }\n  toSymbols(expression).forEach((symbol) => {\n    if (safeData[symbol] === undefined) {\n      safeData[symbol] = options.defaultSymbolValue\n    }\n  })\n\n  return math.eval(expression, safeData)\n}\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(),\n  IEditable,\n  types.model({\n    name: 'New Descriptor...',\n    value: '',\n  })\n).named('Descriptor')\n","import { isObservableArray } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport compareBy from '@/utilities/compareBy'\n\nexport default (TYPE, options = {}) => {\n  const TypedArrayWrapper = types.model({\n    values: types.array(TYPE),\n  }).views(self => ({\n    get asArray() { return self.values.slice() },\n    get first() { return self.length ? self.at(0) : undefined },\n    get last() { return self.length ? self.at(self.length - 1) : undefined },\n    get length() { return self.values.length },\n  })).actions(self => ({\n    /* eslint-disable no-param-reassign */\n\n    at: n => self.values[n],\n    clear: () => self.values.clear(),\n    delete: (object) => { self.values.replace(self.values.filter(item => item !== object)) },\n    deleteAt: (index) => { self.values.replace(self.values.filter((_, n) => n !== index)) },\n    every: fn => self.values.every(fn),\n    filter: fn => self.values.filter(fn),\n    find: fn => self.values.find(fn),\n    findBy: (key, value) => self.find(item => item[key] === value),\n    findById: (id) => {\n      if (!TYPE.identifierAttribute) return null\n      return self.find(item => item[TYPE.identifierAttribute] === id) || null\n    },\n    forEach: fn => self.values.forEach(fn),\n    includes: (searchElement, fromIndex) => self.values.includes(searchElement, fromIndex),\n    indexOf: element => self.values.indexOf(element),\n    insert: (object, index) => self.splice(index, 0, object),\n    map: fn => self.values.map(fn),\n    pop: () => self.values.pop(),\n    push: (...values) => self.values.replace([].concat(self.values, values)),\n    reduce: (fn, initial) => self.values.reduce(fn, initial),\n    replace: values => self.values.replace(values),\n    shift: () => self.values.shift(),\n    slice: (start, end) => self.values.slice(start, end),\n    some: fn => self.values.some(fn),\n    sortBy: (property, direction = 'asc') => {\n      if (!['asc', 'desc'].includes(direction)) {\n        throw new TypeError(`direction must be \"asc\" or \"desc\", got: \"${direction}\"`)\n      }\n      const values = self.values.slice().sort(compareBy(property))\n      self.values.replace(direction === 'desc' ? values.reverse() : values)\n      return self\n    },\n    splice: (index, deleteCount, value) => self.values.splice(index, deleteCount, value),\n    toObject: (keyProp, valueProp) => self.values.reduce((object, entry) => {\n      const key = entry[keyProp]\n      const value = valueProp !== undefined ? entry[valueProp] : entry\n      return { ...object, [key]: typeof value === 'function' ? value() : value }\n    }, {}),\n    unshift: (...values) => self.values.replace([].concat(values, self.values)),\n\n    /* eslint-enable no-param-reassign */\n  })).postProcessSnapshot(({ values }) => values)\n\n  return types.custom({\n    ...options,\n    fromSnapshot: (snapshot = []) => TypedArrayWrapper.create({ values: snapshot }),\n    getValidationMessage: (snapshot) => {\n      if (!snapshot) return ''\n      if (isObservableArray(snapshot) || Array.isArray(snapshot)) {\n        if (snapshot.every(f => TYPE.is(f))) return ''\n      }\n\n      return 'Collection types must be assigned an array of values or null'\n    },\n    isTargetType: target => TypedArrayWrapper.is(target),\n    name: options.name || 'Collection',\n  })\n}\n","export default (prop, reversed = false) => (objectA, objectB) => {\n  const a = String(objectA instanceof Map ? objectA.get(prop) : objectA[prop])\n  const b = String(objectB instanceof Map ? objectB.get(prop) : objectB[prop])\n\n  if (reversed) return b.localeCompare(a)\n  return a.localeCompare(b)\n}\n","import { types } from 'mobx-state-tree'\nimport Attribute from '@/models/Attribute'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    condition: '',\n    modifier: 0,\n    targetId: '',\n  }).actions(self => ({\n    afterAttach() {\n      if (!self.targetId && self.available().length) {\n        // eslint-disable-next-line no-param-reassign\n        self.targetId = self.available().first.id\n      }\n    },\n\n    available() {\n      const character = self.character()\n      return character ? character.attributes : CollectionOf(Attribute).create([])\n    },\n    character() { return findParent(self, p => p.isCharacter) },\n    isApplicable() {\n      const character = self.character()\n      return Boolean(\n        !self.condition ||\n        (character && character.conditions.includes(self.condition))\n      )\n    },\n    source() { return findParent(self, p => p.name) || null },\n    sourceName() { return self.source() ? self.source().name : 'Unknown' },\n    target() {\n      const character = self.character()\n      return character ? character.attributes.findBy('name', self.targetId) : null\n    },\n  }))\n).named('Effect')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(),\n  IEditable,\n  types.model({\n    description: '',\n    effects: CollectionOf(Effect),\n    equipped: false,\n    name: 'New Item...',\n  }),\n).named('Item')\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(),\n  IEditable,\n  types.model({\n    current: 0,\n    maximum: 10,\n    name: 'New Resource...',\n  })\n).named('Resource')\n","import { types } from 'mobx-state-tree'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.mastery),\n  IEditable,\n  types.model({\n    mastery: 1,\n    name: 'New Skill...',\n    theory: 0,\n  }).views(self => ({\n    get isComplex() { return self.theory !== 0 },\n    get isSimple() { return self.theory === 0 },\n  }))\n).named('Skill')\n","import { types } from 'mobx-state-tree'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport Resource from '@/models/Resource'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    amount: 0,\n    resourceName: '',\n  }).views(self => ({\n    get available() {\n      return self.character ? self.character.resources : CollectionOf(Resource).create([])\n    },\n    get character() { return findParent(self, p => p.isCharacter) },\n  })).actions(self => ({\n    afterAttach() {\n      if (!self.resourceName && self.available.length) {\n        // eslint-disable-next-line no-param-reassign\n        self.resourceName = self.available.first.name\n      }\n    },\n    resource() {\n      if (!self.character) return null\n      return self.character.resources.findBy('name', self.resourceName)\n    },\n  }))\n).named('Cost')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport ResourceCost from '@/models/ResourceCost'\nimport findParent from '@/utilities/findParent'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.level),\n  IEditable,\n  types.model({\n    costs: CollectionOf(ResourceCost), // Resources\n    description: '',\n    effects: CollectionOf(Effect),\n    isActive: false,\n    level: 0,\n    name: 'New Spell...',\n  }).views(self => ({\n    get character() { return findParent(self, p => p.isCharacter) },\n  })).actions(self => ({\n    cast() {\n      if (self.isAffordable()) {\n        self.costs.forEach((cost) => {\n          const resource = cost.resource()\n          resource.set({ current: resource.current - cost.amount })\n        })\n      }\n    },\n    isAffordable() {\n      if (!self.character || !self.costs.length) return true\n      return self.costs.every(cost => (\n        cost.resource() && cost.resource().current >= cost.amount\n      ))\n    },\n  }))\n).named('Spell')\n","import { types } from 'mobx-state-tree'\nimport Effect from '@/models/Effect'\nimport CollectionOf from '@/models/generic/Collection'\nimport ICategorizable from '@/models/generic/ICategorizable'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\n\nexport default types.compose(\n  IIdentity,\n  ICategorizable(self => self.value),\n  IEditable,\n  types.model('Trait', {\n    effects: CollectionOf(Effect),\n    name: 'New Trait...',\n    value: 0,\n  })\n).named('Trait')\n","import { types } from 'mobx-state-tree'\nimport Attribute from '@/models/Attribute'\nimport Descriptor from '@/models/Descriptor'\nimport CollectionOf from '@/models/generic/Collection'\nimport IEditable from '@/models/generic/IEditable'\nimport IIdentity from '@/models/generic/IIdentity'\nimport Item from '@/models/Item'\nimport Resource from '@/models/Resource'\nimport Skill from '@/models/Skill'\nimport Spell from '@/models/Spell'\nimport Trait from '@/models/Trait'\nimport flatten from '@/utilities/flatten'\n\nexport default types.compose(\n  IIdentity,\n  IEditable,\n  types.model({\n    attributes: CollectionOf(Attribute),\n    conditions: CollectionOf(types.string), // ['vs Goblins', 'Crinos Form']\n    descriptors: CollectionOf(Descriptor),\n    experience: 0,\n    items: CollectionOf(Item), // equipped / unequipped, have Effects\n    resources: CollectionOf(Resource),\n    skills: CollectionOf(Skill),\n    spells: CollectionOf(Spell),\n    traits: CollectionOf(Trait), // have Effects\n  }).volatile(() => ({\n    isCharacter: true,\n  })).actions(self => ({\n    activeEffects() {\n      return self.effects().filter(effect => effect && effect.isApplicable())\n    },\n    availableConditions() {\n      return self.effects()\n        .map(e => e.condition).concat(self.conditions.asArray)\n        .sort()\n        .filter((effect, i, all) => !i || effect !== all[i - 1])\n        .filter(Boolean)\n    },\n    effects() {\n      return flatten([\n        // Trait Effects first, because they're inherent\n        self.traits.filter(Boolean).map(trait => trait.effects.values),\n        // Direct Effects second, because they're cast on the character\n        self.spells.filter(spell => spell.isActive).map(spell => spell.effects.values),\n        // Item Effects third, because they're indirect\n        self.items.filter(item => item.equipped).map(item => item.effects.values),\n      ]).filter(Boolean)\n    },\n  }))\n).named('Character')\n","export default function flatten(array, depth = Infinity) {\n  if (!array || !Array.isArray(array)) {\n    throw new TypeError(`cannot flatten non-Array value ${JSON.stringify(array)}`)\n  }\n\n  return array.reduce((all, next) => {\n    if (depth > 1 && next && Array.isArray(next)) {\n      return all.concat(flatten(next, depth - 1))\n    }\n\n    return all.concat(next)\n  }, [])\n}\n","import Character from '@/models/Character'\nimport '@fontello/css/sheetforge-embedded'\n\nexport default Character\n","'use strict'; // function utils\n\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {function(args: Array)} [hasher]  A custom hash builder.\n *                                          Is JSON.stringify by default.\n * @return {function}                       Returns the memoized function\n */\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexports.memoize = function (fn, hasher) {\n  return function memoize() {\n    if (_typeof(memoize.cache) !== 'object') {\n      memoize.cache = {};\n    }\n\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher ? hasher(args) : JSON.stringify(args);\n\n    if (!(hash in memoize.cache)) {\n      memoize.cache[hash] = fn.apply(fn, args);\n    }\n\n    return memoize.cache[hash];\n  };\n};\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\n\nexports.maxArgumentCount = function (fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n};\n/**\n * Call a typed function with the\n * @param {function} fn   A function or typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\n\nexports.callWithRightArgumentCount = function (fn, args, argCount) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n};","'use strict';\n\nvar objectUtils = require('./object');\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Test whether value is a number\n * @param {*} value\n * @return {boolean} isNumber\n */\n\n\nexports.isNumber = function (value) {\n  return typeof value === 'number';\n};\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\n\nexports.isInteger = function (value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well\n};\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {*}\n */\n\n\nexports.sign = Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexports.format = function (value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (exports.isNumber(options)) {\n      precision = options;\n    } else if (exports.isNumber(options.precision)) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'engineering':\n      return exports.toEngineering(value, precision);\n\n    case 'auto':\n      // TODO: clean up some day. Deprecated since: 2018-01-24\n      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0\n      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {\n        var fixedOptions = objectUtils.map(options, function (x) {\n          return x;\n        });\n        fixedOptions.exponential = undefined;\n\n        if (options.exponential.lower !== undefined) {\n          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);\n        }\n\n        if (options.exponential.upper !== undefined) {\n          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);\n        }\n\n        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));\n        return exports.toPrecision(value, precision, fixedOptions);\n      }\n\n      return exports.toPrecision(value, precision, options && options) // remove trailing zeros after the decimal point\n      .replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\n\nexports.splitNumber = function (value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n};\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\n\nexports.toEngineering = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var rounded = exports.roundDigits(exports.splitNumber(value), precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if (exports.isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    if (precision > c.length) c = c.concat(zeros(precision - c.length));\n  } else {\n    // concatenate coefficients with necessary zeros\n    var significandsDiff = e >= 0 ? e : Math.abs(newExp); // add zeros if necessary (for ex: 1e+8)\n\n    if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (--expDiff >= 0) {\n    decimalIdx++;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = exports.isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n};\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\n\nexports.toFixed = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = exports.splitNumber(value);\n  var rounded = typeof precision === 'number' ? exports.roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n};\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\n\nexports.toExponential = function (value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = exports.splitNumber(value);\n  var rounded = precision ? exports.roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n};\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\n\nexports.toPrecision = function (value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = exports.splitNumber(value);\n\n  if (split.exponent < lowerExp || split.exponent >= upperExp) {\n    // exponential notation\n    return exports.toExponential(value, precision);\n  } else {\n    var rounded = precision ? exports.roundDigits(split, precision) : split;\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n};\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\n\nexports.roundDigits = function (split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n};\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nexports.digits = function (value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n};\n/**\n * Minimum number added to one that makes the result different than one\n */\n\n\nexports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexports.nearlyEqual = function (x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < exports.DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n};","'use strict';\n\nvar scatter = require('./../../../utils/collection/scatter');\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm06 = function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      scatter(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace\n\n      scatter(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm06;\n}\n\nexports.name = 'algorithm06';\nexports.factory = factory;","'use strict';\n\nvar object = require('../../utils/object');\n\nfunction factory(type, config, load, typed, math) {\n  var MATRIX = ['Matrix', 'Array']; // valid values for option matrix\n\n  var NUMBER = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.eval('0.4')                    // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.eval('0.4')                    // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n\n  function _config(options) {\n    if (options) {\n      var prev = object.map(config, object.clone); // validate some of the options\n\n      validateOption(options, 'matrix', MATRIX);\n      validateOption(options, 'number', NUMBER); // merge options\n\n      object.deepExtend(config, options);\n      var curr = object.map(config, object.clone);\n      var changes = object.map(options, object.clone); // emit 'config' event\n\n      math.emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return object.map(config, object.clone);\n    }\n  } // attach the valid options to the function so they can be extended\n\n\n  _config.MATRIX = MATRIX;\n  _config.NUMBER = NUMBER;\n  return _config;\n}\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\n\n\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Find a string in an array. Case insensitive search\n * @param {Array.<string>} array\n * @param {string} item\n * @return {number} Returns the index when found. Returns -1 when not found\n */\n\n\nfunction findIndex(array, item) {\n  return array.map(function (i) {\n    return i.toLowerCase();\n  }).indexOf(item.toLowerCase());\n}\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\n\n\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    var index = findIndex(values, options[name]);\n\n    if (index !== -1) {\n      // right value, wrong casing\n      // TODO: lower case values are deprecated since v3, remove this warning some day.\n      console.warn('Warning: Wrong casing for configuration option \"' + name + '\", should be \"' + values[index] + '\" instead of \"' + options[name] + '\".');\n      options[name] = values[index]; // change the option to the right casing\n    } else {\n      // unknown value\n      console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". Available options: ' + values.map(JSON.stringify).join(', ') + '.');\n    }\n  }\n}\n\nexports.name = 'config';\nexports.math = true; // request the math namespace as fifth argument\n\nexports.factory = factory;","'use strict';\n/**\n * Execute the callback function element wise for each element in array and any\n * nested array\n * Returns an array with the results\n * @param {Array | Matrix} array\n * @param {Function} callback   The callback is called with two parameters:\n *                              value1 and value2, which contain the current\n *                              element of both arrays.\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n *\n * @return {Array | Matrix} res\n */\n\nmodule.exports = function deepMap(array, callback, skipZeros) {\n  if (array && typeof array.map === 'function') {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  } else {\n    return callback(array);\n  }\n};","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar errorTransform = require('../../transform/error.transform').transform;\n\nvar getSafeProperty = require('../../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  /**\n   * Retrieve part of an object:\n   *\n   * - Retrieve a property from an object\n   * - Retrieve a part of a string\n   * - Retrieve a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @return {Object | Array | Matrix | string} Returns the subset\n   */\n\n  return function access(object, index) {\n    try {\n      if (Array.isArray(object)) {\n        return subset(object, index);\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index);\n      } else if (typeof object === 'string') {\n        // TODO: move getStringSubset into a separate util file, use that\n        return subset(object, index);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw new TypeError('Cannot apply a numeric index as object property');\n        }\n\n        return getSafeProperty(object, index.getObjectProperty());\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}\n\nexports.factory = factory;","\"use strict\";\n\n// TODO: remove these polyfills as soon as we have a build process that transpiles the code to ES5\n// Polyfill for IE 11 (Number.isFinite is used in `complex.js`)\n// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\nNumber.isFinite = Number.isFinite || function (value) {\n  return typeof value === 'number' && isFinite(value);\n}; // Polyfill for IE 11\n// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\n\n\nNumber.isNaN = Number.isNaN || function (value) {\n  return value !== value; // eslint-disable-line no-self-compare\n};","'use strict';\n\nvar operators = require('../operators');\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var mathTypeOf = load(require('../../function/utils/typeof'));\n  /**\n   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'\n   *\n   * @param {Node} condition   Condition, must result in a boolean\n   * @param {Node} trueExpr    Expression evaluated when condition is true\n   * @param {Node} falseExpr   Expression evaluated when condition is true\n   *\n   * @constructor ConditionalNode\n   * @extends {Node}\n   */\n\n  function ConditionalNode(condition, trueExpr, falseExpr) {\n    if (!(this instanceof ConditionalNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!type.isNode(condition)) throw new TypeError('Parameter condition must be a Node');\n    if (!type.isNode(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');\n    if (!type.isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');\n    this.condition = condition;\n    this.trueExpr = trueExpr;\n    this.falseExpr = falseExpr;\n  }\n\n  ConditionalNode.prototype = new Node();\n  ConditionalNode.prototype.type = 'ConditionalNode';\n  ConditionalNode.prototype.isConditionalNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConditionalNode.prototype._compile = function (math, argNames) {\n    var evalCondition = this.condition._compile(math, argNames);\n\n    var evalTrueExpr = this.trueExpr._compile(math, argNames);\n\n    var evalFalseExpr = this.falseExpr._compile(math, argNames);\n\n    return function evalConditionalNode(scope, args, context) {\n      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConditionalNode.prototype.forEach = function (callback) {\n    callback(this.condition, 'condition', this);\n    callback(this.trueExpr, 'trueExpr', this);\n    callback(this.falseExpr, 'falseExpr', this);\n  };\n  /**\n   * Create a new ConditionalNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ConditionalNode} Returns a transformed copy of the node\n   */\n\n\n  ConditionalNode.prototype.map = function (callback) {\n    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConditionalNode}\n   */\n\n\n  ConditionalNode.prototype.clone = function () {\n    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConditionalNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode\n    // or have lower or equal precedence\n    // NOTE: enclosing all OperatorNodes in parentheses is a decision\n    // purely based on aesthetics and readability\n\n    var condition = this.condition.toString(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n\n    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n      condition = '(' + condition + ')';\n    }\n\n    var trueExpr = this.trueExpr.toString(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n      trueExpr = '(' + trueExpr + ')';\n    }\n\n    var falseExpr = this.falseExpr.toString(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n      falseExpr = '(' + falseExpr + ')';\n    }\n\n    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConditionalNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConditionalNode',\n      condition: this.condition,\n      trueExpr: this.trueExpr,\n      falseExpr: this.falseExpr\n    };\n  };\n  /**\n   * Instantiate an ConditionalNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ConditionalNode\", \"condition\": ..., \"trueExpr\": ..., \"falseExpr\": ...}`,\n   *                       where mathjs is optional\n   * @returns {ConditionalNode}\n   */\n\n\n  ConditionalNode.fromJSON = function (json) {\n    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConditionalNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode\n    // or have lower or equal precedence\n    // NOTE: enclosing all OperatorNodes in parentheses is a decision\n    // purely based on aesthetics and readability\n\n    var condition = this.condition.toHTML(options);\n    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);\n\n    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {\n      condition = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + condition + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var trueExpr = this.trueExpr.toHTML(options);\n    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {\n      trueExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + trueExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    var falseExpr = this.falseExpr.toHTML(options);\n    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);\n\n    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {\n      falseExpr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + falseExpr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return condition + '<span class=\"math-operator math-conditional-operator\">?</span>' + trueExpr + '<span class=\"math-operator math-conditional-operator\">:</span>' + falseExpr;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConditionalNode.prototype._toTex = function (options) {\n    return '\\\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\\\quad{\\\\text{if }\\\\;' + this.condition.toTex(options) + '}\\\\\\\\{' + this.falseExpr.toTex(options) + '}, &\\\\quad{\\\\text{otherwise}}\\\\end{cases}';\n  };\n  /**\n   * Test whether a condition is met\n   * @param {*} condition\n   * @returns {boolean} true if condition is true or non-zero, else false\n   */\n\n\n  function testCondition(condition) {\n    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {\n      return !!condition;\n    }\n\n    if (condition) {\n      if (type.isBigNumber(condition)) {\n        return !condition.isZero();\n      }\n\n      if (type.isComplex(condition)) {\n        return !!(condition.re || condition.im);\n      }\n\n      if (type.isUnit(condition)) {\n        return !!condition.value;\n      }\n    }\n\n    if (condition === null || condition === undefined) {\n      return false;\n    }\n\n    throw new TypeError('Unsupported type of condition \"' + mathTypeOf(condition) + '\"');\n  }\n\n  return ConditionalNode;\n}\n\nexports.name = 'ConditionalNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar isMatrix = require('./isMatrix');\n/**\n * Recursively loop over all elements in a given multi dimensional array\n * and invoke the callback on each of the elements.\n * @param {Array | Matrix} array\n * @param {Function} callback     The callback method is invoked with one\n *                                parameter: the current element in the array\n */\n\n\nmodule.exports = function deepForEach(array, callback) {\n  if (isMatrix(array)) {\n    array = array.valueOf();\n  }\n\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    } else {\n      callback(value);\n    }\n  }\n};","'use strict';\n\nvar util = require('../../utils/index');\n\nvar object = util.object;\nvar string = util.string;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var unaryMinus = load(require('../arithmetic/unaryMinus'));\n  var lup = load(require('../algebra/decomposition/lup'));\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n\n  var det = typed('det', {\n    'any': function any(x) {\n      return object.clone(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n\n      if (type.isMatrix(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n\n      switch (size.length) {\n        case 0:\n          // scalar\n          return object.clone(x);\n\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return object.clone(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            return _det(x.clone().valueOf(), rows, cols);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + string.format(size) + ')');\n      }\n    }\n  });\n  det.toTex = {\n    1: \"\\\\det\\\\left(${args[0]}\\\\right)\"\n  };\n  return det;\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return object.clone(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Compute the LU decomposition\n      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)\n\n      var _det2 = decomp.U[0][0];\n\n      for (var _i = 1; _i < rows; _i++) {\n        _det2 = multiply(_det2, decomp.U[_i][_i]);\n      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.\n      // This can be determined by counting the cycles. This is roughly a linear time algorithm.\n\n\n      var evenCycles = 0;\n      var i = 0;\n      var visited = [];\n\n      while (true) {\n        while (visited[i]) {\n          i++;\n        }\n\n        if (i >= rows) break;\n        var j = i;\n        var cycleLen = 0;\n\n        while (!visited[decomp.p[j]]) {\n          visited[decomp.p[j]] = true;\n          j = decomp.p[j];\n          cycleLen++;\n        }\n\n        if (cycleLen % 2 === 0) {\n          evenCycles++;\n        }\n      }\n\n      return evenCycles % 2 === 0 ? _det2 : unaryMinus(_det2);\n    }\n  }\n}\n\nexports.name = 'det';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar hasOwnProperty = require('./object').hasOwnProperty;\n/**\n * Get a property of a plain object\n * Throws an error in case the object is not a plain object or the\n * property is not defined on the object itself\n * @param {Object} object\n * @param {string} prop\n * @return {*} Returns the property value when safe\n */\n\n\nfunction getSafeProperty(object, prop) {\n  // only allow getting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    return object[prop];\n  }\n\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\n * Set a property on a plain object.\n * Throws an error in case the object is not a plain object or the\n * property would override an inherited property like .constructor or .toString\n * @param {Object} object\n * @param {string} prop\n * @param {*} value\n * @return {*} Returns the value\n */\n// TODO: merge this function into access.js?\n\n\nfunction setSafeProperty(object, prop, value) {\n  // only allow setting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    object[prop] = value;\n    return value;\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\n * Test whether a property is safe to use for an object.\n * For example .toString and .constructor are not safe\n * @param {string} prop\n * @return {boolean} Returns true when safe\n */\n\n\nfunction isSafeProperty(object, prop) {\n  if (!object || _typeof(object) !== 'object') {\n    return false;\n  } // SAFE: whitelisted\n  // e.g length\n\n\n  if (hasOwnProperty(safeNativeProperties, prop)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (prop in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (prop in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n/**\n * Validate whether a method is safe.\n * Throws an error when that's not the case.\n * @param {Object} object\n * @param {string} method\n */\n// TODO: merge this function into assign.js?\n\n\nfunction validateSafeMethod(object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n}\n/**\n * Check whether a method is safe.\n * Throws an error when that's not the case (for example for `constructor`).\n * @param {Object} object\n * @param {string} method\n * @return {boolean} Returns true when safe, false otherwise\n */\n\n\nfunction isSafeMethod(object, method) {\n  if (!object || typeof object[method] !== 'function') {\n    return false;\n  } // UNSAFE: ghosted\n  // e.g overridden toString\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\n\n\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\n    return false;\n  } // SAFE: whitelisted\n  // e.g toString\n\n\n  if (hasOwnProperty(safeNativeMethods, method)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (method in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (method in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n\nfunction isPlainObject(object) {\n  return _typeof(object) === 'object' && object && object.constructor === Object;\n}\n\nvar safeNativeProperties = {\n  length: true,\n  name: true\n};\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\nexports.getSafeProperty = getSafeProperty;\nexports.setSafeProperty = setSafeProperty;\nexports.isSafeProperty = isSafeProperty;\nexports.validateSafeMethod = validateSafeMethod;\nexports.isSafeMethod = isSafeMethod;\nexports.isPlainObject = isPlainObject;","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  var algorithm02 = function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (SparseMatrix)\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update C(i,j)\n\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero\n\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  return algorithm02;\n}\n\nexports.name = 'algorithm02';\nexports.factory = factory;","'use strict';\n/**\n * Test whether a value is a Matrix\n * @param {*} x\n * @returns {boolean} returns true with input is a Matrix\n *                    (like a DenseMatrix or SparseMatrix)\n */\n\nmodule.exports = function isMatrix(x) {\n  return x && x.constructor.prototype.isMatrix || false;\n};","'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    'number': function number(x) {\n      return x;\n    },\n    'string': function string(x) {\n      if (x === 'NaN') return NaN;\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      return num;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.toNumber();\n    },\n    'Fraction': function Fraction(x) {\n      return x.valueOf();\n    },\n    'Unit': function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    'null': function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, number);\n    }\n  });\n  number.toTex = {\n    0: \"0\",\n    1: \"\\\\left(${args[0]}\\\\right)\",\n    2: \"\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)\"\n  };\n  return number;\n}\n\nexports.name = 'number';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n\n\n  var unaryMinus = typed('unaryMinus', {\n    'number': function number(x) {\n      return -x;\n    },\n    'Complex': function Complex(x) {\n      return x.neg();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.neg();\n    },\n    'Fraction': function Fraction(x) {\n      return x.neg();\n    },\n    'Unit': function Unit(x) {\n      var res = x.clone();\n      res.value = unaryMinus(x.value);\n      return res;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryMinus(0) = 0\n      return deepMap(x, unaryMinus, true);\n    } // TODO: add support for string\n\n  });\n  unaryMinus.toTex = {\n    1: \"\".concat(latex.operators['unaryMinus'], \"\\\\left(${args[0]}\\\\right)\")\n  };\n  return unaryMinus;\n}\n\nexports.name = 'unaryMinus';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var getTypeOf = load(require('../function/utils/typeof'));\n  var validInputTypes = {\n    'string': true,\n    'number': true,\n    'BigNumber': true,\n    'Fraction': true // Load the conversion functions for each output type\n\n  };\n  var validOutputTypes = {\n    'number': load(require('./number')),\n    'BigNumber': load(require('./bignumber/function/bignumber')),\n    'Fraction': load(require('./fraction/function/fraction'))\n    /**\n     * Convert a numeric value to a specific type: number, BigNumber, or Fraction\n     *\n     * @param {string | number | BigNumber | Fraction } value\n     * @param {'number' | 'BigNumber' | 'Fraction'} outputType\n     * @return {number | BigNumber | Fraction} Returns an instance of the\n     *                                         numeric in the requested type\n     */\n\n  };\n\n  var numeric = function numeric(value, outputType) {\n    var inputType = getTypeOf(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n\n  numeric.toTex = function (node, options) {\n    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.\n    return node.args[0].toTex();\n  };\n\n  return numeric;\n} // FIXME: expose numeric in the math namespace after we've decided on a name and have written proper docs for this function. See https://github.com/josdejong/mathjs/pull/1270\n// exports.name = 'type._numeric'\n\n\nexports.path = 'type';\nexports.name = '_numeric';\nexports.factory = factory;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar resize = require('../../utils/array').resize;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Create a matrix filled with zeros. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.zeros(m)\n   *    math.zeros(m, format)\n   *    math.zeros(m, n)\n   *    math.zeros(m, n, format)\n   *    math.zeros([m, n])\n   *    math.zeros([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.zeros(3)                  // returns [0, 0, 0]\n   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]\n   *    math.zeros(3, 'dense')         // returns [0, 0, 0]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]\n   *\n   * See also:\n   *\n   *    ones, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix}           A matrix filled with zeros\n   */\n\n  var zeros = typed('zeros', {\n    '': function _() {\n      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');\n    },\n    // math.zeros(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _zeros(size, format);\n      } else if (config.matrix === 'Array') {\n        return _zeros(size);\n      } else {\n        return _zeros(size, 'default');\n      }\n    },\n    'Array': _zeros,\n    'Matrix': function Matrix(size) {\n      var format = size.storage();\n      return _zeros(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _zeros(size.valueOf(), format);\n    }\n  });\n  zeros.toTex = undefined; // use default template\n\n  return zeros;\n  /**\n   * Create an Array or Matrix with zeros\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _zeros(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (type.isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function zeros must be positive integers');\n      }\n    });\n  }\n} // TODO: zeros contains almost the same code as ones. Reuse this?\n\n\nexports.name = 'zeros';\nexports.factory = factory;","'use strict';\n\nvar map = require('../../utils/array').map;\n\nvar escape = require('../../utils/string').escape;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var Range = load(require('../../type/matrix/Range'));\n  var isArray = Array.isArray;\n  /**\n   * @constructor IndexNode\n   * @extends Node\n   *\n   * Describes a subset of a matrix or an object property.\n   * Cannot be used on its own, needs to be used within an AccessorNode or\n   * AssignmentNode.\n   *\n   * @param {Node[]} dimensions\n   * @param {boolean} [dotNotation=false]  Optional property describing whether\n   *                                       this index was written using dot\n   *                                       notation like `a.b`, or using bracket\n   *                                       notation like `a[\"b\"]` (default).\n   *                                       Used to stringify an IndexNode.\n   */\n\n  function IndexNode(dimensions, dotNotation) {\n    if (!(this instanceof IndexNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.dimensions = dimensions;\n    this.dotNotation = dotNotation || false; // validate input\n\n    if (!isArray(dimensions) || !dimensions.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');\n    }\n\n    if (this.dotNotation && !this.isObjectProperty()) {\n      throw new Error('dotNotation only applicable for object properties');\n    } // TODO: deprecated since v3, remove some day\n\n\n    var deprecated = function deprecated() {\n      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');\n    };\n\n    Object.defineProperty(this, 'object', {\n      get: deprecated,\n      set: deprecated\n    });\n  }\n\n  IndexNode.prototype = new Node();\n  IndexNode.prototype.type = 'IndexNode';\n  IndexNode.prototype.isIndexNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  IndexNode.prototype._compile = function (math, argNames) {\n    // TODO: implement support for bignumber (currently bignumbers are silently\n    //       reduced to numbers when changing the value to zero-based)\n    // TODO: Optimization: when the range values are ConstantNodes,\n    //       we can beforehand resolve the zero-based value\n    // optimization for a simple object property\n    var evalDimensions = map(this.dimensions, function (range, i) {\n      if (type.isRangeNode(range)) {\n        if (range.needsEnd()) {\n          // create a range containing end (like '4:end')\n          var childArgNames = Object.create(argNames);\n          childArgNames['end'] = true;\n\n          var evalStart = range.start._compile(math, childArgNames);\n\n          var evalEnd = range.end._compile(math, childArgNames);\n\n          var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {\n            return 1;\n          };\n          return function evalDimension(scope, args, context) {\n            var size = math.size(context).valueOf();\n            var childArgs = Object.create(args);\n            childArgs['end'] = size[i];\n            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));\n          };\n        } else {\n          // create range\n          var _evalStart = range.start._compile(math, argNames);\n\n          var _evalEnd = range.end._compile(math, argNames);\n\n          var _evalStep = range.step ? range.step._compile(math, argNames) : function () {\n            return 1;\n          };\n\n          return function evalDimension(scope, args, context) {\n            return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));\n          };\n        }\n      } else if (type.isSymbolNode(range) && range.name === 'end') {\n        // SymbolNode 'end'\n        var _childArgNames = Object.create(argNames);\n\n        _childArgNames['end'] = true;\n\n        var evalRange = range._compile(math, _childArgNames);\n\n        return function evalDimension(scope, args, context) {\n          var size = math.size(context).valueOf();\n          var childArgs = Object.create(args);\n          childArgs['end'] = size[i];\n          return evalRange(scope, childArgs, context);\n        };\n      } else {\n        // ConstantNode\n        var _evalRange = range._compile(math, argNames);\n\n        return function evalDimension(scope, args, context) {\n          return _evalRange(scope, args, context);\n        };\n      }\n    });\n    return function evalIndexNode(scope, args, context) {\n      var dimensions = map(evalDimensions, function (evalDimension) {\n        return evalDimension(scope, args, context);\n      });\n      return math.index.apply(math, dimensions);\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  IndexNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.dimensions.length; i++) {\n      callback(this.dimensions[i], 'dimensions[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new IndexNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {IndexNode} Returns a transformed copy of the node\n   */\n\n\n  IndexNode.prototype.map = function (callback) {\n    var dimensions = [];\n\n    for (var i = 0; i < this.dimensions.length; i++) {\n      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));\n    }\n\n    return new IndexNode(dimensions);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {IndexNode}\n   */\n\n\n  IndexNode.prototype.clone = function () {\n    return new IndexNode(this.dimensions.slice(0));\n  };\n  /**\n   * Test whether this IndexNode contains a single property name\n   * @return {boolean}\n   */\n\n\n  IndexNode.prototype.isObjectProperty = function () {\n    return this.dimensions.length === 1 && type.isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';\n  };\n  /**\n   * Returns the property name if IndexNode contains a property.\n   * If not, returns null.\n   * @return {string | null}\n   */\n\n\n  IndexNode.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this.dimensions[0].value : null;\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  IndexNode.prototype._toString = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  IndexNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'IndexNode',\n      dimensions: this.dimensions,\n      dotNotation: this.dotNotation\n    };\n  };\n  /**\n   * Instantiate an IndexNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"IndexNode\", dimensions: [...], dotNotation: false}`,\n   *                       where mathjs is optional\n   * @returns {IndexNode}\n   */\n\n\n  IndexNode.fromJSON = function (json) {\n    return new IndexNode(json.dimensions, json.dotNotation);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  IndexNode.prototype.toHTML = function (options) {\n    // format the parameters like \"[1, 0:5]\"\n    var dimensions = [];\n\n    for (var i = 0; i < this.dimensions.length; i++) {\n      dimensions[i] = this.dimensions[i].toHTML();\n    }\n\n    if (this.dotNotation) {\n      return '<span class=\"math-operator math-accessor-operator\">.</span>' + '<span class=\"math-symbol math-property\">' + escape(this.getObjectProperty()) + '</span>';\n    } else {\n      return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + dimensions.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n    }\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  IndexNode.prototype._toTex = function (options) {\n    var dimensions = this.dimensions.map(function (range) {\n      return range.toTex(options);\n    });\n    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';\n  }; // helper function to create a Range from start, step and end\n\n\n  function createRange(start, end, step) {\n    return new Range(type.isBigNumber(start) ? start.toNumber() : start, type.isBigNumber(end) ? end.toNumber() : end, type.isBigNumber(step) ? step.toNumber() : step);\n  }\n\n  return IndexNode;\n}\n\nexports.name = 'IndexNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar clone = require('../../../utils/object').clone;\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n\n  var algorithm14 = function algorithm14(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix\n\n    return new DenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  }; // recursive function\n\n\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n\n    return cv;\n  }\n\n  return algorithm14;\n}\n\nexports.name = 'algorithm14';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [require('./and'), require('./not'), require('./or'), require('./xor')];","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n\n\n  var not = typed('not', {\n    'number': function number(x) {\n      return !x;\n    },\n    'Complex': function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    'Unit': function Unit(x) {\n      return x.value !== null ? not(x.value) : true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, not);\n    }\n  });\n  not.toTex = {\n    1: latex.operators['not'] + \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return not;\n}\n\nexports.name = 'not';\nexports.factory = factory;","'use strict'; // Reserved keywords not allowed to use in the parser\n\nmodule.exports = {\n  end: true\n};","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar size = require('../../utils/array').size;\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var identity = load(require('../matrix/identity'));\n  var multiply = load(require('./multiply'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var fraction = load(require('../../type/fraction/function/fraction'));\n  var number = load(require('../../type/number'));\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   * Matrix exponentiation is supported for square matrices `x`, and positive\n   * integer exponents `y`.\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n\n  var pow = typed('pow', {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.d !== 1) {\n        if (config.predictable) {\n          throw new Error('Function pow does not support non-integer exponents for fractions.');\n        } else {\n          return _pow(x.valueOf(), y.valueOf());\n        }\n      } else {\n        return x.pow(y);\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {} // fraction() throws an error if y is Infinity, etc.\n      // Unable to express y as a fraction, so continue on\n\n    } // x^Infinity === 0 if -1 < x < 1\n    // A real number 0 is returned instead of complex(0)\n\n\n    if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n      return 0;\n    } // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n\n\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return Math.pow(x, y);\n    } else {\n      return new type.Complex(x, 0).pow(y, 0);\n    }\n  }\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Array}\n   * @private\n   */\n\n\n  function _powArray(x, y) {\n    if (!isInteger(y) || y < 0) {\n      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n    } // verify that A is a 2 dimensional square matrix\n\n\n    var s = size(x);\n\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n\n    var res = identity(s[0]).valueOf();\n    var px = x;\n\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n\n      y >>= 1;\n      px = multiply(px, px);\n    }\n\n    return res;\n  }\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n\n  pow.toTex = {\n    2: \"\\\\left(${args[0]}\\\\right)\".concat(latex.operators['pow'], \"{${args[1]}}\")\n  };\n  return pow;\n}\n\nexports.name = 'pow';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var getType = load(require('../../utils/typeof'));\n  /**\n   * Improve error messages for statistics functions. Errors are typically\n   * thrown in an internally used function like larger, causing the error\n   * not to mention the function (like max) which is actually used by the user.\n   *\n   * @param {Error} err\n   * @param {String} fnName\n   * @param {*} [value]\n   * @return {Error}\n   */\n\n  return function improveErrorMessage(err, fnName, value) {\n    // TODO: add information with the index (also needs transform in expression parser)\n    var details;\n\n    if (String(err).indexOf('Unexpected type') !== -1) {\n      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n      return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n    }\n\n    if (String(err).indexOf('complex numbers') !== -1) {\n      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n      return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n    }\n\n    return err;\n  };\n}\n\nexports.factory = factory;","'use strict';\n\nvar operators = require('../operators');\n\nvar latex = require('../../utils/latex');\n\nvar escape = require('../../utils/string').escape;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n\n  var getSafeProperty = require('../../utils/customs').getSafeProperty;\n  /**\n   * A node representing a chained conditional expression, such as 'x > y > z'\n   *\n   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters\n   * @param {Node[]} params   The parameters that will be compared\n   *\n   * @constructor RelationalNode\n   * @extends {Node}\n   */\n\n\n  function RelationalNode(conditionals, params) {\n    if (!(this instanceof RelationalNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');\n    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');\n    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');\n    this.conditionals = conditionals;\n    this.params = params;\n  }\n\n  RelationalNode.prototype = new Node();\n  RelationalNode.prototype.type = 'RelationalNode';\n  RelationalNode.prototype.isRelationalNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  RelationalNode.prototype._compile = function (math, argNames) {\n    var self = this;\n    var compiled = this.params.map(function (p) {\n      return p._compile(math, argNames);\n    });\n    return function evalRelationalNode(scope, args, context) {\n      var evalLhs;\n      var evalRhs = compiled[0](scope, args, context);\n\n      for (var i = 0; i < self.conditionals.length; i++) {\n        evalLhs = evalRhs;\n        evalRhs = compiled[i + 1](scope, args, context);\n        var condFn = getSafeProperty(math, self.conditionals[i]);\n\n        if (!condFn(evalLhs, evalRhs)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  RelationalNode.prototype.forEach = function (callback) {\n    var _this = this;\n\n    this.params.forEach(function (n, i) {\n      return callback(n, 'params[' + i + ']', _this);\n    }, this);\n  };\n  /**\n   * Create a new RelationalNode having its childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RelationalNode} Returns a transformed copy of the node\n   */\n\n\n  RelationalNode.prototype.map = function (callback) {\n    var _this2 = this;\n\n    return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {\n      return _this2._ifNode(callback(n, 'params[' + i + ']', _this2));\n    }, this));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RelationalNode}\n   */\n\n\n  RelationalNode.prototype.clone = function () {\n    return new RelationalNode(this.conditionals, this.params);\n  };\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = operators.getPrecedence(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n    });\n    var operatorMap = {\n      'equal': '==',\n      'unequal': '!=',\n      'smaller': '<',\n      'larger': '>',\n      'smallerEq': '<=',\n      'largerEq': '>='\n    };\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  RelationalNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'RelationalNode',\n      conditionals: this.conditionals,\n      params: this.params\n    };\n  };\n  /**\n   * Instantiate a RelationalNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"RelationalNode\", \"condition\": ..., \"trueExpr\": ..., \"falseExpr\": ...}`,\n   *                       where mathjs is optional\n   * @returns {RelationalNode}\n   */\n\n\n  RelationalNode.fromJSON = function (json) {\n    return new RelationalNode(json.conditionals, json.params);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = operators.getPrecedence(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n    });\n    var operatorMap = {\n      'equal': '==',\n      'unequal': '!=',\n      'smaller': '<',\n      'larger': '>',\n      'smallerEq': '<=',\n      'largerEq': '>='\n    };\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RelationalNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var precedence = operators.getPrecedence(this, parenthesis);\n    var paramStrings = this.params.map(function (p, index) {\n      var paramPrecedence = operators.getPrecedence(p, parenthesis);\n      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n    });\n    var ret = paramStrings[0];\n\n    for (var i = 0; i < this.conditionals.length; i++) {\n      ret += latex.operators[this.conditionals[i]] + paramStrings[i + 1];\n    }\n\n    return ret;\n  };\n\n  return RelationalNode;\n}\n\nexports.name = 'RelationalNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar objectUtils = require('../object');\n/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\n\nexports.format = function (value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return exports.toFixed(value, precision);\n\n    case 'exponential':\n      return exports.toExponential(value, precision);\n\n    case 'auto':\n      // TODO: clean up some day. Deprecated since: 2018-01-24\n      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0\n      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {\n        var fixedOptions = objectUtils.map(options, function (x) {\n          return x;\n        });\n        fixedOptions.exponential = undefined;\n\n        if (options.exponential.lower !== undefined) {\n          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);\n        }\n\n        if (options.exponential.upper !== undefined) {\n          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);\n        }\n\n        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));\n        return exports.format(value, fixedOptions);\n      } // determine lower and upper bound for exponential notation.\n      // TODO: implement support for upper and lower to be BigNumbers themselves\n\n\n      var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n      var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero\n\n      if (value.isZero()) return '0'; // determine whether or not to output exponential notation\n\n      var str;\n      var exp = value.e;\n\n      if (exp >= lowerExp && exp < upperExp) {\n        // normal number notation\n        str = value.toSignificantDigits(precision).toFixed();\n      } else {\n        // exponential notation\n        str = exports.toExponential(value, precision);\n      } // remove trailing zeros after the decimal point\n\n\n      return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n};\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\n\n\nexports.toExponential = function (value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n};\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=undefined] Optional number of decimals after the\n *                                       decimal point. Undefined by default.\n */\n\n\nexports.toFixed = function (value, precision) {\n  return value.toFixed(precision);\n};","'use strict';\n/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\n\nfunction ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';\n  this.stack = new Error().stack;\n}\n\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;\nmodule.exports = ArgumentsError;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var ceil = typed('ceil', {\n    'number': Math.ceil,\n    'Complex': function Complex(x) {\n      return x.ceil();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.ceil();\n    },\n    'Fraction': function Fraction(x) {\n      return x.ceil();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, ceil, true);\n    }\n  });\n  ceil.toTex = {\n    1: \"\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil\"\n  };\n  return ceil;\n}\n\nexports.name = 'ceil';\nexports.factory = factory;","'use strict';\n\nvar size = require('../../utils/array').size;\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var divide = load(require('../arithmetic/divide'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n\n  var mean = typed('mean', {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n  mean.toTex = undefined; // use default template\n\n  return mean;\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      var s = Array.isArray(array) ? size(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw improveErrorMessage(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n\n  function _mean(array) {\n    var sum = 0;\n    var num = 0;\n    deepForEach(array, function (value) {\n      try {\n        sum = add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'mean', value);\n      }\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n}\n\nexports.name = 'mean';\nexports.factory = factory;","'use strict';\n\nvar latex = require('../../utils/latex');\n\nvar escape = require('../../utils/string').escape;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed, math) {\n  var Node = load(require('./Node'));\n  /**\n   * Check whether some name is a valueless unit like \"inch\".\n   * @param {string} name\n   * @return {boolean}\n   */\n\n  function isValuelessUnit(name) {\n    return type.Unit ? type.Unit.isValuelessUnit(name) : false;\n  }\n  /**\n   * @constructor SymbolNode\n   * @extends {Node}\n   * A symbol node can hold and resolve a symbol\n   * @param {string} name\n   * @extends {Node}\n   */\n\n\n  function SymbolNode(name) {\n    if (!(this instanceof SymbolNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    this.name = name;\n  }\n\n  SymbolNode.prototype = new Node();\n  SymbolNode.prototype.type = 'SymbolNode';\n  SymbolNode.prototype.isSymbolNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  SymbolNode.prototype._compile = function (math, argNames) {\n    var name = this.name;\n\n    if (hasOwnProperty(argNames, name)) {\n      // this is a FunctionAssignment argument\n      // (like an x when inside the expression of a function assignment `f(x) = ...`)\n      return function (scope, args, context) {\n        return args[name];\n      };\n    } else if (name in math) {\n      return function (scope, args, context) {\n        return name in scope ? getSafeProperty(scope, name) : getSafeProperty(math, name);\n      };\n    } else {\n      var isUnit = isValuelessUnit(name);\n      return function (scope, args, context) {\n        return name in scope ? getSafeProperty(scope, name) : isUnit ? new type.Unit(null, name) : undef(name);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  SymbolNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs\n\n  /**\n   * Create a new SymbolNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {SymbolNode} Returns a clone of the node\n   */\n  ;\n\n  SymbolNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Throws an error 'Undefined symbol {name}'\n   * @param {string} name\n   */\n\n\n  function undef(name) {\n    throw new Error('Undefined symbol ' + name);\n  }\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {SymbolNode}\n   */\n\n\n  SymbolNode.prototype.clone = function () {\n    return new SymbolNode(this.name);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  SymbolNode.prototype._toString = function (options) {\n    return this.name;\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  SymbolNode.prototype.toHTML = function (options) {\n    var name = escape(this.name);\n\n    if (name === 'true' || name === 'false') {\n      return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n    } else if (name === 'i') {\n      return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n    } else if (name === 'Infinity') {\n      return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n    } else if (name === 'NaN') {\n      return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n    } else if (name === 'null') {\n      return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n    } else if (name === 'undefined') {\n      return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\n    }\n\n    return '<span class=\"math-symbol\">' + name + '</span>';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  SymbolNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'SymbolNode',\n      name: this.name\n    };\n  };\n  /**\n   * Instantiate a SymbolNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\n   *                       where mathjs is optional\n   * @returns {SymbolNode}\n   */\n\n\n  SymbolNode.fromJSON = function (json) {\n    return new SymbolNode(json.name);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  SymbolNode.prototype._toTex = function (options) {\n    var isUnit = false;\n\n    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\n      isUnit = true;\n    }\n\n    var symbol = latex.toSymbol(this.name, isUnit);\n\n    if (symbol[0] === '\\\\') {\n      // no space needed if the symbol starts with '\\'\n      return symbol;\n    } // the space prevents symbols from breaking stuff like '\\cdot' if it's written right before the symbol\n\n\n    return ' ' + symbol;\n  };\n\n  return SymbolNode;\n}\n\nexports.name = 'SymbolNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.factory = factory;","'use strict';\n\nvar isCollection = require('./isCollection');\n/**\n * Test whether an array contains collections\n * @param {Array} array\n * @returns {boolean} Returns true when the array contains one or multiple\n *                    collections (Arrays or Matrices). Returns false otherwise.\n */\n\n\nmodule.exports = function containsCollections(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n};","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3)             // returns false\n   *    math.larger(5, 2 + 2)         // returns true\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.larger(a, b)             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n\n\n  var larger = typed('larger', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x > y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === 1;\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return larger(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, larger);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, larger, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, larger, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, larger);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return larger(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return larger(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return larger(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, larger, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, larger, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, larger, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, larger, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, larger, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, larger, true).valueOf();\n    }\n  });\n  larger.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['larger'], \"${args[1]}\\\\right)\")\n  };\n  return larger;\n}\n\nexports.name = 'larger';\nexports.factory = factory;","'use strict';\n\nvar isMatrix = require('./isMatrix');\n/**\n * Test whether a value is a collection: an Array or Matrix\n * @param {*} x\n * @returns {boolean} isCollection\n */\n\n\nmodule.exports = function isCollection(x) {\n  return Array.isArray(x) || isMatrix(x);\n};","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var smaller = load(require('../relational/smaller'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the minimum value of a matrix or a  list of values.\n   * In case of a multi dimensional array, the minimum of the flattened array\n   * will be calculated. When `dim` is provided, the minimum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dim)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3)                  // returns 1\n   *     math.min([2, 1, 4, 3])                // returns 1\n   *\n   *     // minimum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n\n  var min = typed('min', {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n\n      return _min(args);\n    }\n  });\n  min.toTex = \"\\\\min\\\\left(${args}\\\\right)\";\n  return min;\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n\n\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    return min;\n  }\n}\n\nexports.name = 'min';\nexports.factory = factory;","'use strict';\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var access = load(require('./utils/access'));\n  /**\n   * @constructor AccessorNode\n   * @extends {Node}\n   * Access an object property or get a matrix subset\n   *\n   * @param {Node} object                 The object from which to retrieve\n   *                                      a property or subset.\n   * @param {IndexNode} index             IndexNode containing ranges\n   */\n\n  function AccessorNode(object, index) {\n    if (!(this instanceof AccessorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (!type.isNode(object)) {\n      throw new TypeError('Node expected for parameter \"object\"');\n    }\n\n    if (!type.isIndexNode(index)) {\n      throw new TypeError('IndexNode expected for parameter \"index\"');\n    }\n\n    this.object = object || null;\n    this.index = index; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AccessorNode.prototype = new Node();\n  AccessorNode.prototype.type = 'AccessorNode';\n  AccessorNode.prototype.isAccessorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AccessorNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index._compile(math, argNames);\n\n    if (this.index.isObjectProperty()) {\n      var prop = this.index.getObjectProperty();\n      return function evalAccessorNode(scope, args, context) {\n        return getSafeProperty(evalObject(scope, args, context), prop);\n      };\n    } else {\n      return function evalAccessorNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var index = evalIndex(scope, args, object); // we pass object here instead of context\n\n        return access(object, index);\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AccessorNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n    callback(this.index, 'index', this);\n  };\n  /**\n   * Create a new AccessorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AccessorNode} Returns a transformed copy of the node\n   */\n\n\n  AccessorNode.prototype.map = function (callback) {\n    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AccessorNode}\n   */\n\n\n  AccessorNode.prototype.clone = function () {\n    return new AccessorNode(this.object, this.index);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n\n    if (needParenthesis(this.object)) {\n      object = '(' + object + ')';\n    }\n\n    return object + this.index.toString(options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n\n    if (needParenthesis(this.object)) {\n      object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + this.index.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AccessorNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n\n    if (needParenthesis(this.object)) {\n      object = \"\\\\left(' + object + '\\\\right)\";\n    }\n\n    return object + this.index.toTex(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AccessorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AccessorNode',\n      object: this.object,\n      index: this.index\n    };\n  };\n  /**\n   * Instantiate an AccessorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n   *                       where mathjs is optional\n   * @returns {AccessorNode}\n   */\n\n\n  AccessorNode.fromJSON = function (json) {\n    return new AccessorNode(json.object, json.index);\n  };\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(type.isAccessorNode(node) || type.isArrayNode(node) || type.isConstantNode(node) || type.isFunctionNode(node) || type.isObjectNode(node) || type.isParenthesisNode(node) || type.isSymbolNode(node));\n  }\n\n  return AccessorNode;\n}\n\nexports.name = 'AccessorNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar Emitter = require('tiny-emitter');\n/**\n * Extend given object with emitter functions `on`, `off`, `once`, `emit`\n * @param {Object} obj\n * @return {Object} obj\n */\n\n\nexports.mixin = function (obj) {\n  // create event emitter\n  var emitter = new Emitter(); // bind methods to obj (we don't want to expose the emitter.e Array...)\n\n  obj.on = emitter.on.bind(emitter);\n  obj.off = emitter.off.bind(emitter);\n  obj.once = emitter.once.bind(emitter);\n  obj.emit = emitter.emit.bind(emitter);\n  return obj;\n};","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar keywords = require('../keywords');\n\nvar deepEqual = require('../../utils/object').deepEqual;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory(type, config, load, typed, math) {\n  /**\n   * Node\n   */\n  function Node() {\n    if (!(this instanceof Node)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Evaluate the node\n   * @param {Object} [scope]  Scope to read/write variables\n   * @return {*}              Returns the result\n   */\n\n\n  Node.prototype.eval = function (scope) {\n    return this.compile().eval(scope);\n  };\n\n  Node.prototype.type = 'Node';\n  Node.prototype.isNode = true;\n  Node.prototype.comment = '';\n  /**\n   * Compile the node into an optimized, evauatable JavaScript function\n   * @return {{eval: function([Object])}} expr  Returns an object with a function 'eval',\n   *                                  which can be invoked as expr.eval([scope: Object]),\n   *                                  where scope is an optional object with\n   *                                  variables.\n   */\n\n  Node.prototype.compile = function () {\n    var expr = this._compile(math.expression.mathWithTransform, {});\n\n    var args = {};\n    var context = null;\n    return {\n      eval: function evalNode(scope) {\n        var s = scope || {};\n\n        _validateScope(s);\n\n        return expr(s, args, context);\n      }\n    };\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  Node.prototype._compile = function (math, argNames) {\n    throw new Error('Method _compile should be implemented by type ' + this.type);\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  Node.prototype.forEach = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run forEach on a Node interface');\n  };\n  /**\n   * Create a new Node having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  Node.prototype.map = function (callback) {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot run map on a Node interface');\n  };\n  /**\n   * Validate whether an object is a Node, for use with map\n   * @param {Node} node\n   * @returns {Node} Returns the input if it's a node, else throws an Error\n   * @protected\n   */\n\n\n  Node.prototype._ifNode = function (node) {\n    if (!type.isNode(node)) {\n      throw new TypeError('Callback function must return a Node');\n    }\n\n    return node;\n  };\n  /**\n   * Recursively traverse all nodes in a node tree. Executes given callback for\n   * this node and each of its child nodes.\n   * @param {function(node: Node, path: string, parent: Node)} callback\n   *          A callback called for every node in the node tree.\n   */\n\n\n  Node.prototype.traverse = function (callback) {\n    // execute callback for itself\n    callback(this, null, null); // eslint-disable-line standard/no-callback-literal\n    // recursively traverse over all childs of a node\n\n    function _traverse(node, callback) {\n      node.forEach(function (child, path, parent) {\n        callback(child, path, parent);\n\n        _traverse(child, callback);\n      });\n    }\n\n    _traverse(this, callback);\n  };\n  /**\n   * Recursively transform a node tree via a transform function.\n   *\n   * For example, to replace all nodes of type SymbolNode having name 'x' with a\n   * ConstantNode with value 2:\n   *\n   *     const res = Node.transform(function (node, path, parent) {\n   *       if (node && node.isSymbolNode) && (node.name === 'x')) {\n   *         return new ConstantNode(2)\n   *       }\n   *       else {\n   *         return node\n   *       }\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *          A mapping function accepting a node, and returning\n   *          a replacement for the node or the original node.\n   *          Signature: callback(node: Node, index: string, parent: Node) : Node\n   * @return {Node} Returns the original node or its replacement\n   */\n\n\n  Node.prototype.transform = function (callback) {\n    // traverse over all childs\n    function _transform(node, callback) {\n      return node.map(function (child, path, parent) {\n        var replacement = callback(child, path, parent);\n        return _transform(replacement, callback);\n      });\n    }\n\n    var replacement = callback(this, null, null); // eslint-disable-line standard/no-callback-literal\n\n    return _transform(replacement, callback);\n  };\n  /**\n   * Find any node in the node tree matching given filter function. For example, to\n   * find all nodes of type SymbolNode having name 'x':\n   *\n   *     const results = Node.filter(function (node) {\n   *       return (node && node.isSymbolNode) && (node.name === 'x')\n   *     })\n   *\n   * @param {function(node: Node, path: string, parent: Node) : Node} callback\n   *            A test function returning true when a node matches, and false\n   *            otherwise. Function signature:\n   *            callback(node: Node, index: string, parent: Node) : boolean\n   * @return {Node[]} nodes       An array with nodes matching given filter criteria\n   */\n\n\n  Node.prototype.filter = function (callback) {\n    var nodes = [];\n    this.traverse(function (node, path, parent) {\n      if (callback(node, path, parent)) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  }; // TODO: deprecated since version 1.1.0, remove this some day\n\n\n  Node.prototype.find = function () {\n    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');\n  }; // TODO: deprecated since version 1.1.0, remove this some day\n\n\n  Node.prototype.match = function () {\n    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');\n  };\n  /**\n   * Create a shallow clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.clone = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('Cannot clone a Node interface');\n  };\n  /**\n   * Create a deep clone of this node\n   * @return {Node}\n   */\n\n\n  Node.prototype.cloneDeep = function () {\n    return this.map(function (node) {\n      return node.cloneDeep();\n    });\n  };\n  /**\n   * Deep compare this node with another node.\n   * @param {Node} other\n   * @return {boolean} Returns true when both nodes are of the same type and\n   *                   contain the same values (as do their childs)\n   */\n\n\n  Node.prototype.equals = function (other) {\n    return other ? deepEqual(this, other) : false;\n  };\n  /**\n   * Get string representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toString = function (options) {\n    var customString;\n\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          break;\n\n        case 'function':\n          customString = options.handler(this, options);\n          break;\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this._toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * Both .toJSON() and the static .fromJSON(json) should be implemented by all\n   * implementations of Node\n   * @returns {Object}\n   */\n\n\n  Node.prototype.toJSON = function () {\n    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);\n  };\n  /**\n   * Get HTML representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\" or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toHTML = function (options) {\n    var customString;\n\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          break;\n\n        case 'function':\n          customString = options.handler(this, options);\n          break;\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    }\n\n    return this.toHTML(options);\n  };\n  /**\n   * Internal function to generate the string output.\n   * This has to be implemented by every Node\n   *\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toString = function () {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toString not implemented for ' + this.type);\n  };\n  /**\n   * Get LaTeX representation. (wrapper function)\n   *\n   * This function can get an object of the following form:\n   * {\n   *    handler: //This can be a callback function of the form\n   *             // \"function callback(node, options)\"or\n   *             // a map that maps function names (used in FunctionNodes)\n   *             // to callbacks\n   *    parenthesis: \"keep\" //the parenthesis option (This is optional)\n   * }\n   *\n   * @param {Object} [options]\n   * @return {string}\n   */\n\n\n  Node.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && _typeof(options) === 'object') {\n      switch (_typeof(options.handler)) {\n        case 'object':\n        case 'undefined':\n          break;\n\n        case 'function':\n          customTex = options.handler(this, options);\n          break;\n\n        default:\n          throw new TypeError('Object or function expected as callback');\n      }\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    }\n\n    return this._toTex(options);\n  };\n  /**\n   * Internal function to generate the LaTeX output.\n   * This has to be implemented by every Node\n   *\n   * @param {Object} [options]\n   * @throws {Error}\n   */\n\n\n  Node.prototype._toTex = function (options) {\n    // must be implemented by each of the Node implementations\n    throw new Error('_toTex not implemented for ' + this.type);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  Node.prototype.getIdentifier = function () {\n    return this.type;\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} node\n   **/\n\n\n  Node.prototype.getContent = function () {\n    return this;\n  };\n  /**\n   * Validate the symbol names of a scope.\n   * Throws an error when the scope contains an illegal symbol.\n   * @param {Object} scope\n   */\n\n\n  function _validateScope(scope) {\n    for (var symbol in scope) {\n      if (hasOwnProperty(scope, symbol)) {\n        if (symbol in keywords) {\n          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');\n        }\n      }\n    }\n  }\n\n  return Node;\n}\n\nexports.name = 'Node';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.factory = factory;","'use strict';\n\nexports.array = require('./array');\nexports['boolean'] = require('./boolean');\nexports['function'] = require('./function');\nexports.number = require('./number');\nexports.object = require('./object');\nexports.string = require('./string');\nexports.emitter = require('./emitter');","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  var bignumber = typed('bignumber', {\n    '': function _() {\n      return new type.BigNumber(0);\n    },\n    'number': function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new type.BigNumber(x + '');\n    },\n    'string': function string(x) {\n      return new type.BigNumber(x);\n    },\n    'BigNumber': function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    'Fraction': function Fraction(x) {\n      return new type.BigNumber(x.n).div(x.d).times(x.s);\n    },\n    'null': function _null(x) {\n      return new type.BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, bignumber);\n    }\n  });\n  bignumber.toTex = {\n    0: '0',\n    1: \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return bignumber;\n}\n\nexports.name = 'bignumber';\nexports.factory = factory;","'use strict';\n\nvar array = require('../../utils/array');\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Create a 2-dimensional identity matrix with size m x n or n x n.\n   * The matrix has ones on the diagonal and zeros elsewhere.\n   *\n   * Syntax:\n   *\n   *    math.identity(n)\n   *    math.identity(n, format)\n   *    math.identity(m, n)\n   *    math.identity(m, n, format)\n   *    math.identity([m, n])\n   *    math.identity([m, n], format)\n   *\n   * Examples:\n   *\n   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]\n   *\n   * See also:\n   *\n   *    diag, ones, zeros, size, range\n   *\n   * @param {...number | Matrix | Array} size   The size for the matrix\n   * @param {string} [format]                   The Matrix storage format\n   *\n   * @return {Matrix | Array | number} A matrix with ones on the diagonal.\n   */\n\n  var identity = typed('identity', {\n    '': function _() {\n      return config.matrix === 'Matrix' ? matrix([]) : [];\n    },\n    'string': function string(format) {\n      return matrix(format);\n    },\n    'number | BigNumber': function numberBigNumber(rows) {\n      return _identity(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    'number | BigNumber, string': function numberBigNumberString(rows, format) {\n      return _identity(rows, rows, format);\n    },\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {\n      return _identity(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);\n    },\n    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {\n      return _identity(rows, cols, format);\n    },\n    'Array': function Array(size) {\n      return _identityVector(size);\n    },\n    'Array, string': function ArrayString(size, format) {\n      return _identityVector(size, format);\n    },\n    'Matrix': function Matrix(size) {\n      return _identityVector(size.valueOf(), size.storage());\n    },\n    'Matrix, string': function MatrixString(size, format) {\n      return _identityVector(size.valueOf(), format);\n    }\n  });\n  identity.toTex = undefined; // use default template\n\n  return identity;\n\n  function _identityVector(size, format) {\n    switch (size.length) {\n      case 0:\n        return format ? matrix(format) : [];\n\n      case 1:\n        return _identity(size[0], size[0], format);\n\n      case 2:\n        return _identity(size[0], size[1], format);\n\n      default:\n        throw new Error('Vector containing two values expected');\n    }\n  }\n  /**\n   * Create an identity matrix\n   * @param {number | BigNumber} rows\n   * @param {number | BigNumber} cols\n   * @param {string} [format]\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _identity(rows, cols, format) {\n    // BigNumber constructor with the right precision\n    var Big = type.isBigNumber(rows) || type.isBigNumber(cols) ? type.BigNumber : null;\n    if (type.isBigNumber(rows)) rows = rows.toNumber();\n    if (type.isBigNumber(cols)) cols = cols.toNumber();\n\n    if (!isInteger(rows) || rows < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    if (!isInteger(cols) || cols < 1) {\n      throw new Error('Parameters in function identity must be positive integers');\n    }\n\n    var one = Big ? new type.BigNumber(1) : 1;\n    var defaultValue = Big ? new Big(0) : 0;\n    var size = [rows, cols]; // check we need to return a matrix\n\n    if (format) {\n      // get matrix storage constructor\n      var F = type.Matrix.storage(format); // create diagonal matrix (use optimized implementation for storage format)\n\n      return F.diagonal(size, one, 0, defaultValue);\n    } // create and resize array\n\n\n    var res = array.resize([], size, defaultValue); // fill in ones on the diagonal\n\n    var minimum = rows < cols ? rows : cols; // fill diagonal\n\n    for (var d = 0; d < minimum; d++) {\n      res[d][d] = one;\n    }\n\n    return res;\n  }\n}\n\nexports.name = 'identity';\nexports.factory = factory;","'use strict';\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar ArgumentsError = require('../error/ArgumentsError');\n\nvar deepMap = require('../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var numeric = load(require('../type/numeric'));\n  var AccessorNode = load(require('./node/AccessorNode'));\n  var ArrayNode = load(require('./node/ArrayNode'));\n  var AssignmentNode = load(require('./node/AssignmentNode'));\n  var BlockNode = load(require('./node/BlockNode'));\n  var ConditionalNode = load(require('./node/ConditionalNode'));\n  var ConstantNode = load(require('./node/ConstantNode'));\n  var FunctionAssignmentNode = load(require('./node/FunctionAssignmentNode'));\n  var IndexNode = load(require('./node/IndexNode'));\n  var ObjectNode = load(require('./node/ObjectNode'));\n  var OperatorNode = load(require('./node/OperatorNode'));\n  var ParenthesisNode = load(require('./node/ParenthesisNode'));\n  var FunctionNode = load(require('./node/FunctionNode'));\n  var RangeNode = load(require('./node/RangeNode'));\n  var RelationalNode = load(require('./node/RelationalNode'));\n  var SymbolNode = load(require('./node/SymbolNode'));\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval().\n   *\n   * Syntax:\n   *\n   *     parse(expr)\n   *     parse(expr, options)\n   *     parse([expr1, expr2, expr3, ...])\n   *     parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     const node = parse('sqrt(3^2 + 4^2)')\n   *     node.compile(math).eval() // 5\n   *\n   *     let scope = {a:3, b:4}\n   *     const node = parse('a * b') // 12\n   *     const code = node.compile(math)\n   *     code.eval(scope) // 12\n   *     scope.a = 5\n   *     code.eval(scope) // 20\n   *\n   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].compile(math).eval() // 12\n   *\n   * @param {string | string[] | Matrix} expr\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n\n  function parse(expr, options) {\n    if (arguments.length !== 1 && arguments.length !== 2) {\n      throw new ArgumentsError('parse', arguments.length, 1, 2);\n    } // pass extra nodes\n\n\n    var extraNodes = options && options.nodes ? options.nodes : {};\n\n    if (typeof expr === 'string') {\n      // parse a single expression\n      return parseStart(expr, extraNodes);\n    } else if (Array.isArray(expr) || expr instanceof type.Matrix) {\n      // parse an array or matrix with expressions\n      return deepMap(expr, function (elem) {\n        if (typeof elem !== 'string') throw new TypeError('String expected');\n        return parseStart(elem, extraNodes);\n      });\n    } else {\n      // oops\n      throw new TypeError('String or matrix expected');\n    }\n  } // token types enumeration\n\n\n  var TOKENTYPE = {\n    NULL: 0,\n    DELIMITER: 1,\n    NUMBER: 2,\n    SYMBOL: 3,\n    UNKNOWN: 4 // map with all delimiters\n\n  };\n  var DELIMITERS = {\n    ',': true,\n    '(': true,\n    ')': true,\n    '[': true,\n    ']': true,\n    '{': true,\n    '}': true,\n    '\"': true,\n    '\\'': true,\n    ';': true,\n    '+': true,\n    '-': true,\n    '*': true,\n    '.*': true,\n    '/': true,\n    './': true,\n    '%': true,\n    '^': true,\n    '.^': true,\n    '~': true,\n    '!': true,\n    '&': true,\n    '|': true,\n    '^|': true,\n    '=': true,\n    ':': true,\n    '?': true,\n    '==': true,\n    '!=': true,\n    '<': true,\n    '>': true,\n    '<=': true,\n    '>=': true,\n    '<<': true,\n    '>>': true,\n    '>>>': true // map with all named delimiters\n\n  };\n  var NAMED_DELIMITERS = {\n    'mod': true,\n    'to': true,\n    'in': true,\n    'and': true,\n    'xor': true,\n    'or': true,\n    'not': true\n  };\n  var CONSTANTS = {\n    'true': true,\n    'false': false,\n    'null': null,\n    'undefined': undefined\n  };\n  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];\n\n  function initialState() {\n    return {\n      extraNodes: {},\n      // current extra nodes, must be careful not to mutate\n      expression: '',\n      // current expression\n      comment: '',\n      // last parsed comment\n      index: 0,\n      // current index in expr\n      token: '',\n      // current token\n      tokenType: TOKENTYPE.NULL,\n      // type of the token\n      nestingLevel: 0,\n      // level of nesting inside parameters, used to ignore newline characters\n      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here\n\n    };\n  }\n  /**\n   * View upto `length` characters of the expression starting at the current character.\n   *\n   * @param {State} state\n   * @param {number} [length=1] Number of characters to view\n   * @returns {string}\n   * @private\n   */\n\n\n  function currentString(state, length) {\n    return state.expression.substr(state.index, length);\n  }\n  /**\n   * View the current character. Returns '' if end of expression is reached.\n   *\n   * @param {State} state\n   * @returns {string}\n   * @private\n   */\n\n\n  function currentCharacter(state) {\n    return currentString(state, 1);\n  }\n  /**\n   * Get the next character from the expression.\n   * The character is stored into the char c. If the end of the expression is\n   * reached, the function puts an empty string in c.\n   * @private\n   */\n\n\n  function next(state) {\n    state.index++;\n  }\n  /**\n   * Preview the previous character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n\n  function prevCharacter(state) {\n    return state.expression.charAt(state.index - 1);\n  }\n  /**\n   * Preview the next character from the expression.\n   * @return {string} cNext\n   * @private\n   */\n\n\n  function nextCharacter(state) {\n    return state.expression.charAt(state.index + 1);\n  }\n  /**\n   * Get next token in the current string expr.\n   * The token and token type are available as token and tokenType\n   * @private\n   */\n\n\n  function getToken(state) {\n    state.tokenType = TOKENTYPE.NULL;\n    state.token = '';\n    state.comment = ''; // skip over whitespaces\n    // space, tab, and newline when inside parameters\n\n    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {\n      next(state);\n    } // skip comment\n\n\n    if (currentCharacter(state) === '#') {\n      while (currentCharacter(state) !== '\\n' && currentCharacter(state) !== '') {\n        state.comment += currentCharacter(state);\n        next(state);\n      }\n    } // check for end of expression\n\n\n    if (currentCharacter(state) === '') {\n      // token is still empty\n      state.tokenType = TOKENTYPE.DELIMITER;\n      return;\n    } // check for new line character\n\n\n    if (currentCharacter(state) === '\\n' && !state.nestingLevel) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = currentCharacter(state);\n      next(state);\n      return;\n    }\n\n    var c1 = currentCharacter(state);\n    var c2 = currentString(state, 2);\n    var c3 = currentString(state, 3);\n\n    if (c3.length === 3 && DELIMITERS[c3]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c3;\n      next(state);\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 2 characters\n\n\n    if (c2.length === 2 && DELIMITERS[c2]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c2;\n      next(state);\n      next(state);\n      return;\n    } // check for delimiters consisting of 1 character\n\n\n    if (DELIMITERS[c1]) {\n      state.tokenType = TOKENTYPE.DELIMITER;\n      state.token = c1;\n      next(state);\n      return;\n    } // check for a number\n\n\n    if (parse.isDigitDot(c1)) {\n      state.tokenType = TOKENTYPE.NUMBER; // get number, can have a single dot\n\n      if (currentCharacter(state) === '.') {\n        state.token += currentCharacter(state);\n        next(state);\n\n        if (!parse.isDigit(currentCharacter(state))) {\n          // this is no number, it is just a dot (can be dot notation)\n          state.tokenType = TOKENTYPE.DELIMITER;\n        }\n      } else {\n        while (parse.isDigit(currentCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n\n        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n          state.token += currentCharacter(state);\n          next(state);\n        }\n      }\n\n      while (parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      } // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"\n\n\n      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {\n        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {\n          state.token += currentCharacter(state);\n          next(state);\n\n          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {\n            state.token += currentCharacter(state);\n            next(state);\n          } // Scientific notation MUST be followed by an exponent\n\n\n          if (!parse.isDigit(currentCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n\n          while (parse.isDigit(currentCharacter(state))) {\n            state.token += currentCharacter(state);\n            next(state);\n          }\n\n          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {\n            throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n          }\n        } else if (nextCharacter(state) === '.') {\n          next(state);\n          throw createSyntaxError(state, 'Digit expected, got \"' + currentCharacter(state) + '\"');\n        }\n      }\n\n      return;\n    } // check for variables, functions, named operators\n\n\n    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {\n      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {\n        state.token += currentCharacter(state);\n        next(state);\n      }\n\n      if (NAMED_DELIMITERS.hasOwnProperty(state.token)) {\n        state.tokenType = TOKENTYPE.DELIMITER;\n      } else {\n        state.tokenType = TOKENTYPE.SYMBOL;\n      }\n\n      return;\n    } // something unknown is found, wrong characters -> a syntax error\n\n\n    state.tokenType = TOKENTYPE.UNKNOWN;\n\n    while (currentCharacter(state) !== '') {\n      state.token += currentCharacter(state);\n      next(state);\n    }\n\n    throw createSyntaxError(state, 'Syntax error in part \"' + state.token + '\"');\n  }\n  /**\n   * Get next token and skip newline tokens\n   */\n\n\n  function getTokenSkipNewline(state) {\n    do {\n      getToken(state);\n    } while (state.token === '\\n'); // eslint-disable-line no-unmodified-loop-condition\n\n  }\n  /**\n   * Open parameters.\n   * New line characters will be ignored until closeParams(state) is called\n   */\n\n\n  function openParams(state) {\n    state.nestingLevel++;\n  }\n  /**\n   * Close parameters.\n   * New line characters will no longer be ignored\n   */\n\n\n  function closeParams(state) {\n    state.nestingLevel--;\n  }\n  /**\n   * Checks whether the current character `c` is a valid alpha character:\n   *\n   * - A latin letter (upper or lower case) Ascii: a-z, A-Z\n   * - An underscore                        Ascii: _\n   * - A dollar sign                        Ascii: $\n   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF\n   * - A greek letter                       Unicode: \\u0370 - \\u03FF\n   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points\n   *\n   * The previous and next characters are needed to determine whether\n   * this character is part of a unicode surrogate pair.\n   *\n   * @param {string} c      Current character in the expression\n   * @param {string} cPrev  Previous character\n   * @param {string} cNext  Next character\n   * @return {boolean}\n   */\n\n\n  parse.isAlpha = function isAlpha(c, cPrev, cNext) {\n    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);\n  };\n  /**\n   * Test whether a character is a valid latin, greek, or letter-like character\n   * @param {string} c\n   * @return {boolean}\n   */\n\n\n  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {\n    return /^[a-zA-Z_$\\u00C0-\\u02AF\\u0370-\\u03FF\\u2100-\\u214F]$/.test(c);\n  };\n  /**\n   * Test whether two given 16 bit characters form a surrogate pair of a\n   * unicode math symbol.\n   *\n   * https://unicode-table.com/en/\n   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode\n   *\n   * Note: In ES6 will be unicode aware:\n   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes\n   * https://mathiasbynens.be/notes/es6-unicode-regex\n   *\n   * @param {string} high\n   * @param {string} low\n   * @return {boolean}\n   */\n\n\n  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {\n    return /^[\\uD835]$/.test(high) && /^[\\uDC00-\\uDFFF]$/.test(low) && /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);\n  };\n  /**\n   * Check whether given character c is a white space character: space, tab, or enter\n   * @param {string} c\n   * @param {number} nestingLevel\n   * @return {boolean}\n   */\n\n\n  parse.isWhitespace = function isWhitespace(c, nestingLevel) {\n    // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?\n    return c === ' ' || c === '\\t' || c === '\\n' && nestingLevel > 0;\n  };\n  /**\n   * Test whether the character c is a decimal mark (dot).\n   * This is the case when it's not the start of a delimiter '.*', './', or '.^'\n   * @param {string} c\n   * @param {string} cNext\n   * @return {boolean}\n   */\n\n\n  parse.isDecimalMark = function isDecimalMark(c, cNext) {\n    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';\n  };\n  /**\n   * checks if the given char c is a digit or dot\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n\n  parse.isDigitDot = function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  };\n  /**\n   * checks if the given char c is a digit\n   * @param {string} c   a string with one character\n   * @return {boolean}\n   */\n\n\n  parse.isDigit = function isDigit(c) {\n    return c >= '0' && c <= '9';\n  };\n  /**\n   * Start of the parse levels below, in order of precedence\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseStart(expression, extraNodes) {\n    var state = initialState();\n\n    _extends(state, {\n      expression: expression,\n      extraNodes: extraNodes\n    });\n\n    getToken(state);\n    var node = parseBlock(state); // check for garbage at the end of the expression\n    // an expression ends with a empty character '' and tokenType DELIMITER\n\n    if (state.token !== '') {\n      if (state.tokenType === TOKENTYPE.DELIMITER) {\n        // user entered a not existing operator like \"//\"\n        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean !== ?\"\n        throw createError(state, 'Unexpected operator ' + state.token);\n      } else {\n        throw createSyntaxError(state, 'Unexpected part \"' + state.token + '\"');\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Parse a block with expressions. Expressions can be separated by a newline\n   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output\n   * of the preceding line is returned.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBlock(state) {\n    var node;\n    var blocks = [];\n    var visible;\n\n    if (state.token !== '' && state.token !== '\\n' && state.token !== ';') {\n      node = parseAssignment(state);\n      node.comment = state.comment;\n    } // TODO: simplify this loop\n\n\n    while (state.token === '\\n' || state.token === ';') {\n      // eslint-disable-line no-unmodified-loop-condition\n      if (blocks.length === 0 && node) {\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n\n      getToken(state);\n\n      if (state.token !== '\\n' && state.token !== ';' && state.token !== '') {\n        node = parseAssignment(state);\n        node.comment = state.comment;\n        visible = state.token !== ';';\n        blocks.push({\n          node: node,\n          visible: visible\n        });\n      }\n    }\n\n    if (blocks.length > 0) {\n      return new BlockNode(blocks);\n    } else {\n      if (!node) {\n        node = new ConstantNode(undefined);\n        node.comment = state.comment;\n      }\n\n      return node;\n    }\n  }\n  /**\n   * Assignment of a function or variable,\n   * - can be a variable like 'a=2.3'\n   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'\n   * - defining a function like 'f(x) = x^2'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAssignment(state) {\n    var name, args, value, valid;\n    var node = parseConditional(state);\n\n    if (state.token === '=') {\n      if (type.isSymbolNode(node)) {\n        // parse a variable assignment like 'a = 2/3'\n        name = node.name;\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(new SymbolNode(name), value);\n      } else if (type.isAccessorNode(node)) {\n        // parse a matrix subset assignment like 'A[1,2] = 4'\n        getTokenSkipNewline(state);\n        value = parseAssignment(state);\n        return new AssignmentNode(node.object, node.index, value);\n      } else if (type.isFunctionNode(node) && type.isSymbolNode(node.fn)) {\n        // parse function assignment like 'f(x) = x^2'\n        valid = true;\n        args = [];\n        name = node.name;\n        node.args.forEach(function (arg, index) {\n          if (type.isSymbolNode(arg)) {\n            args[index] = arg.name;\n          } else {\n            valid = false;\n          }\n        });\n\n        if (valid) {\n          getTokenSkipNewline(state);\n          value = parseAssignment(state);\n          return new FunctionAssignmentNode(name, args, value);\n        }\n      }\n\n      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');\n    }\n\n    return node;\n  }\n  /**\n   * conditional operation\n   *\n   *     condition ? truePart : falsePart\n   *\n   * Note: conditional operator is right-associative\n   *\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseConditional(state) {\n    var node = parseLogicalOr(state);\n\n    while (state.token === '?') {\n      // eslint-disable-line no-unmodified-loop-condition\n      // set a conditional level, the range operator will be ignored as long\n      // as conditionalLevel === state.nestingLevel.\n      var prev = state.conditionalLevel;\n      state.conditionalLevel = state.nestingLevel;\n      getTokenSkipNewline(state);\n      var condition = node;\n      var trueExpr = parseAssignment(state);\n      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');\n      state.conditionalLevel = null;\n      getTokenSkipNewline(state);\n      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity\n\n      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level\n\n      state.conditionalLevel = prev;\n    }\n\n    return node;\n  }\n  /**\n   * logical or, 'x or y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalOr(state) {\n    var node = parseLogicalXor(state);\n\n    while (state.token === 'or') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * logical exclusive or, 'x xor y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalXor(state) {\n    var node = parseLogicalAnd(state);\n\n    while (state.token === 'xor') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * logical and, 'x and y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLogicalAnd(state) {\n    var node = parseBitwiseOr(state);\n\n    while (state.token === 'and') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise or, 'x | y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseOr(state) {\n    var node = parseBitwiseXor(state);\n\n    while (state.token === '|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise exclusive or (xor), 'x ^| y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseXor(state) {\n    var node = parseBitwiseAnd(state);\n\n    while (state.token === '^|') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * bitwise and, 'x & y'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseBitwiseAnd(state) {\n    var node = parseRelational(state);\n\n    while (state.token === '&') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getTokenSkipNewline(state);\n      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);\n    }\n\n    return node;\n  }\n  /**\n   * Parse a chained conditional, like 'a > b >= c'\n   * @return {Node} node\n   */\n\n\n  function parseRelational(state) {\n    var params = [parseShift(state)];\n    var conditionals = [];\n    var operators = {\n      '==': 'equal',\n      '!=': 'unequal',\n      '<': 'smaller',\n      '>': 'larger',\n      '<=': 'smallerEq',\n      '>=': 'largerEq'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      var cond = {\n        name: state.token,\n        fn: operators[state.token]\n      };\n      conditionals.push(cond);\n      getTokenSkipNewline(state);\n      params.push(parseShift(state));\n    }\n\n    if (params.length === 1) {\n      return params[0];\n    } else if (params.length === 2) {\n      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);\n    } else {\n      return new RelationalNode(conditionals.map(function (c) {\n        return c.fn;\n      }), params);\n    }\n  }\n  /**\n   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseShift(state) {\n    var node, operators, name, fn, params;\n    node = parseConversion(state);\n    operators = {\n      '<<': 'leftShift',\n      '>>': 'rightArithShift',\n      '>>>': 'rightLogShift'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseConversion(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * conversion operators 'to' and 'in'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseConversion(state) {\n    var node, operators, name, fn, params;\n    node = parseRange(state);\n    operators = {\n      'to': 'to',\n      'in': 'to' // alias of 'to'\n\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n\n      if (name === 'in' && state.token === '') {\n        // end of expression -> this is the unit 'in' ('inch')\n        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);\n      } else {\n        // operator 'a to b' or 'a in b'\n        params = [node, parseRange(state)];\n        node = new OperatorNode(name, fn, params);\n      }\n    }\n\n    return node;\n  }\n  /**\n   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseRange(state) {\n    var node;\n    var params = [];\n\n    if (state.token === ':') {\n      // implicit start=1 (one-based)\n      node = new ConstantNode(1);\n    } else {\n      // explicit start\n      node = parseAddSubtract(state);\n    }\n\n    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {\n      // we ignore the range operator when a conditional operator is being processed on the same level\n      params.push(node); // parse step and end\n\n      while (state.token === ':' && params.length < 3) {\n        // eslint-disable-line no-unmodified-loop-condition\n        getTokenSkipNewline(state);\n\n        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {\n          // implicit end\n          params.push(new SymbolNode('end'));\n        } else {\n          // explicit end\n          params.push(parseAddSubtract(state));\n        }\n      }\n\n      if (params.length === 3) {\n        // params = [start, step, end]\n        node = new RangeNode(params[0], params[2], params[1]); // start, end, step\n      } else {\n        // length === 2\n        // params = [start, end]\n        node = new RangeNode(params[0], params[1]); // start, end\n      }\n    }\n\n    return node;\n  }\n  /**\n   * add or subtract\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAddSubtract(state) {\n    var node, operators, name, fn, params;\n    node = parseMultiplyDivide(state);\n    operators = {\n      '+': 'add',\n      '-': 'subtract'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getTokenSkipNewline(state);\n      params = [node, parseMultiplyDivide(state)];\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * multiply, divide, modulus\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseMultiplyDivide(state) {\n    var node, last, operators, name, fn;\n    node = parseImplicitMultiplication(state);\n    last = node;\n    operators = {\n      '*': 'multiply',\n      '.*': 'dotMultiply',\n      '/': 'divide',\n      './': 'dotDivide',\n      '%': 'mod',\n      'mod': 'mod'\n    };\n\n    while (true) {\n      if (operators.hasOwnProperty(state.token)) {\n        // explicit operators\n        name = state.token;\n        fn = operators[name];\n        getTokenSkipNewline(state);\n        last = parseImplicitMultiplication(state);\n        node = new OperatorNode(name, fn, [node, last]);\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * implicit multiplication\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseImplicitMultiplication(state) {\n    var node, last;\n    node = parseRule2(state);\n    last = node;\n\n    while (true) {\n      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && type.isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !type.isConstantNode(last) && (!type.isOperatorNode(last) || last.op === '!') || state.token === '(') {\n        // parse implicit multiplication\n        //\n        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'\n        // number:      implicit multiplication like '(2+3)2'\n        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'\n        last = parseRule2(state);\n        node = new OperatorNode('*', 'multiply', [node, last], true\n        /* implicit */\n        );\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Infamous \"rule 2\" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370\n   * Explicit division gets higher precedence than implicit multiplication\n   * when the division matches this pattern: [number] / [number] [symbol]\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseRule2(state) {\n    var node = parseUnary(state);\n    var last = node;\n    var tokenStates = [];\n\n    while (true) {\n      // Match the \"number /\" part of the pattern \"number / number symbol\"\n      if (state.token === '/' && type.isConstantNode(last)) {\n        // Look ahead to see if the next token is a number\n        tokenStates.push(_extends({}, state));\n        getTokenSkipNewline(state); // Match the \"number / number\" part of the pattern\n\n        if (state.tokenType === TOKENTYPE.NUMBER) {\n          // Look ahead again\n          tokenStates.push(_extends({}, state));\n          getTokenSkipNewline(state); // Match the \"symbol\" part of the pattern, or a left parenthesis\n\n          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {\n            // We've matched the pattern \"number / number symbol\".\n            // Rewind once and build the \"number / number\" node; the symbol will be consumed later\n            _extends(state, tokenStates.pop());\n\n            tokenStates.pop();\n            last = parseUnary(state);\n            node = new OperatorNode('/', 'divide', [node, last]);\n          } else {\n            // Not a match, so rewind\n            tokenStates.pop();\n\n            _extends(state, tokenStates.pop());\n\n            break;\n          }\n        } else {\n          // Not a match, so rewind\n          _extends(state, tokenStates.pop());\n\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Unary plus and minus, and logical and bitwise not\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseUnary(state) {\n    var name, params, fn;\n    var operators = {\n      '-': 'unaryMinus',\n      '+': 'unaryPlus',\n      '~': 'bitNot',\n      'not': 'not'\n    };\n\n    if (operators.hasOwnProperty(state.token)) {\n      fn = operators[state.token];\n      name = state.token;\n      getTokenSkipNewline(state);\n      params = [parseUnary(state)];\n      return new OperatorNode(name, fn, params);\n    }\n\n    return parsePow(state);\n  }\n  /**\n   * power\n   * Note: power operator is right associative\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parsePow(state) {\n    var node, name, fn, params;\n    node = parseLeftHandOperators(state);\n\n    if (state.token === '^' || state.token === '.^') {\n      name = state.token;\n      fn = name === '^' ? 'pow' : 'dotPow';\n      getTokenSkipNewline(state);\n      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'\n\n      node = new OperatorNode(name, fn, params);\n    }\n\n    return node;\n  }\n  /**\n   * Left hand operators: factorial x!, ctranspose x'\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseLeftHandOperators(state) {\n    var node, operators, name, fn, params;\n    node = parseCustomNodes(state);\n    operators = {\n      '!': 'factorial',\n      '\\'': 'ctranspose'\n    };\n\n    while (operators.hasOwnProperty(state.token)) {\n      name = state.token;\n      fn = operators[name];\n      getToken(state);\n      params = [node];\n      node = new OperatorNode(name, fn, params);\n      node = parseAccessors(state, node);\n    }\n\n    return node;\n  }\n  /**\n   * Parse a custom node handler. A node handler can be used to process\n   * nodes in a custom way, for example for handling a plot.\n   *\n   * A handler must be passed as second argument of the parse function.\n   * - must extend math.expression.node.Node\n   * - must contain a function _compile(defs: Object) : string\n   * - must contain a function find(filter: Object) : Node[]\n   * - must contain a function toString() : string\n   * - the constructor is called with a single argument containing all parameters\n   *\n   * For example:\n   *\n   *     nodes = {\n   *       'plot': PlotHandler\n   *     }\n   *\n   * The constructor of the handler is called as:\n   *\n   *     node = new PlotHandler(params)\n   *\n   * The handler will be invoked when evaluating an expression like:\n   *\n   *     node = math.parse('plot(sin(x), x)', nodes)\n   *\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseCustomNodes(state) {\n    var params = [];\n\n    if (state.tokenType === TOKENTYPE.SYMBOL && state.extraNodes.hasOwnProperty(state.token)) {\n      var CustomNode = state.extraNodes[state.token];\n      getToken(state); // parse parameters\n\n      if (state.token === '(') {\n        params = [];\n        openParams(state);\n        getToken(state);\n\n        if (state.token !== ')') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n\n        if (state.token !== ')') {\n          throw createSyntaxError(state, 'Parenthesis ) expected');\n        }\n\n        closeParams(state);\n        getToken(state);\n      } // create a new custom node\n      // noinspection JSValidateTypes\n\n\n      return new CustomNode(params);\n    }\n\n    return parseSymbol(state);\n  }\n  /**\n   * parse symbols: functions, variables, constants, units\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseSymbol(state) {\n    var node, name;\n\n    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {\n      name = state.token;\n      getToken(state);\n\n      if (CONSTANTS.hasOwnProperty(name)) {\n        // true, false, null, ...\n        node = new ConstantNode(CONSTANTS[name]);\n      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {\n        // NaN, Infinity\n        node = new ConstantNode(numeric(name, 'number'));\n      } else {\n        node = new SymbolNode(name);\n      } // parse function parameters and matrix index\n\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseDoubleQuotesString(state);\n  }\n  /**\n   * parse accessors:\n   * - function invocation in round brackets (...), for example sqrt(2)\n   * - index enclosed in square brackets [...], for example A[2,3]\n   * - dot notation for properties, like foo.bar\n   * @param {Node} node    Node on which to apply the parameters. If there\n   *                       are no parameters in the expression, the node\n   *                       itself is returned\n   * @param {string[]} [types]  Filter the types of notations\n   *                            can be ['(', '[', '.']\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseAccessors(state, node, types) {\n    var params;\n\n    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {\n      // eslint-disable-line no-unmodified-loop-condition\n      params = [];\n\n      if (state.token === '(') {\n        if (type.isSymbolNode(node) || type.isAccessorNode(node)) {\n          // function invocation like fn(2, 3) or obj.fn(2, 3)\n          openParams(state);\n          getToken(state);\n\n          if (state.token !== ')') {\n            params.push(parseAssignment(state)); // parse a list with parameters\n\n            while (state.token === ',') {\n              // eslint-disable-line no-unmodified-loop-condition\n              getToken(state);\n              params.push(parseAssignment(state));\n            }\n          }\n\n          if (state.token !== ')') {\n            throw createSyntaxError(state, 'Parenthesis ) expected');\n          }\n\n          closeParams(state);\n          getToken(state);\n          node = new FunctionNode(node, params);\n        } else {\n          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)\n          // don't parse it here but let it be handled by parseImplicitMultiplication\n          // with correct precedence\n          return node;\n        }\n      } else if (state.token === '[') {\n        // index notation like variable[2, 3]\n        openParams(state);\n        getToken(state);\n\n        if (state.token !== ']') {\n          params.push(parseAssignment(state)); // parse a list with parameters\n\n          while (state.token === ',') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params.push(parseAssignment(state));\n          }\n        }\n\n        if (state.token !== ']') {\n          throw createSyntaxError(state, 'Parenthesis ] expected');\n        }\n\n        closeParams(state);\n        getToken(state);\n        node = new AccessorNode(node, new IndexNode(params));\n      } else {\n        // dot notation like variable.prop\n        getToken(state);\n\n        if (state.tokenType !== TOKENTYPE.SYMBOL) {\n          throw createSyntaxError(state, 'Property name expected after dot');\n        }\n\n        params.push(new ConstantNode(state.token));\n        getToken(state);\n        var dotNotation = true;\n        node = new AccessorNode(node, new IndexNode(params, dotNotation));\n      }\n    }\n\n    return node;\n  }\n  /**\n   * Parse a double quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseDoubleQuotesString(state) {\n    var node, str;\n\n    if (state.token === '\"') {\n      str = parseDoubleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseSingleQuotesString(state);\n  }\n  /**\n   * Parse a string surrounded by double quotes \"...\"\n   * @return {string}\n   */\n\n\n  function parseDoubleQuotesStringToken(state) {\n    var str = '';\n\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\"') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\\"'\n        str += currentCharacter(state);\n        next(state);\n      }\n\n      str += currentCharacter(state);\n      next(state);\n    }\n\n    getToken(state);\n\n    if (state.token !== '\"') {\n      throw createSyntaxError(state, 'End of string \" expected');\n    }\n\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * Parse a single quotes string.\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseSingleQuotesString(state) {\n    var node, str;\n\n    if (state.token === '\\'') {\n      str = parseSingleQuotesStringToken(state); // create constant\n\n      node = new ConstantNode(str); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseMatrix(state);\n  }\n  /**\n   * Parse a string surrounded by single quotes '...'\n   * @return {string}\n   */\n\n\n  function parseSingleQuotesStringToken(state) {\n    var str = '';\n\n    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\\'') {\n      if (currentCharacter(state) === '\\\\') {\n        // escape character, immediately process the next\n        // character to prevent stopping at a next '\\''\n        str += currentCharacter(state);\n        next(state);\n      }\n\n      str += currentCharacter(state);\n      next(state);\n    }\n\n    getToken(state);\n\n    if (state.token !== '\\'') {\n      throw createSyntaxError(state, 'End of string \\' expected');\n    }\n\n    getToken(state);\n    return JSON.parse('\"' + str + '\"'); // unescape escaped characters\n  }\n  /**\n   * parse the matrix\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseMatrix(state) {\n    var array, params, rows, cols;\n\n    if (state.token === '[') {\n      // matrix [...]\n      openParams(state);\n      getToken(state);\n\n      if (state.token !== ']') {\n        // this is a non-empty matrix\n        var row = parseRow(state);\n\n        if (state.token === ';') {\n          // 2 dimensional array\n          rows = 1;\n          params = [row]; // the rows of the matrix are separated by dot-comma's\n\n          while (state.token === ';') {\n            // eslint-disable-line no-unmodified-loop-condition\n            getToken(state);\n            params[rows] = parseRow(state);\n            rows++;\n          }\n\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n\n          closeParams(state);\n          getToken(state); // check if the number of columns matches in all rows\n\n          cols = params[0].items.length;\n\n          for (var r = 1; r < rows; r++) {\n            if (params[r].items.length !== cols) {\n              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');\n            }\n          }\n\n          array = new ArrayNode(params);\n        } else {\n          // 1 dimensional vector\n          if (state.token !== ']') {\n            throw createSyntaxError(state, 'End of matrix ] expected');\n          }\n\n          closeParams(state);\n          getToken(state);\n          array = row;\n        }\n      } else {\n        // this is an empty matrix \"[ ]\"\n        closeParams(state);\n        getToken(state);\n        array = new ArrayNode([]);\n      }\n\n      return parseAccessors(state, array);\n    }\n\n    return parseObject(state);\n  }\n  /**\n   * Parse a single comma-separated row from a matrix, like 'a, b, c'\n   * @return {ArrayNode} node\n   */\n\n\n  function parseRow(state) {\n    var params = [parseAssignment(state)];\n    var len = 1;\n\n    while (state.token === ',') {\n      // eslint-disable-line no-unmodified-loop-condition\n      getToken(state); // parse expression\n\n      params[len] = parseAssignment(state);\n      len++;\n    }\n\n    return new ArrayNode(params);\n  }\n  /**\n   * parse an object, enclosed in angle brackets{...}, for example {value: 2}\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseObject(state) {\n    if (state.token === '{') {\n      openParams(state);\n      var key;\n      var properties = {};\n\n      do {\n        getToken(state);\n\n        if (state.token !== '}') {\n          // parse key\n          if (state.token === '\"') {\n            key = parseDoubleQuotesStringToken(state);\n          } else if (state.token === '\\'') {\n            key = parseSingleQuotesStringToken(state);\n          } else if (state.tokenType === TOKENTYPE.SYMBOL) {\n            key = state.token;\n            getToken(state);\n          } else {\n            throw createSyntaxError(state, 'Symbol or string expected as object key');\n          } // parse key/value separator\n\n\n          if (state.token !== ':') {\n            throw createSyntaxError(state, 'Colon : expected after object key');\n          }\n\n          getToken(state); // parse key\n\n          properties[key] = parseAssignment(state);\n        }\n      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition\n\n\n      if (state.token !== '}') {\n        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');\n      }\n\n      closeParams(state);\n      getToken(state);\n      var node = new ObjectNode(properties); // parse index parameters\n\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseNumber(state);\n  }\n  /**\n   * parse a number\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseNumber(state) {\n    var numberStr;\n\n    if (state.tokenType === TOKENTYPE.NUMBER) {\n      // this is a number\n      numberStr = state.token;\n      getToken(state);\n      return new ConstantNode(numeric(numberStr, config.number));\n    }\n\n    return parseParentheses(state);\n  }\n  /**\n   * parentheses\n   * @return {Node} node\n   * @private\n   */\n\n\n  function parseParentheses(state) {\n    var node; // check if it is a parenthesized expression\n\n    if (state.token === '(') {\n      // parentheses (...)\n      openParams(state);\n      getToken(state);\n      node = parseAssignment(state); // start again\n\n      if (state.token !== ')') {\n        throw createSyntaxError(state, 'Parenthesis ) expected');\n      }\n\n      closeParams(state);\n      getToken(state);\n      node = new ParenthesisNode(node);\n      node = parseAccessors(state, node);\n      return node;\n    }\n\n    return parseEnd(state);\n  }\n  /**\n   * Evaluated when the expression is not yet ended but expected to end\n   * @return {Node} res\n   * @private\n   */\n\n\n  function parseEnd(state) {\n    if (state.token === '') {\n      // syntax error or unexpected end of expression\n      throw createSyntaxError(state, 'Unexpected end of expression');\n    } else {\n      throw createSyntaxError(state, 'Value expected');\n    }\n  }\n  /**\n   * Shortcut for getting the current row value (one based)\n   * Returns the line of the currently handled expression\n   * @private\n   */\n\n  /* TODO: implement keeping track on the row number\n  function row () {\n    return null\n  }\n  */\n\n  /**\n   * Shortcut for getting the current col value (one based)\n   * Returns the column (position) where the last state.token starts\n   * @private\n   */\n\n\n  function col(state) {\n    return state.index - state.token.length + 1;\n  }\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {SyntaxError} instantiated error\n   * @private\n   */\n\n\n  function createSyntaxError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n    return error;\n  }\n  /**\n   * Create an error\n   * @param {string} message\n   * @return {Error} instantiated error\n   * @private\n   */\n\n\n  function createError(state, message) {\n    var c = col(state);\n    var error = new SyntaxError(message + ' (char ' + c + ')');\n    error['char'] = c;\n    return error;\n  }\n\n  return parse;\n}\n\nexports.name = 'parse';\nexports.path = 'expression';\nexports.factory = factory;","var defineProperty = require(\"./defineProperty\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread;","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  B(i,j)       ; B(i,j) !== 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm04 = function algorithm04(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspace\n\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop A(:,j)\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // update c\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop B(:,j)\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row exists in A\n\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]); // check for zero\n\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i); // update workspace\n\n          wb[i] = mark; // check we need to process values\n\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // check workspace has value @ i\n\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i]; // increment pointer\n\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i]; // increment pointer\n\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm04;\n}\n\nexports.name = 'algorithm04';\nexports.factory = factory;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar toFixed = require('../../utils/number').toFixed;\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nvar NO_INT = 'Number of decimals in function round must be an integer';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.2)              // returns number 3\n   *    math.round(3.8)              // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  var round = typed('round', {\n    'number': function number(x) {\n      return _round(x, 0);\n    },\n    'number, number': function numberNumber(x, n) {\n      if (!isInteger(n)) {\n        throw new TypeError(NO_INT);\n      }\n\n      if (n < 0 || n > 15) {\n        throw new Error('Number of decimals in function round must be in te range of 0-15');\n      }\n\n      return _round(x, n);\n    },\n    'Complex': function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    'Fraction': function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, round, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, round, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, round, false);\n    },\n    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, round, true);\n    },\n    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, round, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, round, false).valueOf();\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, round, true).valueOf();\n    }\n  });\n  round.toTex = {\n    1: \"\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil\",\n    2: undefined // use default template\n\n  };\n  return round;\n}\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n * @private\n */\n\n\nfunction _round(value, decimals) {\n  return parseFloat(toFixed(value, decimals));\n}\n\nexports.name = 'round';\nexports.factory = factory;","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n\n  var latex = require('../../utils/latex.js');\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3)               // returns number 5\n   *    math.add(2, 3, 4)            // returns number 9\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(-4, 1)\n   *    math.add(a, b)               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   *    const c = math.unit('5 cm')\n   *    const d = math.unit('2.1 mm')\n   *    math.add(c, d)               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n\n  var add = typed('add', extend({\n    // we extend the signatures of addScalar with signatures dealing with matrices\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, addScalar);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, addScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, addScalar, true);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, addScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return add(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return add(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return add(x, matrix(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, addScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, y, addScalar, false);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, addScalar, true);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, addScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, addScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, addScalar, true).valueOf();\n    },\n    'any, any': addScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = add(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = add(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, addScalar.signatures));\n  add.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['add'], \"${args[1]}\\\\right)\")\n  };\n  return add;\n}\n\nexports.name = 'add';\nexports.factory = factory;","'use strict';\n/**\n * Test whether value is a boolean\n * @param {*} value\n * @return {boolean} isBoolean\n */\n\nexports.isBoolean = function (value) {\n  return typeof value === 'boolean';\n};","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nvar array = require('../../utils/array');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var multiplyScalar = load(require('./multiplyScalar'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  var DenseMatrix = type.DenseMatrix;\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n  var multiply = typed('multiply', extend({\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': function ArrayArray(x, y) {\n      // check dimensions\n      _validateMatrixDimensions(array.size(x), array.size(y)); // use dense matrix implementation\n\n\n      var m = multiply(matrix(x), matrix(y)); // return array or scalar\n\n      return type.isMatrix(m) ? m.valueOf() : m;\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(x, matrix(y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use Matrix * Matrix implementation\n      return multiply(matrix(x, y.storage()), y);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = multiply(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = multiply(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, multiplyScalar.signatures));\n\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n\n            break;\n\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n\n            break;\n\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    } // a dense\n\n\n    var adata = a._data;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result (do not initialize it with zero)\n\n\n    var c = mf(adata[0], bdata[0]); // loop data\n\n    for (var i = 1; i < n; i++) {\n      // multiply and accumulate\n      c = af(c, mf(adata[i], bdata[i]));\n    }\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n\n      c[j] = sum;\n    } // return matrix\n\n\n    return new DenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n\n      c[i] = sum;\n    } // return matrix\n\n\n    return new DenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n\n    return new DenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n\n  multiply.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['multiply'], \"${args[1]}\\\\right)\")\n  };\n  return multiply;\n}\n\nexports.name = 'multiply';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var zeros = load(require('../matrix/zeros'));\n  var not = load(require('./not'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n\n  var and = typed('and', {\n    'number, number': function numberNumber(x, y) {\n      return !!(x && y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return and(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, and, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, and, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, and, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, and);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return and(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return and(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return and(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(x, y, and, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(x, y, and, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(y, x, and, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(y, x, and, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return and(matrix(x), y).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return and(x, matrix(y)).valueOf();\n    }\n  });\n  and.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['and'], \"${args[1]}\\\\right)\")\n  };\n  return and;\n}\n\nexports.name = 'and';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var unaryMinus = load(require('./unaryMinus'));\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14')); // TODO: split function subtract in two: subtract and subtractScalar\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  var subtract = typed('subtract', {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = subtract(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, subtract);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, subtract, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, subtract, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, subtract);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return subtract(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, subtract);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, subtract, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, subtract, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, subtract, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, subtract, true).valueOf();\n    }\n  });\n  subtract.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['subtract'], \"${args[1]}\\\\right)\")\n  };\n  return subtract;\n}\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}\n\nexports.name = 'subtract';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar formatNumber = require('./number').format;\n\nvar formatBigNumber = require('./bignumber/formatter').format;\n\nvar isBigNumber = require('./bignumber/isBigNumber');\n/**\n * Test whether value is a string\n * @param {*} value\n * @return {boolean} isString\n */\n\n\nexports.isString = function (value) {\n  return typeof value === 'string';\n};\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\n\n\nexports.endsWith = function (text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n};\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @return {string} str\n */\n\n\nexports.format = function (value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if (exports.isString(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && _typeof(value) === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString() !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString();\n    } else {\n      var entries = [];\n\n      for (var key in value) {\n        if (value.hasOwnProperty(key)) {\n          entries.push('\"' + key + '\": ' + exports.format(value[key], options));\n        }\n      }\n\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n};\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\n\nexports.stringify = function (value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n};\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\n\nexports.escape = function (value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n};\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n\n      str += formatArray(array[i], options);\n    }\n\n    str += ']';\n    return str;\n  } else {\n    return exports.format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\n\nfunction looksLikeFraction(value) {\n  return value && _typeof(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","'use strict';\n\nvar util = require('../../utils/index');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var divideScalar = load(require('../arithmetic/divideScalar'));\n  var addScalar = load(require('../arithmetic/addScalar'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var unaryMinus = load(require('../arithmetic/unaryMinus'));\n  var det = load(require('../matrix/det'));\n  var identity = load(require('./identity'));\n  var abs = load(require('../arithmetic/abs'));\n  /**\n   * Calculate the inverse of a square matrix.\n   *\n   * Syntax:\n   *\n   *     math.inv(x)\n   *\n   * Examples:\n   *\n   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]\n   *     math.inv(4)                 // returns 0.25\n   *     1 / 4                       // returns 0.25\n   *\n   * See also:\n   *\n   *     det, transpose\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n\n  var inv = typed('inv', {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = type.isMatrix(x) ? x.size() : util.array.size(x);\n\n      switch (size.length) {\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            if (type.isMatrix(x)) {\n              return matrix([divideScalar(1, x.valueOf()[0])]);\n            } else {\n              return [divideScalar(1, x[0])];\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');\n          }\n\n        case 2:\n          // two dimensional array\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            if (type.isMatrix(x)) {\n              return matrix(_inv(x.valueOf(), rows, cols), x.storage());\n            } else {\n              // return an Array\n              return _inv(x, rows, cols);\n            }\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');\n          }\n\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + util.string.format(size) + ')');\n      }\n    },\n    'any': function any(x) {\n      // scalar\n      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers\n    }\n  });\n  /**\n   * Calculate the inverse of a square matrix\n   * @param {Array[]} mat     A square matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns, must equal rows\n   * @return {Array[]} inv    Inverse matrix\n   * @private\n   */\n\n  function _inv(mat, rows, cols) {\n    var r, s, f, value, temp;\n\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      value = mat[0][0];\n\n      if (value === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n\n      return [[divideScalar(1, value)]];\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      var d = det(mat);\n\n      if (d === 0) {\n        throw Error('Cannot calculate inverse, determinant is zero');\n      }\n\n      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];\n    } else {\n      // this is a matrix of 3 x 3 or larger\n      // calculate inverse using gauss-jordan elimination\n      //      https://en.wikipedia.org/wiki/Gaussian_elimination\n      //      http://mathworld.wolfram.com/MatrixInverse.html\n      //      http://math.uww.edu/~mcfarlat/inverse.htm\n      // make a copy of the matrix (only the arrays, not of the elements)\n      var A = mat.concat();\n\n      for (r = 0; r < rows; r++) {\n        A[r] = A[r].concat();\n      } // create an identity matrix which in the end will contain the\n      // matrix inverse\n\n\n      var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions\n\n      for (var c = 0; c < cols; c++) {\n        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]\n        var ABig = abs(A[c][c]);\n        var rBig = c;\n        r = c + 1;\n\n        while (r < rows) {\n          if (abs(A[r][c]) > ABig) {\n            ABig = abs(A[r][c]);\n            rBig = r;\n          }\n\n          r++;\n        }\n\n        if (ABig === 0) {\n          throw Error('Cannot calculate inverse, determinant is zero');\n        }\n\n        r = rBig;\n\n        if (r !== c) {\n          temp = A[c];\n          A[c] = A[r];\n          A[r] = temp;\n          temp = B[c];\n          B[c] = B[r];\n          B[r] = temp;\n        } // eliminate non-zero values on the other rows at column c\n\n\n        var Ac = A[c];\n        var Bc = B[c];\n\n        for (r = 0; r < rows; r++) {\n          var Ar = A[r];\n          var Br = B[r];\n\n          if (r !== c) {\n            // eliminate value at column c and row r\n            if (Ar[c] !== 0) {\n              f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value\n              // at column c\n\n              for (s = c; s < cols; s++) {\n                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));\n              }\n\n              for (s = 0; s < cols; s++) {\n                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));\n              }\n            }\n          } else {\n            // normalize value at Acc to 1,\n            // divide each value on row r with the value at Acc\n            f = Ac[c];\n\n            for (s = c; s < cols; s++) {\n              Ar[s] = divideScalar(Ar[s], f);\n            }\n\n            for (s = 0; s < cols; s++) {\n              Br[s] = divideScalar(Br[s], f);\n            }\n          }\n        }\n      }\n\n      return B;\n    }\n  }\n\n  inv.toTex = {\n    1: \"\\\\left(${args[0]}\\\\right)^{-1}\"\n  };\n  return inv;\n}\n\nexports.name = 'inv';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.floor(c)                // returns Complex 3 - 3i\n   *\n   *    math.floor([3.2, 3.8, -4.7]) // returns Array [3, 3, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var floor = typed('floor', {\n    'number': Math.floor,\n    'Complex': function Complex(x) {\n      return x.floor();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.floor();\n    },\n    'Fraction': function Fraction(x) {\n      return x.floor();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, floor, true);\n    }\n  });\n  floor.toTex = {\n    1: \"\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor\"\n  };\n  return floor;\n}\n\nexports.name = 'floor';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a Matrix. The function creates a new `math.type.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format\n   *\n   * @return {Matrix} The created matrix\n   */\n  var matrix = typed('matrix', {\n    '': function _() {\n      return _create([]);\n    },\n    'string': function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    'Array': function Array(data) {\n      return _create(data);\n    },\n    'Matrix': function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n  matrix.toTex = {\n    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',\n    1: \"\\\\left(${args[0]}\\\\right)\",\n    2: \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return matrix;\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    var M = type.Matrix.storage(format || 'default'); // create instance\n\n    return new M(data, datatype);\n  }\n}\n\nexports.name = 'matrix';\nexports.factory = factory;","\"use strict\";\n\n// Map the characters to escape to their escaped values. The list is derived\n// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar defaultEscapes = {\n  \"{\": \"\\\\{\",\n  \"}\": \"\\\\}\",\n  \"\\\\\": \"\\\\textbackslash{}\",\n  \"#\": \"\\\\#\",\n  $: \"\\\\$\",\n  \"%\": \"\\\\%\",\n  \"&\": \"\\\\&\",\n  \"^\": \"\\\\textasciicircum{}\",\n  _: \"\\\\_\",\n  \"~\": \"\\\\textasciitilde{}\"\n};\nvar formatEscapes = {\n  \"\\u2013\": \"\\\\--\",\n  \"\\u2014\": \"\\\\---\",\n  \" \": \"~\",\n  \"\\t\": \"\\\\qquad{}\",\n  \"\\r\\n\": \"\\\\newline{}\",\n  \"\\n\": \"\\\\newline{}\"\n};\n\nvar defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {\n  return _extends({}, defaultEscapes, formatEscapes);\n};\n\n/**\n * Escape a string to be used in LaTeX documents.\n * @param {string} str the string to be escaped.\n * @param {boolean} params.preserveFormatting whether formatting escapes should\n *  be performed (default: false).\n * @param {function} params.escapeMapFn the function to modify the escape maps.\n * @return {string} the escaped string, ready to be used in LaTeX.\n */\nmodule.exports = function (str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$preserveFormatti = _ref.preserveFormatting,\n      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,\n      _ref$escapeMapFn = _ref.escapeMapFn,\n      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;\n\n  var runningStr = String(str);\n  var result = \"\";\n\n  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});\n  var escapeKeys = Object.keys(escapes); // as it is reused later on\n\n  // Algorithm: Go through the string character by character, if it matches\n  // with one of the special characters then we'll replace it with the escaped\n  // version.\n\n  var _loop = function _loop() {\n    var specialCharFound = false;\n    escapeKeys.forEach(function (key, index) {\n      if (specialCharFound) {\n        return;\n      }\n      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {\n        result += escapes[escapeKeys[index]];\n        runningStr = runningStr.slice(key.length, runningStr.length);\n        specialCharFound = true;\n      }\n    });\n    if (!specialCharFound) {\n      result += runningStr.slice(0, 1);\n      runningStr = runningStr.slice(1, runningStr.length);\n    }\n  };\n\n  while (runningStr) {\n    _loop();\n  }\n  return result;\n};","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar stringify = require('../../utils/string').stringify;\n\nvar escape = require('../../utils/string').escape;\n\nvar isSafeProperty = require('../../utils/customs').isSafeProperty;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor ObjectNode\n   * @extends {Node}\n   * Holds an object with keys/values\n   * @param {Object.<string, Node>} [properties]   object with key/value pairs\n   */\n\n  function ObjectNode(properties) {\n    if (!(this instanceof ObjectNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.properties = properties || {}; // validate input\n\n    if (properties) {\n      if (!(_typeof(properties) === 'object') || !Object.keys(properties).every(function (key) {\n        return type.isNode(properties[key]);\n      })) {\n        throw new TypeError('Object containing Nodes expected');\n      }\n    }\n  }\n\n  ObjectNode.prototype = new Node();\n  ObjectNode.prototype.type = 'ObjectNode';\n  ObjectNode.prototype.isObjectNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ObjectNode.prototype._compile = function (math, argNames) {\n    var evalEntries = {};\n\n    for (var key in this.properties) {\n      if (hasOwnProperty(this.properties, key)) {\n        // we stringify/parse the key here to resolve unicode characters,\n        // so you cannot create a key like {\"co\\\\u006Estructor\": null}\n        var stringifiedKey = stringify(key);\n        var parsedKey = JSON.parse(stringifiedKey);\n\n        if (!isSafeProperty(this.properties, parsedKey)) {\n          throw new Error('No access to property \"' + parsedKey + '\"');\n        }\n\n        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);\n      }\n    }\n\n    return function evalObjectNode(scope, args, context) {\n      var obj = {};\n\n      for (var _key in evalEntries) {\n        if (hasOwnProperty(evalEntries, _key)) {\n          obj[_key] = evalEntries[_key](scope, args, context);\n        }\n      }\n\n      return obj;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ObjectNode.prototype.forEach = function (callback) {\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);\n      }\n    }\n  };\n  /**\n   * Create a new ObjectNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ObjectNode} Returns a transformed copy of the node\n   */\n\n\n  ObjectNode.prototype.map = function (callback) {\n    var properties = {};\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));\n      }\n    }\n\n    return new ObjectNode(properties);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ObjectNode}\n   */\n\n\n  ObjectNode.prototype.clone = function () {\n    var properties = {};\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        properties[key] = this.properties[key];\n      }\n    }\n\n    return new ObjectNode(properties);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ObjectNode.prototype._toString = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));\n      }\n    }\n\n    return '{' + entries.join(', ') + '}';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ObjectNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ObjectNode',\n      properties: this.properties\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ObjectNode\", \"properties\": {...}}`,\n   *                       where mathjs is optional\n   * @returns {ObjectNode}\n   */\n\n\n  ObjectNode.fromJSON = function (json) {\n    return new ObjectNode(json.properties);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ObjectNode.prototype.toHTML = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push('<span class=\"math-symbol math-property\">' + escape(key) + '</span>' + '<span class=\"math-operator math-assignment-operator math-property-assignment-operator math-binary-operator\">:</span>' + this.properties[key].toHTML(options));\n      }\n    }\n\n    return '<span class=\"math-parenthesis math-curly-parenthesis\">{</span>' + entries.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-curly-parenthesis\">}</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ObjectNode.prototype._toTex = function (options) {\n    var entries = [];\n\n    for (var key in this.properties) {\n      if (this.properties.hasOwnProperty(key)) {\n        entries.push('\\\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\\\\\');\n      }\n    }\n\n    return \"\\\\left\\\\{\\\\begin{array}{ll}\".concat(entries.join('\\n'), \"\\\\end{array}\\\\right\\\\}\");\n  };\n\n  return ObjectNode;\n}\n\nexports.name = 'ObjectNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\n\nfunction IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = new Error().stack;\n}\n\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;\nmodule.exports = IndexError;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar lazy = require('../../utils/object').lazy;\n\nvar isFactory = require('../../utils/object').isFactory;\n\nvar traverse = require('../../utils/object').traverse;\n\nvar ArgumentsError = require('../../error/ArgumentsError');\n\nfunction factory(type, config, load, typed, math) {\n  /**\n   * Import functions from an object or a module\n   *\n   * Syntax:\n   *\n   *    math.import(object)\n   *    math.import(object, options)\n   *\n   * Where:\n   *\n   * - `object: Object`\n   *   An object with functions to be imported.\n   * - `options: Object` An object with import options. Available options:\n   *   - `override: boolean`\n   *     If true, existing functions will be overwritten. False by default.\n   *   - `silent: boolean`\n   *     If true, the function will not throw errors on duplicates or invalid\n   *     types. False by default.\n   *   - `wrap: boolean`\n   *     If true, the functions will be wrapped in a wrapper function\n   *     which converts data types like Matrix to primitive data types like Array.\n   *     The wrapper is needed when extending math.js with libraries which do not\n   *     support these data type. False by default.\n   *\n   * Examples:\n   *\n   *    // define new functions and variables\n   *    math.import({\n   *      myvalue: 42,\n   *      hello: function (name) {\n   *        return 'hello, ' + name + '!'\n   *      }\n   *    })\n   *\n   *    // use the imported function and variable\n   *    math.myvalue * 2               // 84\n   *    math.hello('user')             // 'hello, user!'\n   *\n   *    // import the npm module 'numbers'\n   *    // (must be installed first with `npm install numbers`)\n   *    math.import(require('numbers'), {wrap: true})\n   *\n   *    math.fibonacci(7) // returns 13\n   *\n   * @param {Object | Array} object   Object with functions to be imported.\n   * @param {Object} [options]        Import options.\n   */\n  function mathImport(object, options) {\n    var num = arguments.length;\n\n    if (num !== 1 && num !== 2) {\n      throw new ArgumentsError('import', num, 1, 2);\n    }\n\n    if (!options) {\n      options = {};\n    } // TODO: allow a typed-function with name too\n\n\n    if (isFactory(object)) {\n      _importFactory(object, options);\n    } else if (Array.isArray(object)) {\n      object.forEach(function (entry) {\n        mathImport(entry, options);\n      });\n    } else if (_typeof(object) === 'object') {\n      // a map with functions\n      for (var name in object) {\n        if (object.hasOwnProperty(name)) {\n          var value = object[name];\n\n          if (isSupportedType(value)) {\n            _import(name, value, options);\n          } else if (isFactory(object)) {\n            _importFactory(object, options);\n          } else {\n            mathImport(value, options);\n          }\n        }\n      }\n    } else {\n      if (!options.silent) {\n        throw new TypeError('Factory, Object, or Array expected');\n      }\n    }\n  }\n  /**\n   * Add a property to the math namespace and create a chain proxy for it.\n   * @param {string} name\n   * @param {*} value\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n\n\n  function _import(name, value, options) {\n    // TODO: refactor this function, it's to complicated and contains duplicate code\n    if (options.wrap && typeof value === 'function') {\n      // create a wrapper around the function\n      value = _wrap(value);\n    }\n\n    if (isTypedFunction(math[name]) && isTypedFunction(value)) {\n      if (options.override) {\n        // give the typed function the right name\n        value = typed(name, value.signatures);\n      } else {\n        // merge the existing and typed function\n        value = typed(math[name], value);\n      }\n\n      math[name] = value;\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (math[name] === undefined || options.override) {\n      math[name] = value;\n\n      _importTransform(name, value);\n\n      math.emit('import', name, function resolver() {\n        return value;\n      });\n      return;\n    }\n\n    if (!options.silent) {\n      throw new Error('Cannot import \"' + name + '\": already exists');\n    }\n  }\n\n  function _importTransform(name, value) {\n    if (value && typeof value.transform === 'function') {\n      math.expression.transform[name] = value.transform;\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value.transform;\n      }\n    } else {\n      // remove existing transform\n      delete math.expression.transform[name];\n\n      if (allowedInExpressions(name)) {\n        math.expression.mathWithTransform[name] = value;\n      }\n    }\n  }\n\n  function _deleteTransform(name) {\n    delete math.expression.transform[name];\n\n    if (allowedInExpressions(name)) {\n      math.expression.mathWithTransform[name] = math[name];\n    } else {\n      delete math.expression.mathWithTransform[name];\n    }\n  }\n  /**\n   * Create a wrapper a round an function which converts the arguments\n   * to their primitive values (like convert a Matrix to Array)\n   * @param {Function} fn\n   * @return {Function} Returns the wrapped function\n   * @private\n   */\n\n\n  function _wrap(fn) {\n    var wrapper = function wrapper() {\n      var args = [];\n\n      for (var i = 0, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        args[i] = arg && arg.valueOf();\n      }\n\n      return fn.apply(math, args);\n    };\n\n    if (fn.transform) {\n      wrapper.transform = fn.transform;\n    }\n\n    return wrapper;\n  }\n  /**\n   * Import an instance of a factory into math.js\n   * @param {{factory: Function, name: string, path: string, math: boolean}} factory\n   * @param {Object} options  See import for a description of the options\n   * @private\n   */\n\n\n  function _importFactory(factory, options) {\n    if (typeof factory.name === 'string') {\n      var name = factory.name;\n      var existingTransform = name in math.expression.transform;\n      var namespace = factory.path ? traverse(math, factory.path) : math;\n      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;\n\n      var resolver = function resolver() {\n        var instance = load(factory);\n\n        if (instance && typeof instance.transform === 'function') {\n          throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path=\"expression.transform\"');\n        }\n\n        if (isTypedFunction(existing) && isTypedFunction(instance)) {\n          if (options.override) {// replace the existing typed function (nothing to do)\n          } else {\n            // merge the existing and new typed function\n            instance = typed(existing, instance);\n          }\n\n          return instance;\n        }\n\n        if (existing === undefined || options.override) {\n          return instance;\n        }\n\n        if (!options.silent) {\n          throw new Error('Cannot import \"' + name + '\": already exists');\n        }\n      };\n\n      if (factory.lazy !== false) {\n        lazy(namespace, name, resolver);\n\n        if (existingTransform) {\n          _deleteTransform(name);\n        } else {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            lazy(math.expression.mathWithTransform, name, resolver);\n          }\n        }\n      } else {\n        namespace[name] = resolver();\n\n        if (existingTransform) {\n          _deleteTransform(name);\n        } else {\n          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {\n            math.expression.mathWithTransform[name] = resolver();\n          }\n        }\n      }\n\n      math.emit('import', name, resolver, factory.path);\n    } else {\n      // unnamed factory.\n      // no lazy loading\n      load(factory);\n    }\n  }\n  /**\n   * Check whether given object is a type which can be imported\n   * @param {Function | number | string | boolean | null | Unit | Complex} object\n   * @return {boolean}\n   * @private\n   */\n\n\n  function isSupportedType(object) {\n    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || object && type.isUnit(object) || object && type.isComplex(object) || object && type.isBigNumber(object) || object && type.isFraction(object) || object && type.isMatrix(object) || object && Array.isArray(object);\n  }\n  /**\n   * Test whether a given thing is a typed-function\n   * @param {*} fn\n   * @return {boolean} Returns true when `fn` is a typed-function\n   */\n\n\n  function isTypedFunction(fn) {\n    return typeof fn === 'function' && _typeof(fn.signatures) === 'object';\n  }\n\n  function allowedInExpressions(name) {\n    return !unsafe.hasOwnProperty(name);\n  }\n\n  function factoryAllowedInExpressions(factory) {\n    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);\n  } // namespaces and functions not available in the parser for safety reasons\n\n\n  var unsafe = {\n    'expression': true,\n    'type': true,\n    'docs': true,\n    'error': true,\n    'json': true,\n    'chain': true // chain method not supported. Note that there is a unit chain too.\n\n  };\n  return mathImport;\n}\n\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.name = 'import';\nexports.factory = factory;\nexports.lazy = true;","'use strict'; // list of identifiers of nodes in order of their precedence\n// also contains information about left/right associativity\n// and which other operator the operator is associative with\n// Example:\n// addition is associative with addition and subtraction, because:\n// (a+b)+c=a+(b+c)\n// (a+b)-c=a+(b-c)\n//\n// postfix operators are left associative, prefix operators\n// are right associative\n//\n// It's also possible to set the following properties:\n// latexParens: if set to false, this node doesn't need to be enclosed\n//              in parentheses when using LaTeX\n// latexLeftParens: if set to false, this !OperatorNode's!\n//                  left argument doesn't need to be enclosed\n//                  in parentheses\n// latexRightParens: the same for the right argument\n\nvar properties = [{\n  // assignment\n  'AssignmentNode': {},\n  'FunctionAssignmentNode': {}\n}, {\n  // conditional expression\n  'ConditionalNode': {\n    latexLeftParens: false,\n    latexRightParens: false,\n    latexParens: false // conditionals don't need parentheses in LaTeX because\n    // they are 2 dimensional\n\n  }\n}, {\n  // logical or\n  'OperatorNode:or': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // logical xor\n  'OperatorNode:xor': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // logical and\n  'OperatorNode:and': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise or\n  'OperatorNode:bitOr': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise xor\n  'OperatorNode:bitXor': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitwise and\n  'OperatorNode:bitAnd': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // relational operators\n  'OperatorNode:equal': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:unequal': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:smaller': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:larger': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:smallerEq': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:largerEq': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'RelationalNode': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // bitshift operators\n  'OperatorNode:leftShift': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:rightArithShift': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:rightLogShift': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // unit conversion\n  'OperatorNode:to': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // range\n  'RangeNode': {}\n}, {\n  // addition, subtraction\n  'OperatorNode:add': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']\n  },\n  'OperatorNode:subtract': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // multiply, divide, modulus\n  'OperatorNode:multiply': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']\n  },\n  'OperatorNode:divide': {\n    associativity: 'left',\n    associativeWith: [],\n    latexLeftParens: false,\n    latexRightParens: false,\n    latexParens: false // fractions don't require parentheses because\n    // they're 2 dimensional, so parens aren't needed\n    // in LaTeX\n\n  },\n  'OperatorNode:dotMultiply': {\n    associativity: 'left',\n    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']\n  },\n  'OperatorNode:dotDivide': {\n    associativity: 'left',\n    associativeWith: []\n  },\n  'OperatorNode:mod': {\n    associativity: 'left',\n    associativeWith: []\n  }\n}, {\n  // unary prefix operators\n  'OperatorNode:unaryPlus': {\n    associativity: 'right'\n  },\n  'OperatorNode:unaryMinus': {\n    associativity: 'right'\n  },\n  'OperatorNode:bitNot': {\n    associativity: 'right'\n  },\n  'OperatorNode:not': {\n    associativity: 'right'\n  }\n}, {\n  // exponentiation\n  'OperatorNode:pow': {\n    associativity: 'right',\n    associativeWith: [],\n    latexRightParens: false // the exponent doesn't need parentheses in\n    // LaTeX because it's 2 dimensional\n    // (it's on top)\n\n  },\n  'OperatorNode:dotPow': {\n    associativity: 'right',\n    associativeWith: []\n  }\n}, {\n  // factorial\n  'OperatorNode:factorial': {\n    associativity: 'left'\n  }\n}, {\n  // matrix transpose\n  'OperatorNode:transpose': {\n    associativity: 'left'\n  }\n}];\n/**\n * Get the precedence of a Node.\n * Higher number for higher precedence, starting with 0.\n * Returns null if the precedence is undefined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {number|null}\n */\n\nfunction getPrecedence(_node, parenthesis) {\n  var node = _node;\n\n  if (parenthesis !== 'keep') {\n    // ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n\n  var identifier = node.getIdentifier();\n\n  for (var i = 0; i < properties.length; i++) {\n    if (identifier in properties[i]) {\n      return i;\n    }\n  }\n\n  return null;\n}\n/**\n * Get the associativity of an operator (left or right).\n * Returns a string containing 'left' or 'right' or null if\n * the associativity is not defined.\n *\n * @param {Node}\n * @param {string} parenthesis\n * @return {string|null}\n * @throws {Error}\n */\n\n\nfunction getAssociativity(_node, parenthesis) {\n  var node = _node;\n\n  if (parenthesis !== 'keep') {\n    // ParenthesisNodes are only ignored when not in 'keep' mode\n    node = _node.getContent();\n  }\n\n  var identifier = node.getIdentifier();\n  var index = getPrecedence(node, parenthesis);\n\n  if (index === null) {\n    // node isn't in the list\n    return null;\n  }\n\n  var property = properties[index][identifier];\n\n  if (property.hasOwnProperty('associativity')) {\n    if (property.associativity === 'left') {\n      return 'left';\n    }\n\n    if (property.associativity === 'right') {\n      return 'right';\n    } // associativity is invalid\n\n\n    throw Error('\\'' + identifier + '\\' has the invalid associativity \\'' + property.associativity + '\\'.');\n  } // associativity is undefined\n\n\n  return null;\n}\n/**\n * Check if an operator is associative with another operator.\n * Returns either true or false or null if not defined.\n *\n * @param {Node} nodeA\n * @param {Node} nodeB\n * @param {string} parenthesis\n * @return {bool|null}\n */\n\n\nfunction isAssociativeWith(nodeA, nodeB, parenthesis) {\n  // ParenthesisNodes are only ignored when not in 'keep' mode\n  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;\n  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;\n  var identifierA = a.getIdentifier();\n  var identifierB = b.getIdentifier();\n  var index = getPrecedence(a, parenthesis);\n\n  if (index === null) {\n    // node isn't in the list\n    return null;\n  }\n\n  var property = properties[index][identifierA];\n\n  if (property.hasOwnProperty('associativeWith') && property.associativeWith instanceof Array) {\n    for (var i = 0; i < property.associativeWith.length; i++) {\n      if (property.associativeWith[i] === identifierB) {\n        return true;\n      }\n    }\n\n    return false;\n  } // associativeWith is not defined\n\n\n  return null;\n}\n\nmodule.exports.properties = properties;\nmodule.exports.getPrecedence = getPrecedence;\nmodule.exports.getAssociativity = getAssociativity;\nmodule.exports.isAssociativeWith = isAssociativeWith;","'use strict';\n\nvar number = require('../../utils/number');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a range. A range has a start, step, and end, and contains functions\n   * to iterate over the range.\n   *\n   * A range can be constructed as:\n   *\n   *     const range = new Range(start, end)\n   *     const range = new Range(start, end, step)\n   *\n   * To get the result of the range:\n   *     range.forEach(function (x) {\n   *         console.log(x)\n   *     })\n   *     range.map(function (x) {\n   *         return math.sin(x)\n   *     })\n   *     range.toArray()\n   *\n   * Example usage:\n   *\n   *     const c = new Range(2, 6)       // 2:1:5\n   *     c.toArray()                     // [2, 3, 4, 5]\n   *     const d = new Range(2, -3, -1)  // 2:-1:-2\n   *     d.toArray()                     // [2, 1, 0, -1, -2]\n   *\n   * @class Range\n   * @constructor Range\n   * @param {number} start  included lower bound\n   * @param {number} end    excluded upper bound\n   * @param {number} [step] step size, default value is 1\n   */\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    var hasStart = start !== null && start !== undefined;\n    var hasEnd = end !== null && end !== undefined;\n    var hasStep = step !== null && step !== undefined;\n\n    if (hasStart) {\n      if (type.isBigNumber(start)) {\n        start = start.toNumber();\n      } else if (typeof start !== 'number') {\n        throw new TypeError('Parameter start must be a number');\n      }\n    }\n\n    if (hasEnd) {\n      if (type.isBigNumber(end)) {\n        end = end.toNumber();\n      } else if (typeof end !== 'number') {\n        throw new TypeError('Parameter end must be a number');\n      }\n    }\n\n    if (hasStep) {\n      if (type.isBigNumber(step)) {\n        step = step.toNumber();\n      } else if (typeof step !== 'number') {\n        throw new TypeError('Parameter step must be a number');\n      }\n    }\n\n    this.start = hasStart ? parseFloat(start) : 0;\n    this.end = hasEnd ? parseFloat(end) : 0;\n    this.step = hasStep ? parseFloat(step) : 1;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Range.prototype.type = 'Range';\n  Range.prototype.isRange = true;\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @memberof Range\n   * @param {string} str\n   * @return {Range | null} range\n   */\n\n  Range.parse = function (str) {\n    if (typeof str !== 'string') {\n      return null;\n    }\n\n    var args = str.split(':');\n    var nums = args.map(function (arg) {\n      return parseFloat(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return new Range(nums[0], nums[1]);\n\n      case 3:\n        return new Range(nums[0], nums[2], nums[1]);\n\n      default:\n        return null;\n    }\n  };\n  /**\n   * Create a clone of the range\n   * @return {Range} clone\n   */\n\n\n  Range.prototype.clone = function () {\n    return new Range(this.start, this.end, this.step);\n  };\n  /**\n   * Retrieve the size of the range.\n   * Returns an array containing one number, the number of elements in the range.\n   * @memberof Range\n   * @returns {number[]} size\n   */\n\n\n  Range.prototype.size = function () {\n    var len = 0;\n    var start = this.start;\n    var step = this.step;\n    var end = this.end;\n    var diff = end - start;\n\n    if (number.sign(step) === number.sign(diff)) {\n      len = Math.ceil(diff / step);\n    } else if (diff === 0) {\n      len = 0;\n    }\n\n    if (isNaN(len)) {\n      len = 0;\n    }\n\n    return [len];\n  };\n  /**\n   * Calculate the minimum value in the range\n   * @memberof Range\n   * @return {number | undefined} min\n   */\n\n\n  Range.prototype.min = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start;\n      } else {\n        // negative step\n        return this.start + (size - 1) * this.step;\n      }\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * Calculate the maximum value in the range\n   * @memberof Range\n   * @return {number | undefined} max\n   */\n\n\n  Range.prototype.max = function () {\n    var size = this.size()[0];\n\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start + (size - 1) * this.step;\n      } else {\n        // negative step\n        return this.start;\n      }\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * Execute a callback function for each value in the range.\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Range being traversed.\n   */\n\n\n  Range.prototype.forEach = function (callback) {\n    var x = this.start;\n    var step = this.step;\n    var end = this.end;\n    var i = 0;\n\n    if (step > 0) {\n      while (x < end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    } else if (step < 0) {\n      while (x > end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n  };\n  /**\n   * Execute a callback function for each value in the Range, and return the\n   * results as an array\n   * @memberof Range\n   * @param {function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @returns {Array} array\n   */\n\n\n  Range.prototype.map = function (callback) {\n    var array = [];\n    this.forEach(function (value, index, obj) {\n      array[index[0]] = callback(value, index, obj);\n    });\n    return array;\n  };\n  /**\n   * Create an Array with a copy of the Ranges data\n   * @memberof Range\n   * @returns {Array} array\n   */\n\n\n  Range.prototype.toArray = function () {\n    var array = [];\n    this.forEach(function (value, index) {\n      array[index[0]] = value;\n    });\n    return array;\n  };\n  /**\n   * Get the primitive value of the Range, a one dimensional array\n   * @memberof Range\n   * @returns {Array} array\n   */\n\n\n  Range.prototype.valueOf = function () {\n    // TODO: implement a caching mechanism for range.valueOf()\n    return this.toArray();\n  };\n  /**\n   * Get a string representation of the range, with optional formatting options.\n   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\n   * @memberof Range\n   * @param {Object | number | function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  Range.prototype.format = function (options) {\n    var str = number.format(this.start, options);\n\n    if (this.step !== 1) {\n      str += ':' + number.format(this.step, options);\n    }\n\n    str += ':' + number.format(this.end, options);\n    return str;\n  };\n  /**\n   * Get a string representation of the range.\n   * @memberof Range\n   * @returns {string}\n   */\n\n\n  Range.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the range\n   * @memberof Range\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   */\n\n\n  Range.prototype.toJSON = function () {\n    return {\n      mathjs: 'Range',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n  /**\n   * Instantiate a Range from a JSON object\n   * @memberof Range\n   * @param {Object} json A JSON object structured as:\n   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\n   * @return {Range}\n   */\n\n\n  Range.fromJSON = function (json) {\n    return new Range(json.start, json.end, json.step);\n  };\n\n  return Range;\n}\n\nexports.name = 'Range';\nexports.path = 'type';\nexports.factory = factory;","module.exports = __WEBPACK_EXTERNAL_MODULE_VBo9__;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var numeric = load(require('../../type/numeric'));\n  var getTypeOf = load(require('../../function/utils/typeof'));\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n   * @private\n   */\n\n  var divideScalar = typed('divide', {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, getTypeOf(y));\n      res.value = divideScalar(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, getTypeOf(x));\n      res.value = divideScalar(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n  return divideScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar clone = require('../../utils/object').clone;\n\nvar validateIndex = require('../../utils/array').validateIndex;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index                     An index containing ranges for each\n   *                                          dimension\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n\n  var subset = typed('subset', {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n  subset.toTex = undefined; // use default template\n\n  return subset;\n  /**\n   * Retrieve a subset of a string\n   * @param {string} str            string from which to get a substring\n   * @param {Index} index           An index containing ranges for each dimension\n   * @returns {string} substring\n   * @private\n   */\n\n  function _getSubstring(str, index) {\n    if (!type.isIndex(index)) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n\n    if (index.size().length !== 1) {\n      throw new DimensionError(index.size().length, 1);\n    } // validate whether the range is out of range\n\n\n    var strLen = str.length;\n    validateIndex(index.min()[0], strLen);\n    validateIndex(index.max()[0], strLen);\n    var range = index.dimension(0);\n    var substr = '';\n    range.forEach(function (v) {\n      substr += str.charAt(v);\n    });\n    return substr;\n  }\n  /**\n   * Replace a substring in a string\n   * @param {string} str            string to be replaced\n   * @param {Index} index           An index containing ranges for each dimension\n   * @param {string} replacement    Replacement string\n   * @param {string} [defaultValue] Default value to be uses when resizing\n   *                                the string. is ' ' by default\n   * @returns {string} result\n   * @private\n   */\n\n\n  function _setSubstring(str, index, replacement, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      // TODO: better error message\n      throw new TypeError('Index expected');\n    }\n\n    if (index.size().length !== 1) {\n      throw new DimensionError(index.size().length, 1);\n    }\n\n    if (defaultValue !== undefined) {\n      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultValue = ' ';\n    }\n\n    var range = index.dimension(0);\n    var len = range.size()[0];\n\n    if (len !== replacement.length) {\n      throw new DimensionError(range.size()[0], replacement.length);\n    } // validate whether the range is out of range\n\n\n    var strLen = str.length;\n    validateIndex(index.min()[0]);\n    validateIndex(index.max()[0]); // copy the string into an array with characters\n\n    var chars = [];\n\n    for (var i = 0; i < strLen; i++) {\n      chars[i] = str.charAt(i);\n    }\n\n    range.forEach(function (v, i) {\n      chars[v] = replacement.charAt(i[0]);\n    }); // initialize undefined characters with a space\n\n    if (chars.length > strLen) {\n      for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n        if (!chars[_i]) {\n          chars[_i] = defaultValue;\n        }\n      }\n    }\n\n    return chars.join('');\n  }\n}\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\n\n\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return getSafeProperty(object, key);\n}\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\n\n\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  } // clone the object, and apply the property to the clone\n\n\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}\n\nexports.name = 'subset';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var parse = load(require('../parse'));\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.eval(expr)\n   *     math.eval(expr, scope)\n   *     math.eval([expr1, expr2, expr3, ...])\n   *     math.eval([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.eval('(2+3)/4')                // 1.25\n   *     math.eval('sqrt(3^2 + 4^2)')        // 5\n   *     math.eval('sqrt(-4)')               // 2i\n   *     math.eval(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.eval('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n\n  return typed('compile', {\n    'string': function string(expr) {\n      var scope = {};\n      return parse(expr).compile().eval(scope);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return parse(expr).compile().eval(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = {};\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().eval(scope);\n      });\n    }\n  });\n}\n\nexports.name = 'eval';\nexports.factory = factory;","'use strict';\n/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\n\nfunction DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\n\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;\nmodule.exports = DimensionError;","'use strict';\n\nvar IndexError = require('../../error/IndexError');\n/**\n * Transform zero-based indices to one-based indices in errors\n * @param {Error} err\n * @returns {Error} Returns the transformed error\n */\n\n\nexports.transform = function (err) {\n  if (err && err.isIndexError) {\n    return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);\n  }\n\n  return err;\n};","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm07 = function algorithm07(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n\n    var i, j; // result arrays\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // matrix\n\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = [];\n    var xb = []; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop values in column j\n\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n\n  return algorithm07;\n}\n\nexports.name = 'algorithm07';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n   * @private\n   */\n  var add = typed('add', {\n    'number, number': function numberNumber(x, y) {\n      return x + y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = add(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n  return add;\n}\n\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar errorTransform = require('../../transform/error.transform').transform;\n\nvar setSafeProperty = require('../../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        return matrix(object).subset(index, value).valueOf();\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}\n\nexports.factory = factory;","module.exports = __WEBPACK_EXTERNAL_MODULE_YeEv__;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar latex = require('../../utils/latex');\n\nvar escape = require('../../utils/string').escape;\n\nvar hasOwnProperty = require('../../utils/object').hasOwnProperty;\n\nvar map = require('../../utils/array').map;\n\nvar validateSafeMethod = require('../../utils/customs').validateSafeMethod;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed, math) {\n  var Node = load(require('./Node'));\n  var SymbolNode = load(require('./SymbolNode'));\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    } // validate input\n\n\n    if (!type.isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n    if (!Array.isArray(args) || !args.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.fn = fn;\n    this.args = args || []; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    }); // TODO: deprecated since v3, remove some day\n\n    var deprecated = function deprecated() {\n      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');\n    };\n\n    Object.defineProperty(this, 'object', {\n      get: deprecated,\n      set: deprecated\n    });\n  }\n\n  FunctionNode.prototype = new Node();\n  FunctionNode.prototype.type = 'FunctionNode';\n  FunctionNode.prototype.isFunctionNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionNode.prototype._compile = function (math, argNames) {\n    if (!(this instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode');\n    } // compile arguments\n\n\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (type.isSymbolNode(this.fn)) {\n      // we can statically determine whether the function has an rawArgs property\n      var name = this.fn.name;\n      var fn = name in math ? getSafeProperty(math, name) : undefined;\n      var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        // \"raw\" evaluation\n        var rawArgs = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          return (name in scope ? getSafeProperty(scope, name) : fn)(rawArgs, math, _extends({}, scope, args));\n        };\n      } else {\n        // \"regular\" evaluation\n        if (evalArgs.length === 1) {\n          var evalArg0 = evalArgs[0];\n          return function evalFunctionNode(scope, args, context) {\n            return (name in scope ? getSafeProperty(scope, name) : fn)(evalArg0(scope, args, context));\n          };\n        } else if (evalArgs.length === 2) {\n          var _evalArg = evalArgs[0];\n          var evalArg1 = evalArgs[1];\n          return function evalFunctionNode(scope, args, context) {\n            return (name in scope ? getSafeProperty(scope, name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));\n          };\n        } else {\n          return function evalFunctionNode(scope, args, context) {\n            return (name in scope ? getSafeProperty(scope, name) : fn).apply(null, map(evalArgs, function (evalArg) {\n              return evalArg(scope, args, context);\n            }));\n          };\n        }\n      }\n    } else if (type.isAccessorNode(this.fn) && type.isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      var evalObject = this.fn.object._compile(math, argNames);\n\n      var prop = this.fn.index.getObjectProperty();\n      var _rawArgs = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        validateSafeMethod(object, prop);\n        var isRaw = object[prop] && object[prop].rawArgs;\n        return isRaw ? object[prop](_rawArgs, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : object[prop].apply(object, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    } else {\n      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      var evalFn = this.fn._compile(math, argNames);\n\n      var _rawArgs2 = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var fn = evalFn(scope, args, context);\n        var isRaw = fn && fn.rawArgs;\n        return isRaw ? fn(_rawArgs2, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : fn.apply(fn, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionNode.prototype.forEach = function (callback) {\n    callback(this.fn, 'fn', this);\n\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new FunctionNode(fn, args);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n\n\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  }; // backup Node's toString function\n  // @private\n\n\n  var nodeToString = FunctionNode.prototype.toString;\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, name)) {\n      // callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    } // fall back to Node's toString\n\n\n    return nodeToString.call(this, options);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n    var fn = type.isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n    return fn + '(' + args.join(', ') + ')';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'FunctionNode',\n      fn: this.fn,\n      args: this.args\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionNode}\n   */\n\n\n  FunctionNode.fromJSON = function (json) {\n    return new FunctionNode(json.fn, json.args);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    }); // format the arguments like \"add(2, 4.2)\"\n\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = new RegExp('\\\\$(?:\\\\{([a-z_][a-z_0-9]*)(?:\\\\[([0-9]+)\\\\])?\\\\}|\\\\$)', 'ig');\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (_typeof(property)) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (type.isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (type.isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (type.isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  } // backup Node's toTex function\n  // @private\n\n\n  var nodeToTex = FunctionNode.prototype.toTex;\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, this.name)) {\n      // callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    } // fall back to Node's toTex\n\n\n    return nodeToTex.call(this, options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) {\n      // get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n    var latexConverter;\n\n    if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {\n      // .toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n\n    var customToTex;\n\n    switch (_typeof(latexConverter)) {\n      case 'function':\n        // a callback function\n        customToTex = latexConverter(this, options);\n        break;\n\n      case 'string':\n        // a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n\n      case 'object':\n        // an object with different \"converters\" for different numbers of arguments\n        switch (_typeof(latexConverter[args.length])) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n\n    }\n\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n\n    return expandTemplate(latex.defaultTemplate, this, options);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n\n  return FunctionNode;\n}\n\nexports.name = 'FunctionNode';\nexports.path = 'expression.node';\nexports.math = true; // request access to the math namespace as 5th argument of the factory function\n\nexports.factory = factory;","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n\n  var sum = typed('sum', {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  sum.toTex = undefined; // use default template\n\n  return sum;\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    if (sum === undefined) {\n      switch (config.number) {\n        case 'number':\n          return 0;\n\n        case 'BigNumber':\n          return new type.BigNumber(0);\n\n        case 'Fraction':\n          return new type.Fraction(0);\n\n        default:\n          return 0;\n      }\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var _sum2 = reduce(array, dim, add);\n\n      return _sum2;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n}\n\nexports.name = 'sum';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isBigNumber = require('./bignumber/isBigNumber');\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\n\n\nexports.clone = function clone(x) {\n  var type = _typeof(x); // immutable primitive types\n\n\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  } // use clone function of the object when available\n\n\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  } // array\n\n\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp\n  // object\n\n  return exports.map(x, clone);\n};\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\n\n\nexports.map = function (object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (exports.hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n};\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\n\n\nexports.extend = function (a, b) {\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n\n  return a;\n};\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\n\n\nexports.deepExtend = function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    if (exports.hasOwnProperty(b, prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n\n        if (a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n\n  return a;\n};\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\n\n\nexports.deepEqual = function deepEqual(a, b) {\n  var prop, i, len;\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!exports.deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!exports.deepEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n};\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\n\n\nexports.canDefineProperty = function () {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {}\n      });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n};\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n * On older browsers (<IE8), the function will fall back to direct evaluation\n * of the properties value.\n * @param {Object} object   Object where to add the property\n * @param {string} prop     Property name\n * @param {Function} fn     Function returning the property value. Called\n *                          without arguments.\n */\n\n\nexports.lazy = function (object, prop, fn) {\n  if (exports.canDefineProperty()) {\n    var _uninitialized = true;\n\n    var _value;\n\n    Object.defineProperty(object, prop, {\n      get: function get() {\n        if (_uninitialized) {\n          _value = fn();\n          _uninitialized = false;\n        }\n\n        return _value;\n      },\n      set: function set(value) {\n        _value = value;\n        _uninitialized = false;\n      },\n      configurable: true,\n      enumerable: true\n    });\n  } else {\n    // fall back to immediate evaluation\n    object[prop] = fn();\n  }\n};\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\n\n\nexports.traverse = function (object, path) {\n  var obj = object;\n\n  if (path) {\n    var names = path.split('.');\n\n    for (var i = 0; i < names.length; i++) {\n      var name = names[i];\n\n      if (!(name in obj)) {\n        obj[name] = {};\n      }\n\n      obj = obj[name];\n    }\n  }\n\n  return obj;\n};\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\n\n\nexports.hasOwnProperty = function (object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n};\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\n\n\nexports.isFactory = function (object) {\n  return object && typeof object.factory === 'function';\n};","'use strict';\n\nvar util = require('../../utils/index');\n\nvar DimensionError = require('../../error/DimensionError');\n\nvar string = util.string;\nvar array = util.array;\nvar object = util.object;\nvar number = util.number;\nvar isArray = Array.isArray;\nvar isNumber = number.isNumber;\nvar isInteger = number.isInteger;\nvar isString = string.isString;\nvar validateIndex = array.validateIndex;\n\nfunction factory(type, config, load, typed) {\n  var getArrayDataType = load(require('./utils/getArrayDataType'));\n  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)\n\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   */\n\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (type.isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = object.clone(data._data);\n        this._size = object.clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data); // get the dimensions of the array\n\n      this._size = array.size(this._data); // verify the dimensions of the array, TODO: compute size while processing array\n\n      array.validate(this._data, this._size); // data type unknown\n\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n\n  DenseMatrix.prototype = new Matrix();\n  /**\n   * Attach type information\n   */\n\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | DenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    } // check index\n\n\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n\n    var data = this._data;\n\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    return data;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n\n\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n\n    var i, ii, indexI; // enlarge matrix when needed\n\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n\n    _fit(this, size, defaultValue); // traverse over the dimensions\n\n\n    var data = this._data;\n\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    } // set new value\n\n\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n\n\n  function _get(matrix, index) {\n    if (!type.isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = index.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      } // validate if any of the ranges in the index is out of range\n\n\n      var min = index.min();\n      var max = index.max();\n\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      } // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n\n\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n\n\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n\n\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if (type.isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = array.size(submatrix);\n    }\n\n    if (isScalar) {\n      // set a scalar\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!object.deepEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      } // enlarge matrix when needed\n\n\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n\n      _fit(matrix, size, defaultValue); // insert the sub matrix\n\n\n      var dims = iSize.length;\n      var dim = 0;\n\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n\n    return matrix;\n  }\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n\n\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isArray(size)) {\n      throw new TypeError('Array expected');\n    } // matrix to resize\n\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, size, defaultValue);\n  };\n\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data; // go deep\n\n      while (isArray(v)) {\n        v = v[0];\n      }\n\n      return v;\n    } // resize matrix\n\n\n    matrix._size = size.slice(0); // copy the array\n\n    matrix._data = array.resize(matrix._data, matrix._size, defaultValue); // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = array.reshape(m._data, size);\n    m._size = size.slice(0);\n    return m;\n  };\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n\n\n  function _fit(matrix, size, defaultValue) {\n    var // copy the array\n    newSize = matrix._size.slice(0);\n\n    var changed = false; // add dimensions when needed\n\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    } // enlarge size when needed\n\n\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n\n\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: object.clone(this._data),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n\n\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n\n\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        return callback(value, index, me);\n      }\n    }; // return dense format\n\n\n    return new DenseMatrix({\n      data: recurse(this._data, []),\n      size: object.clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n\n    recurse(this._data, []);\n  };\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.toArray = function () {\n    return object.clone(this._data);\n  };\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n\n\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.format = function (options) {\n    return string.format(this._data, options);\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n\n\n  DenseMatrix.prototype.toString = function () {\n    return string.format(this._data);\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n\n\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Array}                      The array vector with the diagonal values.\n   */\n\n\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (type.isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix\n\n    var data = []; // loop rows\n\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data: data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                   The matrix size.\n   * @param {number | Array} value          The values for the diagonal.\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]        The default value for non-diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if (type.isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if (type.isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    if (defaultValue && isString(datatype)) {\n      // convert defaultValue to the same datatype\n      defaultValue = typed.convert(defaultValue, datatype);\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (type.isMatrix(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // discover default value if needed\n\n\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = type.isBigNumber(_value(0)) ? new type.BigNumber(0) : 0;\n    } // empty array\n\n\n    var data = []; // check we need to resize array\n\n    if (size.length > 0) {\n      // resize array\n      data = array.resize(data, size, defaultValue); // fill diagonal\n\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    } // create DenseMatrix\n\n\n    return new DenseMatrix({\n      data: data,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n\n\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]); // swap rows\n\n    DenseMatrix._swapRows(i, j, this._data); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   */\n\n\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @return {Array} data\n   */\n\n\n  function preprocess(data) {\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var elem = data[i];\n\n      if (isArray(elem)) {\n        data[i] = preprocess(elem);\n      } else if (elem && elem.isMatrix === true) {\n        data[i] = preprocess(elem.valueOf());\n      }\n    }\n\n    return data;\n  } // register this type in the base class Matrix\n\n\n  type.Matrix._storage.dense = DenseMatrix;\n  type.Matrix._storage['default'] = DenseMatrix; // exports\n\n  return DenseMatrix;\n}\n\nexports.name = 'DenseMatrix';\nexports.path = 'type';\nexports.factory = factory;\nexports.lazy = false; // no lazy loading, as we alter type.Matrix._storage","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm05 = function algorithm05(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm05;\n}\n\nexports.name = 'algorithm05';\nexports.factory = factory;","'use strict';\n\nmodule.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr; // c arrays\n\n  var cindex = c._index; // vars\n\n  var k, k0, k1, i; // check we need to process values (pattern matrix)\n\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i); // x(i) = A, check we need to call function this time\n\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row\n\n          u[i] = mark;\n        } else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      } else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row\n\n        u[i] = mark;\n      }\n    }\n  } else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k]; // check value exists in current j\n\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark; // add i to pattern of C\n\n        cindex.push(i);\n      } else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n};","'use strict';\n\nrequire('./../utils/polyfills');\n\nvar isFactory = require('./../utils/object').isFactory;\n\nvar typedFactory = require('./typed');\n\nvar emitter = require('./../utils/emitter');\n\nvar importFactory = require('./function/import');\n\nvar configFactory = require('./function/config');\n/**\n * Math.js core. Creates a new, empty math.js instance\n * @param {Object} [options] Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\n\n\nexports.create = function create(options) {\n  // simple test for ES5 support\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');\n  } // cached factories and instances\n\n\n  var factories = [];\n  var instances = []; // create a namespace for the mathjs instance, and attach emitter functions\n\n  var math = emitter.mixin({});\n  math.type = {};\n  math.expression = {\n    transform: {},\n    mathWithTransform: {} // create a new typed instance\n\n  };\n  math.typed = typedFactory.create(math.type); // create configuration options. These are private\n\n  var _config = {\n    // minimum relative difference between two compared values,\n    // used by all comparison functions\n    epsilon: 1e-12,\n    // type of default matrix output. Choose 'matrix' (default) or 'array'\n    matrix: 'Matrix',\n    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n    number: 'number',\n    // number of significant digits in BigNumbers\n    precision: 64,\n    // predictable output type of functions. When true, output type depends only\n    // on the input types. When false (default), output type can vary depending\n    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n    // predictable is false, and returns `NaN` when true.\n    predictable: false,\n    // random seed for seeded pseudo random number generation\n    // null = randomly seed\n    randomSeed: null\n    /**\n     * Load a function or data type from a factory.\n     * If the function or data type already exists, the existing instance is\n     * returned.\n     * @param {{type: string, name: string, factory: Function}} factory\n     * @returns {*}\n     */\n\n  };\n\n  function load(factory) {\n    if (!isFactory(factory)) {\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n\n    var index = factories.indexOf(factory);\n    var instance;\n\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, _config, load, math.typed, math);\n      } else {\n        instance = factory.factory(math.type, _config, load, math.typed);\n      } // append to the cache\n\n\n      factories.push(factory);\n      instances.push(instance);\n    } else {\n      // already existing function, return the cached instance\n      instance = instances[index];\n    }\n\n    return instance;\n  } // load the import and config functions\n\n\n  math['import'] = load(importFactory);\n  math['config'] = load(configFactory);\n  math.expression.mathWithTransform['config'] = math['config']; // apply options\n\n  if (options) {\n    math.config(options);\n  }\n\n  return math;\n};","'use strict';\n\nvar escapeLatex = require('escape-latex');\n\nexports.symbols = {\n  // GREEK LETTERS\n  Alpha: 'A',\n  alpha: '\\\\alpha',\n  Beta: 'B',\n  beta: '\\\\beta',\n  Gamma: '\\\\Gamma',\n  gamma: '\\\\gamma',\n  Delta: '\\\\Delta',\n  delta: '\\\\delta',\n  Epsilon: 'E',\n  epsilon: '\\\\epsilon',\n  varepsilon: '\\\\varepsilon',\n  Zeta: 'Z',\n  zeta: '\\\\zeta',\n  Eta: 'H',\n  eta: '\\\\eta',\n  Theta: '\\\\Theta',\n  theta: '\\\\theta',\n  vartheta: '\\\\vartheta',\n  Iota: 'I',\n  iota: '\\\\iota',\n  Kappa: 'K',\n  kappa: '\\\\kappa',\n  varkappa: '\\\\varkappa',\n  Lambda: '\\\\Lambda',\n  lambda: '\\\\lambda',\n  Mu: 'M',\n  mu: '\\\\mu',\n  Nu: 'N',\n  nu: '\\\\nu',\n  Xi: '\\\\Xi',\n  xi: '\\\\xi',\n  Omicron: 'O',\n  omicron: 'o',\n  Pi: '\\\\Pi',\n  pi: '\\\\pi',\n  varpi: '\\\\varpi',\n  Rho: 'P',\n  rho: '\\\\rho',\n  varrho: '\\\\varrho',\n  Sigma: '\\\\Sigma',\n  sigma: '\\\\sigma',\n  varsigma: '\\\\varsigma',\n  Tau: 'T',\n  tau: '\\\\tau',\n  Upsilon: \"\\\\Upsilon\",\n  upsilon: \"\\\\upsilon\",\n  Phi: '\\\\Phi',\n  phi: '\\\\phi',\n  varphi: '\\\\varphi',\n  Chi: 'X',\n  chi: '\\\\chi',\n  Psi: '\\\\Psi',\n  psi: '\\\\psi',\n  Omega: '\\\\Omega',\n  omega: '\\\\omega',\n  // logic\n  'true': '\\\\mathrm{True}',\n  'false': '\\\\mathrm{False}',\n  // other\n  i: 'i',\n  // TODO use \\i ??\n  inf: '\\\\infty',\n  Inf: '\\\\infty',\n  infinity: '\\\\infty',\n  Infinity: '\\\\infty',\n  oo: '\\\\infty',\n  lim: '\\\\lim',\n  'undefined': '\\\\mathbf{?}'\n};\nexports.operators = {\n  'transpose': '^\\\\top',\n  'ctranspose': '^H',\n  'factorial': '!',\n  'pow': '^',\n  'dotPow': '.^\\\\wedge',\n  // TODO find ideal solution\n  'unaryPlus': '+',\n  'unaryMinus': '-',\n  'bitNot': '\\\\~',\n  // TODO find ideal solution\n  'not': '\\\\neg',\n  'multiply': '\\\\cdot',\n  'divide': '\\\\frac',\n  // TODO how to handle that properly?\n  'dotMultiply': '.\\\\cdot',\n  // TODO find ideal solution\n  'dotDivide': '.:',\n  // TODO find ideal solution\n  'mod': '\\\\mod',\n  'add': '+',\n  'subtract': '-',\n  'to': '\\\\rightarrow',\n  'leftShift': '<<',\n  'rightArithShift': '>>',\n  'rightLogShift': '>>>',\n  'equal': '=',\n  'unequal': '\\\\neq',\n  'smaller': '<',\n  'larger': '>',\n  'smallerEq': '\\\\leq',\n  'largerEq': '\\\\geq',\n  'bitAnd': '\\\\&',\n  'bitXor': \"\\\\underline{|}\",\n  'bitOr': '|',\n  'and': '\\\\wedge',\n  'xor': '\\\\veebar',\n  'or': '\\\\vee'\n};\nexports.defaultTemplate = \"\\\\mathrm{${name}}\\\\left(${args}\\\\right)\";\nvar units = {\n  deg: '^\\\\circ'\n};\n\nexports.escape = function (string) {\n  return escapeLatex(string, {\n    'preserveFormatting': true\n  });\n}; // @param {string} name\n// @param {boolean} isUnit\n\n\nexports.toSymbol = function (name, isUnit) {\n  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\n  if (isUnit) {\n    if (units.hasOwnProperty(name)) {\n      return units[name];\n    }\n\n    return '\\\\mathrm{' + exports.escape(name) + '}';\n  }\n\n  if (exports.symbols.hasOwnProperty(name)) {\n    return exports.symbols[name];\n  }\n\n  return exports.escape(name);\n};","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * A ResultSet contains a list or results\n   * @class ResultSet\n   * @param {Array} entries\n   * @constructor ResultSet\n   */\n  function ResultSet(entries) {\n    if (!(this instanceof ResultSet)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.entries = entries || [];\n  }\n  /**\n   * Attach type information\n   */\n\n\n  ResultSet.prototype.type = 'ResultSet';\n  ResultSet.prototype.isResultSet = true;\n  /**\n   * Returns the array with results hold by this ResultSet\n   * @memberof ResultSet\n   * @returns {Array} entries\n   */\n\n  ResultSet.prototype.valueOf = function () {\n    return this.entries;\n  };\n  /**\n   * Returns the stringified results of the ResultSet\n   * @memberof ResultSet\n   * @returns {string} string\n   */\n\n\n  ResultSet.prototype.toString = function () {\n    return '[' + this.entries.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the ResultSet\n   * @memberof ResultSet\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   */\n\n\n  ResultSet.prototype.toJSON = function () {\n    return {\n      mathjs: 'ResultSet',\n      entries: this.entries\n    };\n  };\n  /**\n   * Instantiate a ResultSet from a JSON object\n   * @memberof ResultSet\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   * @return {ResultSet}\n   */\n\n\n  ResultSet.fromJSON = function (json) {\n    return new ResultSet(json.entries);\n  };\n\n  return ResultSet;\n}\n\nexports.name = 'ResultSet';\nexports.path = 'type';\nexports.factory = factory;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","/**\n * typed-function\n *\n * Type checking for JavaScript functions\n *\n * https://github.com/josdejong/typed-function\n */\n'use strict';\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // OldNode. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like OldNode.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.typed = factory();\n  }\n}(this, function () {\n\n  function ok () {\n    return true;\n  }\n\n  function notOk () {\n    return false;\n  }\n\n  function undef () {\n    return undefined;\n  }\n\n  /**\n   * @typedef {{\n   *   params: Param[],\n   *   fn: function\n   * }} Signature\n   *\n   * @typedef {{\n   *   types: Type[],\n   *   restParam: boolean\n   * }} Param\n   *\n   * @typedef {{\n   *   name: string,\n   *   typeIndex: number,\n   *   test: function,\n   *   conversion?: ConversionDef,\n   *   conversionIndex: number,\n   * }} Type\n   *\n   * @typedef {{\n   *   from: string,\n   *   to: string,\n   *   convert: function (*) : *\n   * }} ConversionDef\n   *\n   * @typedef {{\n   *   name: string,\n   *   test: function(*) : boolean\n   * }} TypeDef\n   */\n\n  // create a new instance of typed-function\n  function create () {\n    // data type tests\n    var _types = [\n      { name: 'number',    test: function (x) { return typeof x === 'number' } },\n      { name: 'string',    test: function (x) { return typeof x === 'string' } },\n      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },\n      { name: 'Function',  test: function (x) { return typeof x === 'function'} },\n      { name: 'Array',     test: Array.isArray },\n      { name: 'Date',      test: function (x) { return x instanceof Date } },\n      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },\n      { name: 'Object',    test: function (x) {\n        return typeof x === 'object' && x.constructor === Object\n      }},\n      { name: 'null',      test: function (x) { return x === null } },\n      { name: 'undefined', test: function (x) { return x === undefined } }\n    ];\n\n    var anyType = {\n      name: 'any',\n      test: ok\n    }\n\n    // types which need to be ignored\n    var _ignore = [];\n\n    // type conversions\n    var _conversions = [];\n\n    // This is a temporary object, will be replaced with a typed function at the end\n    var typed = {\n      types: _types,\n      conversions: _conversions,\n      ignore: _ignore\n    };\n\n    /**\n     * Find the test function for a type\n     * @param {String} typeName\n     * @return {TypeDef} Returns the type definition when found,\n     *                    Throws a TypeError otherwise\n     */\n    function findTypeByName (typeName) {\n      var entry = findInArray(typed.types, function (entry) {\n        return entry.name === typeName;\n      });\n\n      if (entry) {\n        return entry;\n      }\n\n      if (typeName === 'any') { // special baked-in case 'any'\n        return anyType;\n      }\n\n      var hint = findInArray(typed.types, function (entry) {\n        return entry.name.toLowerCase() === typeName.toLowerCase();\n      });\n\n      throw new TypeError('Unknown type \"' + typeName + '\"' +\n          (hint ? ('. Did you mean \"' + hint.name + '\"?') : ''));\n    }\n\n    /**\n     * Find the index of a type definition. Handles special case 'any'\n     * @param {TypeDef} type\n     * @return {number}\n     */\n    function findTypeIndex(type) {\n      if (type === anyType) {\n        return 999;\n      }\n\n      return typed.types.indexOf(type);\n    }\n\n    /**\n     * Find a type that matches a value.\n     * @param {*} value\n     * @return {string} Returns the name of the first type for which\n     *                  the type test matches the value.\n     */\n    function findTypeName(value) {\n      var entry = findInArray(typed.types, function (entry) {\n        return entry.test(value);\n      });\n\n      if (entry) {\n        return entry.name;\n      }\n\n      throw new TypeError('Value has unknown type. Value: ' + value);\n    }\n\n    /**\n     * Find a specific signature from a (composed) typed function, for example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *\n     * Function find only only works for exact matches.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature   Signature to be found, can be\n     *                                        an array or a comma separated string.\n     * @return {Function}                     Returns the matching signature, or\n     *                                        throws an error when no signature\n     *                                        is found.\n     */\n    function find (fn, signature) {\n      if (!fn.signatures) {\n        throw new TypeError('Function is no typed-function');\n      }\n\n      // normalize input\n      var arr;\n      if (typeof signature === 'string') {\n        arr = signature.split(',');\n        for (var i = 0; i < arr.length; i++) {\n          arr[i] = arr[i].trim();\n        }\n      }\n      else if (Array.isArray(signature)) {\n        arr = signature;\n      }\n      else {\n        throw new TypeError('String array or a comma separated string expected');\n      }\n\n      var str = arr.join(',');\n\n      // find an exact match\n      var match = fn.signatures[str];\n      if (match) {\n        return match;\n      }\n\n      // TODO: extend find to match non-exact signatures\n\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');\n    }\n\n    /**\n     * Convert a given value to another data type.\n     * @param {*} value\n     * @param {string} type\n     */\n    function convert (value, type) {\n      var from = findTypeName(value);\n\n      // check conversion is needed\n      if (type === from) {\n        return value;\n      }\n\n      for (var i = 0; i < typed.conversions.length; i++) {\n        var conversion = typed.conversions[i];\n        if (conversion.from === from && conversion.to === type) {\n          return conversion.convert(value);\n        }\n      }\n\n      throw new Error('Cannot convert from ' + from + ' to ' + type);\n    }\n    \n    /**\n     * Stringify parameters in a normalized way\n     * @param {Param[]} params\n     * @return {string}\n     */\n    function stringifyParams (params) {\n      return params\n          .map(function (param) {\n            var typeNames = param.types.map(getTypeName);\n\n            return (param.restParam ? '...' : '') + typeNames.join('|');\n          })\n          .join(',');\n    }\n\n    /**\n     * Parse a parameter, like \"...number | boolean\"\n     * @param {string} param\n     * @param {ConversionDef[]} conversions\n     * @return {Param} param\n     */\n    function parseParam (param, conversions) {\n      var restParam = param.indexOf('...') === 0;\n      var types = (!restParam)\n          ? param\n          : (param.length > 3)\n              ? param.slice(3)\n              : 'any';\n\n      var typeNames = types.split('|').map(trim)\n          .filter(notEmpty)\n          .filter(notIgnore);\n\n      var matchingConversions = filterConversions(conversions, typeNames);\n\n      var exactTypes = typeNames.map(function (typeName) {\n        var type = findTypeByName(typeName);\n\n        return {\n          name: typeName,\n          typeIndex: findTypeIndex(type),\n          test: type.test,\n          conversion: null,\n          conversionIndex: -1\n        };\n      });\n\n      var convertibleTypes = matchingConversions.map(function (conversion) {\n        var type = findTypeByName(conversion.from);\n\n        return {\n          name: conversion.from,\n          typeIndex: findTypeIndex(type),\n          test: type.test,\n          conversion: conversion,\n          conversionIndex: conversions.indexOf(conversion)\n        };\n      });\n\n      return {\n        types: exactTypes.concat(convertibleTypes),\n        restParam: restParam\n      };\n    }\n\n    /**\n     * Parse a signature with comma separated parameters,\n     * like \"number | boolean, ...string\"\n     * @param {string} signature\n     * @param {function} fn\n     * @param {ConversionDef[]} conversions\n     * @return {Signature | null} signature\n     */\n    function parseSignature (signature, fn, conversions) {\n      var params = [];\n\n      if (signature.trim() !== '') {\n        params = signature\n            .split(',')\n            .map(trim)\n            .map(function (param, index, array) {\n              var parsedParam = parseParam(param, conversions);\n\n              if (parsedParam.restParam && (index !== array.length - 1)) {\n                throw new SyntaxError('Unexpected rest parameter \"' + param + '\": ' +\n                    'only allowed for the last parameter');\n              }\n\n              return parsedParam;\n          });\n      }\n\n      if (params.some(isInvalidParam)) {\n        // invalid signature: at least one parameter has no types\n        // (they may have been filtered)\n        return null;\n      }\n\n      return {\n        params: params,\n        fn: fn\n      };\n    }\n\n    /**\n     * Test whether a set of params contains a restParam\n     * @param {Param[]} params\n     * @return {boolean} Returns true when the last parameter is a restParam\n     */\n    function hasRestParam(params) {\n      var param = last(params)\n      return param ? param.restParam : false;\n    }\n\n    /**\n     * Test whether a parameter contains conversions\n     * @param {Param} param\n     * @return {boolean} Returns true when at least one of the parameters\n     *                   contains a conversion.\n     */\n    function hasConversions(param) {\n      return param.types.some(function (type) {\n        return type.conversion != null;\n      });\n    }\n\n    /**\n     * Create a type test for a single parameter, which can have one or multiple\n     * types.\n     * @param {Param} param\n     * @return {function(x: *) : boolean} Returns a test function\n     */\n    function compileTest(param) {\n      if (!param || param.types.length === 0) {\n        // nothing to do\n        return ok;\n      }\n      else if (param.types.length === 1) {\n        return findTypeByName(param.types[0].name).test;\n      }\n      else if (param.types.length === 2) {\n        var test0 = findTypeByName(param.types[0].name).test;\n        var test1 = findTypeByName(param.types[1].name).test;\n        return function or(x) {\n          return test0(x) || test1(x);\n        }\n      }\n      else { // param.types.length > 2\n        var tests = param.types.map(function (type) {\n          return findTypeByName(type.name).test;\n        })\n        return function or(x) {\n          for (var i = 0; i < tests.length; i++) {\n            if (tests[i](x)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n    }\n\n    /**\n     * Create a test for all parameters of a signature\n     * @param {Param[]} params\n     * @return {function(args: Array<*>) : boolean}\n     */\n    function compileTests(params) {\n      var tests, test0, test1;\n\n      if (hasRestParam(params)) {\n        // variable arguments like '...number'\n        tests = initial(params).map(compileTest);\n        var varIndex = tests.length;\n        var lastTest = compileTest(last(params));\n        var testRestParam = function (args) {\n          for (var i = varIndex; i < args.length; i++) {\n            if (!lastTest(args[i])) {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n          return testRestParam(args) && (args.length >= varIndex + 1);\n        };\n      }\n      else {\n        // no variable arguments\n        if (params.length === 0) {\n          return function testArgs(args) {\n            return args.length === 0;\n          };\n        }\n        else if (params.length === 1) {\n          test0 = compileTest(params[0]);\n          return function testArgs(args) {\n            return test0(args[0]) && args.length === 1;\n          };\n        }\n        else if (params.length === 2) {\n          test0 = compileTest(params[0]);\n          test1 = compileTest(params[1]);\n          return function testArgs(args) {\n            return test0(args[0]) && test1(args[1]) && args.length === 2;\n          };\n        }\n        else { // arguments.length > 2\n          tests = params.map(compileTest);\n          return function testArgs(args) {\n            for (var i = 0; i < tests.length; i++) {\n              if (!tests[i](args[i])) {\n                return false;\n              }\n            }\n            return args.length === tests.length;\n          };\n        }\n      }\n    }\n\n    /**\n     * Find the parameter at a specific index of a signature.\n     * Handles rest parameters.\n     * @param {Signature} signature\n     * @param {number} index\n     * @return {Param | null} Returns the matching parameter when found,\n     *                        null otherwise.\n     */\n    function getParamAtIndex(signature, index) {\n      return index < signature.params.length\n          ? signature.params[index]\n          : hasRestParam(signature.params)\n              ? last(signature.params)\n              : null\n    }\n\n    /**\n     * Get all type names of a parameter\n     * @param {Signature} signature\n     * @param {number} index\n     * @param {boolean} excludeConversions\n     * @return {string[]} Returns an array with type names\n     */\n    function getExpectedTypeNames (signature, index, excludeConversions) {\n      var param = getParamAtIndex(signature, index);\n      var types = param\n          ? excludeConversions\n                  ? param.types.filter(isExactType)\n                  : param.types\n          : [];\n\n      return types.map(getTypeName);\n    }\n\n    /**\n     * Returns the name of a type\n     * @param {Type} type\n     * @return {string} Returns the type name\n     */\n    function getTypeName(type) {\n      return type.name;\n    }\n\n    /**\n     * Test whether a type is an exact type or conversion\n     * @param {Type} type\n     * @return {boolean} Returns true when\n     */\n    function isExactType(type) {\n      return type.conversion === null || type.conversion === undefined;\n    }\n\n    /**\n     * Helper function for creating error messages: create an array with\n     * all available types on a specific argument index.\n     * @param {Signature[]} signatures\n     * @param {number} index\n     * @return {string[]} Returns an array with available types\n     */\n    function mergeExpectedParams(signatures, index) {\n      var typeNames = uniq(flatMap(signatures, function (signature) {\n        return getExpectedTypeNames(signature, index, false);\n      }));\n\n      return (typeNames.indexOf('any') !== -1) ? ['any'] : typeNames;\n    }\n\n    /**\n     * Create\n     * @param {string} name             The name of the function\n     * @param {array.<*>} args          The actual arguments passed to the function\n     * @param {Signature[]} signatures  A list with available signatures\n     * @return {TypeError} Returns a type error with additional data\n     *                     attached to it in the property `data`\n     */\n    function createError(name, args, signatures) {\n      var err, expected;\n      var _name = name || 'unnamed';\n\n      // test for wrong type at some index\n      var matchingSignatures = signatures;\n      var index;\n      for (index = 0; index < args.length; index++) {\n        var nextMatchingDefs = matchingSignatures.filter(function (signature) {\n          var test = compileTest(getParamAtIndex(signature, index));\n          return (index < signature.params.length || hasRestParam(signature.params)) &&\n              test(args[index]);\n        });\n\n        if (nextMatchingDefs.length === 0) {\n          // no matching signatures anymore, throw error \"wrong type\"\n          expected = mergeExpectedParams(matchingSignatures, index);\n          if (expected.length > 0) {\n            var actualType = findTypeName(args[index]);\n\n            err = new TypeError('Unexpected type of argument in function ' + _name +\n                ' (expected: ' + expected.join(' or ') +\n                ', actual: ' + actualType + ', index: ' + index + ')');\n            err.data = {\n              category: 'wrongType',\n              fn: _name,\n              index: index,\n              actual: actualType,\n              expected: expected\n            }\n            return err;\n          }\n        }\n        else {\n          matchingSignatures = nextMatchingDefs;\n        }\n      }\n\n      // test for too few arguments\n      var lengths = matchingSignatures.map(function (signature) {\n        return hasRestParam(signature.params) ? Infinity : signature.params.length;\n      });\n      if (args.length < Math.min.apply(null, lengths)) {\n        expected = mergeExpectedParams(matchingSignatures, index);\n        err = new TypeError('Too few arguments in function ' + _name +\n            ' (expected: ' + expected.join(' or ') +\n            ', index: ' + args.length + ')');\n        err.data = {\n          category: 'tooFewArgs',\n          fn: _name,\n          index: args.length,\n          expected: expected\n        }\n        return err;\n      }\n\n      // test for too many arguments\n      var maxLength = Math.max.apply(null, lengths);\n      if (args.length > maxLength) {\n        err = new TypeError('Too many arguments in function ' + _name +\n            ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n        err.data = {\n          category: 'tooManyArgs',\n          fn: _name,\n          index: args.length,\n          expectedLength: maxLength\n        }\n        return err;\n      }\n\n      err = new TypeError('Arguments of type \"' + args.join(', ') +\n          '\" do not match any of the defined signatures of function ' + _name + '.');\n      err.data = {\n        category: 'mismatch',\n        actual: args.map(findTypeName)\n      }\n      return err;\n    }\n\n    /**\n     * Find the lowest index of all exact types of a parameter (no conversions)\n     * @param {Param} param\n     * @return {number} Returns the index of the lowest type in typed.types\n     */\n    function getLowestTypeIndex (param) {\n      var min = 999;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].typeIndex);\n        }\n      }\n\n      return min;\n    }\n\n    /**\n     * Find the lowest index of the conversion of all types of the parameter\n     * having a conversion\n     * @param {Param} param\n     * @return {number} Returns the lowest index of the conversions of this type\n     */\n    function getLowestConversionIndex (param) {\n      var min = 999;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (!isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].conversionIndex);\n        }\n      }\n\n      return min;\n    }\n\n    /**\n     * Compare two params\n     * @param {Param} param1\n     * @param {Param} param2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareParams (param1, param2) {\n      var c;\n\n      // compare having a rest parameter or not\n      c = param1.restParam - param2.restParam;\n      if (c !== 0) {\n        return c;\n      }\n\n      // compare having conversions or not\n      c = hasConversions(param1) - hasConversions(param2);\n      if (c !== 0) {\n        return c;\n      }\n\n      // compare the index of the types\n      c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n      if (c !== 0) {\n        return c;\n      }\n\n      // compare the index of any conversion\n      return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n    }\n\n    /**\n     * Compare two signatures\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareSignatures (signature1, signature2) {\n      var len = Math.min(signature1.params.length, signature2.params.length);\n      var i;\n      var c;\n\n      // compare whether the params have conversions at all or not\n      c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions)\n      if (c !== 0) {\n        return c;\n      }\n\n      // next compare whether the params have conversions one by one\n      for (i = 0; i < len; i++) {\n        c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);\n        if (c !== 0) {\n          return c;\n        }\n      }\n\n      // compare the types of the params one by one\n      for (i = 0; i < len; i++) {\n        c = compareParams(signature1.params[i], signature2.params[i]);\n        if (c !== 0) {\n          return c;\n        }\n      }\n\n      // compare the number of params\n      return signature1.params.length - signature2.params.length;\n    }\n\n    /**\n     * Get params containing all types that can be converted to the defined types.\n     *\n     * @param {ConversionDef[]} conversions\n     * @param {string[]} typeNames\n     * @return {ConversionDef[]} Returns the conversions that are available\n     *                        for every type (if any)\n     */\n    function filterConversions(conversions, typeNames) {\n      var matches = {};\n\n      conversions.forEach(function (conversion) {\n        if (typeNames.indexOf(conversion.from) === -1 &&\n            typeNames.indexOf(conversion.to) !== -1 &&\n            !matches[conversion.from]) {\n          matches[conversion.from] = conversion;\n        }\n      });\n\n      return Object.keys(matches).map(function (from) {\n        return matches[from];\n      });\n    }\n\n    /**\n     * Preprocess arguments before calling the original function:\n     * - if needed convert the parameters\n     * - in case of rest parameters, move the rest parameters into an Array\n     * @param {Param[]} params\n     * @param {function} fn\n     * @return {function} Returns a wrapped function\n     */\n    function compileArgsPreprocessing(params, fn) {\n      var fnConvert = fn;\n\n      // TODO: can we make this wrapper function smarter/simpler?\n\n      if (params.some(hasConversions)) {\n        var restParam = hasRestParam(params);\n        var compiledConversions = params.map(compileArgConversion)\n\n        fnConvert = function convertArgs() {\n          var args = [];\n          var last = restParam ? arguments.length - 1 : arguments.length;\n          for (var i = 0; i < last; i++) {\n            args[i] = compiledConversions[i](arguments[i]);\n          }\n          if (restParam) {\n            args[last] = arguments[last].map(compiledConversions[last]);\n          }\n\n          return fn.apply(null, args);\n        }\n      }\n\n      var fnPreprocess = fnConvert;\n      if (hasRestParam(params)) {\n        var offset = params.length - 1;\n\n        fnPreprocess = function preprocessRestParams () {\n          return fnConvert.apply(null,\n              slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n        }\n      }\n\n      return fnPreprocess;\n    }\n\n    /**\n     * Compile conversion for a parameter to the right type\n     * @param {Param} param\n     * @return {function} Returns the wrapped function that will convert arguments\n     *\n     */\n    function compileArgConversion(param) {\n      var test0, test1, conversion0, conversion1;\n      var tests = [];\n      var conversions = [];\n\n      param.types.forEach(function (type) {\n        if (type.conversion) {\n          tests.push(findTypeByName(type.conversion.from).test);\n          conversions.push(type.conversion.convert);\n        }\n      });\n\n      // create optimized conversion functions depending on the number of conversions\n      switch (conversions.length) {\n        case 0:\n          return function convertArg(arg) {\n            return arg;\n          }\n\n        case 1:\n          test0 = tests[0]\n          conversion0 = conversions[0];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg)\n            }\n            return arg;\n          }\n\n        case 2:\n          test0 = tests[0]\n          test1 = tests[1]\n          conversion0 = conversions[0];\n          conversion1 = conversions[1];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg)\n            }\n            if (test1(arg)) {\n              return conversion1(arg)\n            }\n            return arg;\n          }\n\n        default:\n          return function convertArg(arg) {\n            for (var i = 0; i < conversions.length; i++) {\n              if (tests[i](arg)) {\n                return conversions[i](arg);\n              }\n            }\n            return arg;\n          }\n      }\n    }\n\n    /**\n     * Convert an array with signatures into a map with signatures,\n     * where signatures with union types are split into separate signatures\n     *\n     * Throws an error when there are conflicting types\n     *\n     * @param {Signature[]} signatures\n     * @return {Object.<string, function>}  Returns a map with signatures\n     *                                      as key and the original function\n     *                                      of this signature as value.\n     */\n    function createSignaturesMap(signatures) {\n      var signaturesMap = {};\n      signatures.forEach(function (signature) {\n        if (!signature.params.some(hasConversions)) {\n          splitParams(signature.params, true).forEach(function (params) {\n            signaturesMap[stringifyParams(params)] = signature.fn;\n          });\n        }\n      });\n\n      return signaturesMap;\n    }\n\n    /**\n     * Split params with union types in to separate params.\n     *\n     * For example:\n     *\n     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n     *     // returns:\n     *     // [\n     *     //   ['Array', 'string'],\n     *     //   ['Array', 'RegExp'],\n     *     //   ['Object', 'string'],\n     *     //   ['Object', 'RegExp']\n     *     // ]\n     *\n     * @param {Param[]} params\n     * @param {boolean} ignoreConversionTypes\n     * @return {Param[]}\n     */\n    function splitParams(params, ignoreConversionTypes) {\n      function _splitParams(params, index, types) {\n        if (index < params.length) {\n          var param = params[index]\n          var filteredTypes = ignoreConversionTypes\n              ? param.types.filter(isExactType)\n              : param.types;\n          var typeGroups\n\n          if (param.restParam) {\n            // split the types of a rest parameter in two:\n            // one with only exact types, and one with exact types and conversions\n            var exactTypes = filteredTypes.filter(isExactType)\n            typeGroups = exactTypes.length < filteredTypes.length\n                ? [exactTypes, filteredTypes]\n                : [filteredTypes]\n\n          }\n          else {\n            // split all the types of a regular parameter into one type per group\n            typeGroups = filteredTypes.map(function (type) {\n              return [type]\n            })\n          }\n\n          // recurse over the groups with types\n          return flatMap(typeGroups, function (typeGroup) {\n            return _splitParams(params, index + 1, types.concat([typeGroup]));\n          });\n\n        }\n        else {\n          // we've reached the end of the parameters. Now build a new Param\n          var splittedParams = types.map(function (type, typeIndex) {\n            return {\n              types: type,\n              restParam: (typeIndex === params.length - 1) && hasRestParam(params)\n            }\n          });\n\n          return [splittedParams];\n        }\n      }\n\n      return _splitParams(params, 0, []);\n    }\n\n    /**\n     * Test whether two signatures have a conflicting signature\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {boolean} Returns true when the signatures conflict, false otherwise.\n     */\n    function hasConflictingParams(signature1, signature2) {\n      var ii = Math.max(signature1.params.length, signature2.params.length);\n\n      for (var i = 0; i < ii; i++) {\n        var typesNames1 = getExpectedTypeNames(signature1, i, true);\n        var typesNames2 = getExpectedTypeNames(signature2, i, true);\n\n        if (!hasOverlap(typesNames1, typesNames2)) {\n          return false;\n        }\n      }\n\n      var len1 = signature1.params.length;\n      var len2 = signature2.params.length;\n      var restParam1 = hasRestParam(signature1.params);\n      var restParam2 = hasRestParam(signature2.params);\n\n      return restParam1\n          ? restParam2 ? (len1 === len2) : (len2 >= len1)\n          : restParam2 ? (len1 >= len2)  : (len1 === len2)\n    }\n\n    /**\n     * Create a typed function\n     * @param {String} name               The name for the typed function\n     * @param {Object.<string, function>} signaturesMap\n     *                                    An object with one or\n     *                                    multiple signatures as key, and the\n     *                                    function corresponding to the\n     *                                    signature as value.\n     * @return {function}  Returns the created typed function.\n     */\n    function createTypedFunction(name, signaturesMap) {\n      if (Object.keys(signaturesMap).length === 0) {\n        throw new SyntaxError('No signatures provided');\n      }\n\n      // parse the signatures, and check for conflicts\n      var parsedSignatures = [];\n      Object.keys(signaturesMap)\n          .map(function (signature) {\n            return parseSignature(signature, signaturesMap[signature], typed.conversions);\n          })\n          .filter(notNull)\n          .forEach(function (parsedSignature) {\n            // check whether this parameter conflicts with already parsed signatures\n            var conflictingSignature = findInArray(parsedSignatures, function (s) {\n              return hasConflictingParams(s, parsedSignature)\n            });\n            if (conflictingSignature) {\n              throw new TypeError('Conflicting signatures \"' +\n                  stringifyParams(conflictingSignature.params) + '\" and \"' +\n                  stringifyParams(parsedSignature.params) + '\".');\n            }\n\n            parsedSignatures.push(parsedSignature);\n          });\n\n      // split and filter the types of the signatures, and then order them\n      var signatures = flatMap(parsedSignatures, function (parsedSignature) {\n        var params = parsedSignature ? splitParams(parsedSignature.params, false) : []\n\n        return params.map(function (params) {\n          return {\n            params: params,\n            fn: parsedSignature.fn\n          };\n        });\n      }).filter(notNull);\n\n      signatures.sort(compareSignatures);\n\n      // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;\n\n      // compile the tests\n      var tests = signatures.map(function (signature) {\n        return compileTests(signature.params);\n      });\n\n      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n\n      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;\n\n      // compile the functions\n      var fns = signatures.map(function(signature) {\n        return compileArgsPreprocessing(signature.params, signature.fn)\n      });\n\n      var fn0 = ok0 ? fns[0] : undef;\n      var fn1 = ok1 ? fns[1] : undef;\n      var fn2 = ok2 ? fns[2] : undef;\n      var fn3 = ok3 ? fns[3] : undef;\n      var fn4 = ok4 ? fns[4] : undef;\n      var fn5 = ok5 ? fns[5] : undef;\n\n      var len0 = ok0 ? signatures[0].params.length : -1;\n      var len1 = ok1 ? signatures[1].params.length : -1;\n      var len2 = ok2 ? signatures[2].params.length : -1;\n      var len3 = ok3 ? signatures[3].params.length : -1;\n      var len4 = ok4 ? signatures[4].params.length : -1;\n      var len5 = ok5 ? signatures[5].params.length : -1;\n\n      // simple and generic, but also slow\n      var iStart = allOk ? 6 : 0;\n      var iEnd = signatures.length;\n      var generic = function generic() {\n        'use strict';\n\n        for (var i = iStart; i < iEnd; i++) {\n          if (tests[i](arguments)) {\n            return fns[i].apply(null, arguments);\n          }\n        }\n\n        throw createError(name, arguments, signatures);\n      }\n\n      // create the typed function\n      // fast, specialized version. Falls back to the slower, generic one if needed\n      var fn = function fn(arg0, arg1) {\n        'use strict';\n\n        if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(null, arguments); }\n        if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(null, arguments); }\n        if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(null, arguments); }\n        if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(null, arguments); }\n        if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(null, arguments); }\n        if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(null, arguments); }\n\n        return generic.apply(null, arguments);\n      }\n\n      // attach name the typed function\n      try {\n        Object.defineProperty(fn, 'name', {value: name});\n      }\n      catch (err) {\n        // old browsers do not support Object.defineProperty and some don't support setting the name property\n        // the function name is not essential for the functioning, it's mostly useful for debugging,\n        // so it's fine to have unnamed functions.\n      }\n\n      // attach signatures to the function\n      fn.signatures = createSignaturesMap(signatures);\n\n      return fn;\n    }\n\n    /**\n     * Test whether a type should be NOT be ignored\n     * @param {string} typeName\n     * @return {boolean}\n     */\n    function notIgnore(typeName) {\n      return typed.ignore.indexOf(typeName) === -1;\n    }\n\n    /**\n     * trim a string\n     * @param {string} str\n     * @return {string}\n     */\n    function trim(str) {\n      return str.trim();\n    }\n\n    /**\n     * Test whether a string is not empty\n     * @param {string} str\n     * @return {boolean}\n     */\n    function notEmpty(str) {\n      return !!str;\n    }\n\n    /**\n     * test whether a value is not strict equal to null\n     * @param {*} value\n     * @return {boolean}\n     */\n    function notNull(value) {\n      return value !== null;\n    }\n\n    /**\n     * Test whether a parameter has no types defined\n     * @param {Param} param\n     * @return {boolean}\n     */\n    function isInvalidParam (param) {\n      return param.types.length === 0;\n    }\n\n    /**\n     * Return all but the last items of an array\n     * @param {Array} arr\n     * @return {Array}\n     */\n    function initial(arr) {\n      return arr.slice(0, arr.length - 1);\n    }\n\n    /**\n     * return the last item of an array\n     * @param {Array} arr\n     * @return {*}\n     */\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n\n    /**\n     * Slice an array or function Arguments\n     * @param {Array | Arguments | IArguments} arr\n     * @param {number} start\n     * @param {number} [end]\n     * @return {Array}\n     */\n    function slice(arr, start, end) {\n      return Array.prototype.slice.call(arr, start, end);\n    }\n\n    /**\n     * Test whether an array contains some item\n     * @param {Array} array\n     * @param {*} item\n     * @return {boolean} Returns true if array contains item, false if not.\n     */\n    function contains(array, item) {\n      return array.indexOf(item) !== -1;\n    }\n\n    /**\n     * Test whether two arrays have overlapping items\n     * @param {Array} array1\n     * @param {Array} array2\n     * @return {boolean} Returns true when at least one item exists in both arrays\n     */\n    function hasOverlap(array1, array2) {\n      for (var i = 0; i < array1.length; i++) {\n        if (contains(array2, array1[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Return the first item from an array for which test(arr[i]) returns true\n     * @param {Array} arr\n     * @param {function} test\n     * @return {* | undefined} Returns the first matching item\n     *                         or undefined when there is no match\n     */\n    function findInArray(arr, test) {\n      for (var i = 0; i < arr.length; i++) {\n        if (test(arr[i])) {\n          return arr[i];\n        }\n      }\n      return undefined;\n    }\n\n    /**\n     * Filter unique items of an array with strings\n     * @param {string[]} arr\n     * @return {string[]}\n     */\n    function uniq(arr) {\n      var entries = {}\n      for (var i = 0; i < arr.length; i++) {\n        entries[arr[i]] = true;\n      }\n      return Object.keys(entries);\n    }\n\n    /**\n     * Flat map the result invoking a callback for every item in an array.\n     * https://gist.github.com/samgiles/762ee337dff48623e729\n     * @param {Array} arr\n     * @param {function} callback\n     * @return {Array}\n     */\n    function flatMap(arr, callback) {\n      return Array.prototype.concat.apply([], arr.map(callback));\n    }\n\n    /**\n     * Retrieve the function name from a set of typed functions,\n     * and check whether the name of all functions match (if given)\n     * @param {function[]} fns\n     */\n    function getName (fns) {\n      var name = '';\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n\n        // check whether the names are the same when defined\n        if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {\n          if (name === '') {\n            name = fn.name;\n          }\n          else if (name !== fn.name) {\n            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');\n            err.data = {\n              actual: fn.name,\n              expected: name\n            };\n            throw err;\n          }\n        }\n      }\n\n      return name;\n    }\n\n    // extract and merge all signatures of a list with typed functions\n    function extractSignatures(fns) {\n      var err;\n      var signaturesMap = {};\n\n      function validateUnique(_signature, _fn) {\n        if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {\n          err = new Error('Signature \"' + _signature + '\" is defined twice');\n          err.data = {signature: _signature};\n          throw err;\n          // else: both signatures point to the same function, that's fine\n        }\n      }\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n\n        // test whether this is a typed-function\n        if (typeof fn.signatures === 'object') {\n          // merge the signatures\n          for (var signature in fn.signatures) {\n            if (fn.signatures.hasOwnProperty(signature)) {\n              validateUnique(signature, fn.signatures[signature]);\n              signaturesMap[signature] = fn.signatures[signature];\n            }\n          }\n        }\n        else if (typeof fn.signature === 'string') {\n          validateUnique(fn.signature, fn);\n          signaturesMap[fn.signature] = fn;\n        }\n        else {\n          err = new TypeError('Function is no typed-function (index: ' + i + ')');\n          err.data = {index: i};\n          throw err;\n        }\n      }\n\n      return signaturesMap;\n    }\n\n    typed = createTypedFunction('typed', {\n      'string, Object': createTypedFunction,\n      'Object': function (signaturesMap) {\n        // find existing name\n        var fns = [];\n        for (var signature in signaturesMap) {\n          if (signaturesMap.hasOwnProperty(signature)) {\n            fns.push(signaturesMap[signature]);\n          }\n        }\n        var name = getName(fns);\n        return createTypedFunction(name, signaturesMap);\n      },\n      '...Function': function (fns) {\n        return createTypedFunction(getName(fns), extractSignatures(fns));\n      },\n      'string, ...Function': function (name, fns) {\n        return createTypedFunction(name, extractSignatures(fns));\n      }\n    });\n\n    typed.create = create;\n    typed.types = _types;\n    typed.conversions = _conversions;\n    typed.ignore = _ignore;\n    typed.convert = convert;\n    typed.find = find;\n\n    /**\n     * add a type\n     * @param {{name: string, test: function}} type\n     * @param {boolean} [beforeObjectTest=true]\n     *                          If true, the new test will be inserted before\n     *                          the test with name 'Object' (if any), since\n     *                          tests for Object match Array and classes too.\n     */\n    typed.addType = function (type, beforeObjectTest) {\n      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      if (beforeObjectTest !== false) {\n        for (var i = 0; i < typed.types.length; i++) {\n          if (typed.types[i].name === 'Object') {\n            typed.types.splice(i, 0, type);\n            return\n          }\n        }\n      }\n\n      typed.types.push(type);\n    };\n\n    // add a conversion\n    typed.addConversion = function (conversion) {\n      if (!conversion\n          || typeof conversion.from !== 'string'\n          || typeof conversion.to !== 'string'\n          || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n\n      typed.conversions.push(conversion);\n    };\n\n    return typed;\n  }\n\n  return create();\n}));","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  var algorithm01 = function algorithm01(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // process data types\n\n    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function\n\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars\n\n    var i, j; // result (DenseMatrix)\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated\n\n        w[i] = mark;\n      } // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        } else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  return algorithm01;\n}\n\nexports.name = 'algorithm01';\nexports.factory = factory;","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  var abs = typed('abs', {\n    'number': Math.abs,\n    'Complex': function Complex(x) {\n      return x.abs();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.abs();\n    },\n    'Fraction': function Fraction(x) {\n      return x.abs();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return deepMap(x, abs, true);\n    },\n    'Unit': function Unit(x) {\n      return x.abs();\n    }\n  });\n  abs.toTex = {\n    1: \"\\\\left|${args[0]}\\\\right|\"\n  };\n  return abs;\n}\n\nexports.name = 'abs';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var latex = require('../../utils/latex');\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  var mod = typed('mod', {\n    'number, number': _mod,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, mod, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, mod, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, mod, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, mod);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return mod(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, mod, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, mod, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, mod, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, mod, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, mod, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, mod, true).valueOf();\n    }\n  });\n  mod.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['mod'], \"${args[1]}\\\\right)\")\n  };\n  return mod;\n  /**\n   * Calculate the modulus of two numbers\n   * @param {number} x\n   * @param {number} y\n   * @returns {number} res\n   * @private\n   */\n\n  function _mod(x, y) {\n    if (y > 0) {\n      // We don't use JavaScript's % operator here as this doesn't work\n      // correctly for x < 0 and x === 0\n      // see https://en.wikipedia.org/wiki/Modulo_operation\n      return x - y * Math.floor(x / y);\n    } else if (y === 0) {\n      return x;\n    } else {\n      // y < 0\n      // TODO: implement mod for a negative divisor\n      throw new Error('Cannot calculate mod for a negative divisor');\n    }\n  }\n}\n\nexports.name = 'mod';\nexports.factory = factory;","'use strict';\n\nvar util = require('../../../utils/index');\n\nvar object = util.object;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  var abs = load(require('../../arithmetic/abs'));\n  var addScalar = load(require('../../arithmetic/addScalar'));\n  var divideScalar = load(require('../../arithmetic/divideScalar'));\n  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));\n  var subtract = load(require('../../arithmetic/subtract'));\n  var larger = load(require('../../relational/larger'));\n  var equalScalar = load(require('../../relational/equalScalar'));\n  var unaryMinus = load(require('../../arithmetic/unaryMinus'));\n  var SparseMatrix = type.SparseMatrix;\n  var DenseMatrix = type.DenseMatrix;\n  var Spa = type.Spa;\n  /**\n   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n   * row permutation vector `p` where `A[p,:] = L * U`\n   *\n   * Syntax:\n   *\n   *    math.lup(A)\n   *\n   * Example:\n   *\n   *    const m = [[2, 1], [1, 4]]\n   *    const r = math.lup(m)\n   *    // r = {\n   *    //   L: [[1, 0], [0.5, 1]],\n   *    //   U: [[2, 1], [0, 3.5]],\n   *    //   P: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    slu, lsolve, lusolve, usolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n   *\n   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n   */\n\n  var lup = typed('lup', {\n    'DenseMatrix': function DenseMatrix(m) {\n      return _denseLUP(m);\n    },\n    'SparseMatrix': function SparseMatrix(m) {\n      return _sparseLUP(m);\n    },\n    'Array': function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a); // lup, use matrix implementation\n\n      var r = _denseLUP(m); // result\n\n\n      return {\n        L: r.L.valueOf(),\n        U: r.U.valueOf(),\n        p: r.p\n      };\n    }\n  });\n\n  function _denseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1]; // minimum rows and columns\n\n    var n = Math.min(rows, columns); // matrix array, clone original data\n\n    var data = object.clone(m._data); // l matrix arrays\n\n    var ldata = [];\n    var lsize = [rows, n]; // u matrix arrays\n\n    var udata = [];\n    var usize = [n, columns]; // vars\n\n    var i, j, k; // permutation vector\n\n    var p = [];\n\n    for (i = 0; i < rows; i++) {\n      p[i] = i;\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows\n        for (i = 0; i < rows; i++) {\n          // min i,j\n          var min = Math.min(i, j); // v[i, j]\n\n          var s = 0; // loop up to min\n\n          for (k = 0; k < min; k++) {\n            // s = l[i, k] - data[k, j]\n            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n          }\n\n          data[i][j] = subtract(data[i][j], s);\n        }\n      } // row with larger value in cvector, row >= j\n\n\n      var pi = j;\n      var pabsv = 0;\n      var vjj = 0; // loop rows\n\n      for (i = j; i < rows; i++) {\n        // data @ i, j\n        var v = data[i][j]; // absolute value\n\n        var absv = abs(v); // value is greater than pivote value\n\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = i; // update max value\n\n          pabsv = absv; // value @ [j, j]\n\n          vjj = v;\n        }\n      } // swap rows (j <-> pi)\n\n\n      if (j !== pi) {\n        // swap values j <-> pi in p\n        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data\n\n        DenseMatrix._swapRows(j, pi, data);\n      } // check column is in lower triangular matrix\n\n\n      if (j < rows) {\n        // loop rows (lower triangular matrix)\n        for (i = j + 1; i < rows; i++) {\n          // value @ i, j\n          var vij = data[i][j];\n\n          if (!equalScalar(vij, 0)) {\n            // update data\n            data[i][j] = divideScalar(data[i][j], vjj);\n          }\n        }\n      }\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // initialize row in arrays\n        if (j === 0) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i] = [];\n          } // L\n\n\n          ldata[i] = [];\n        } // check we are in the upper triangular matrix\n\n\n        if (i < j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          } // check column exists in lower triangular matrix\n\n\n          if (j < rows) {\n            // L\n            ldata[i][j] = 0;\n          }\n\n          continue;\n        } // diagonal value\n\n\n        if (i === j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          } // check column exists in lower triangular matrix\n\n\n          if (j < rows) {\n            // L\n            ldata[i][j] = 1;\n          }\n\n          continue;\n        } // check row exists in upper triangular matrix\n\n\n        if (i < columns) {\n          // U\n          udata[i][j] = 0;\n        } // check column exists in lower triangular matrix\n\n\n        if (j < rows) {\n          // L\n          ldata[i][j] = data[i][j];\n        }\n      }\n    } // l matrix\n\n\n    var l = new DenseMatrix({\n      data: ldata,\n      size: lsize\n    }); // u matrix\n\n    var u = new DenseMatrix({\n      data: udata,\n      size: usize\n    }); // p vector\n\n    var pv = [];\n\n    for (i = 0, n = p.length; i < n; i++) {\n      pv[p[i]] = i;\n    } // return matrices\n\n\n    return {\n      L: l,\n      U: u,\n      p: pv,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n\n  function _sparseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1]; // minimum rows and columns\n\n    var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)\n\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // l matrix arrays\n\n    var lvalues = [];\n    var lindex = [];\n    var lptr = [];\n    var lsize = [rows, n]; // u matrix arrays\n\n    var uvalues = [];\n    var uindex = [];\n    var uptr = [];\n    var usize = [n, columns]; // vars\n\n    var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)\n\n    var pvCo = [];\n    var pvOc = [];\n\n    for (i = 0; i < rows; i++) {\n      pvCo[i] = i;\n      pvOc[i] = i;\n    } // swap indices in permutation vectors (condition x < y)!\n\n\n    var swapIndeces = function swapIndeces(x, y) {\n      // find pv indeces getting data from x and y\n      var kx = pvOc[x];\n      var ky = pvOc[y]; // update permutation vector current -> original\n\n      pvCo[kx] = y;\n      pvCo[ky] = x; // update permutation vector original -> current\n\n      pvOc[x] = ky;\n      pvOc[y] = kx;\n    }; // loop columns\n\n\n    var _loop = function _loop() {\n      // sparse accumulator\n      var spa = new Spa(); // check lower triangular matrix has a value @ column j\n\n      if (j < rows) {\n        // update ptr\n        lptr.push(lvalues.length); // first value in j column for lower triangular matrix\n\n        lvalues.push(1);\n        lindex.push(j);\n      } // update ptr\n\n\n      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // copy column j into sparse accumulator\n\n      for (k = k0; k < k1; k++) {\n        // row\n        i = index[k]; // copy column values into sparse accumulator (use permutation vector)\n\n        spa.set(pvCo[i], values[k]);\n      } // skip first column in upper triangular matrix\n\n\n      if (j > 0) {\n        // loop rows in column j (above diagonal)\n        spa.forEach(0, j - 1, function (k, vkj) {\n          // loop rows in column k (L)\n          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n            // check row is below k\n            if (i > k) {\n              // update spa value\n              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n            }\n          });\n        });\n      } // row with larger value in spa, row >= j\n\n\n      var pi = j;\n      var vjj = spa.get(j);\n      var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)\n\n      spa.forEach(j + 1, rows - 1, function (x, v) {\n        // absolute value\n        var absv = abs(v); // value is greater than pivote value\n\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = x; // update max value\n\n          pabsv = absv; // value @ [j, j]\n\n          vjj = v;\n        }\n      }); // swap rows (j <-> pi)\n\n      if (j !== pi) {\n        // swap values j <-> pi in L\n        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U\n\n\n        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa\n\n\n        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)\n\n        swapIndeces(j, pi);\n      } // loop values in spa (order by row)\n\n\n      spa.forEach(0, rows - 1, function (x, v) {\n        // check we are above diagonal\n        if (x <= j) {\n          // update upper triangular matrix\n          uvalues.push(v);\n          uindex.push(x);\n        } else {\n          // update value\n          v = divideScalar(v, vjj); // check value is non zero\n\n          if (!equalScalar(v, 0)) {\n            // update lower triangular matrix\n            lvalues.push(v);\n            lindex.push(x);\n          }\n        }\n      });\n    };\n\n    for (j = 0; j < columns; j++) {\n      _loop();\n    } // update ptrs\n\n\n    uptr.push(uvalues.length);\n    lptr.push(lvalues.length); // return matrices\n\n    return {\n      L: new SparseMatrix({\n        values: lvalues,\n        index: lindex,\n        ptr: lptr,\n        size: lsize\n      }),\n      U: new SparseMatrix({\n        values: uvalues,\n        index: uindex,\n        ptr: uptr,\n        size: usize\n      }),\n      p: pvCo,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n\n  return lup;\n}\n\nexports.name = 'lup';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  var algorithm03 = function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (DenseMatrix)\n\n\n    var cdata = []; // initialize dense matrix\n\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      } // process workspace\n\n\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  return algorithm03;\n}\n\nexports.name = 'algorithm03';\nexports.factory = factory;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Test whether two values are equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  var equalScalar = typed('equalScalar', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x === y || nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.equals(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return equalScalar(x.value, y.value);\n    }\n  });\n  return equalScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var larger = load(require('../relational/larger'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n\n  var max = typed('max', {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n  max.toTex = \"\\\\max\\\\left(${args}\\\\right)\";\n  return max;\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n\n\n  function _max(array) {\n    var max;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          max = NaN;\n        } else if (max === undefined || larger(value, max)) {\n          max = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n\n    if (max === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    return max;\n  }\n}\n\nexports.name = 'max';\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar typedFunction = require('typed-function');\n\nvar digits = require('./../utils/number').digits;\n\nvar isBigNumber = require('./../utils/bignumber/isBigNumber');\n\nvar isMatrix = require('./../utils/collection/isMatrix'); // returns a new instance of typed-function\n\n\nvar _createTyped = function createTyped() {\n  // initially, return the original instance of typed-function\n  // consecutively, return a new instance from typed.create.\n  _createTyped = typedFunction.create;\n  return typedFunction;\n};\n/**\n * Factory function for creating a new typed instance\n * @param {Object} type   Object with data types like Complex and BigNumber\n * @returns {Function}\n */\n\n\nexports.create = function create(type) {\n  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n  // type checks for all known types\n  //\n  // note that:\n  //\n  // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.\n  //   instanceof cannot be used because that would not allow to pass data from\n  //   one instance of math.js to another since each has it's own instance of Unit.\n  // - check the `isUnit` property via the constructor, so there will be no\n  //   matches for \"fake\" instances like plain objects with a property `isUnit`.\n  //   That is important for security reasons.\n  // - It must not be possible to override the type checks used internally,\n  //   for security reasons, so these functions are not exposed in the expression\n  //   parser.\n  type.isNumber = function (x) {\n    return typeof x === 'number';\n  };\n\n  type.isComplex = function (x) {\n    return type.Complex && x instanceof type.Complex || false;\n  };\n\n  type.isBigNumber = isBigNumber;\n\n  type.isFraction = function (x) {\n    return type.Fraction && x instanceof type.Fraction || false;\n  };\n\n  type.isUnit = function (x) {\n    return x && x.constructor.prototype.isUnit || false;\n  };\n\n  type.isString = function (x) {\n    return typeof x === 'string';\n  };\n\n  type.isArray = Array.isArray;\n  type.isMatrix = isMatrix;\n\n  type.isDenseMatrix = function (x) {\n    return x && x.isDenseMatrix && x.constructor.prototype.isMatrix || false;\n  };\n\n  type.isSparseMatrix = function (x) {\n    return x && x.isSparseMatrix && x.constructor.prototype.isMatrix || false;\n  };\n\n  type.isRange = function (x) {\n    return x && x.constructor.prototype.isRange || false;\n  };\n\n  type.isIndex = function (x) {\n    return x && x.constructor.prototype.isIndex || false;\n  };\n\n  type.isBoolean = function (x) {\n    return typeof x === 'boolean';\n  };\n\n  type.isResultSet = function (x) {\n    return x && x.constructor.prototype.isResultSet || false;\n  };\n\n  type.isHelp = function (x) {\n    return x && x.constructor.prototype.isHelp || false;\n  };\n\n  type.isFunction = function (x) {\n    return typeof x === 'function';\n  };\n\n  type.isDate = function (x) {\n    return x instanceof Date;\n  };\n\n  type.isRegExp = function (x) {\n    return x instanceof RegExp;\n  };\n\n  type.isObject = function (x) {\n    return _typeof(x) === 'object' && x.constructor === Object && !type.isComplex(x) && !type.isFraction(x);\n  };\n\n  type.isNull = function (x) {\n    return x === null;\n  };\n\n  type.isUndefined = function (x) {\n    return x === undefined;\n  };\n\n  type.isAccessorNode = function (x) {\n    return x && x.isAccessorNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isArrayNode = function (x) {\n    return x && x.isArrayNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isAssignmentNode = function (x) {\n    return x && x.isAssignmentNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isBlockNode = function (x) {\n    return x && x.isBlockNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isConditionalNode = function (x) {\n    return x && x.isConditionalNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isConstantNode = function (x) {\n    return x && x.isConstantNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isFunctionAssignmentNode = function (x) {\n    return x && x.isFunctionAssignmentNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isFunctionNode = function (x) {\n    return x && x.isFunctionNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isIndexNode = function (x) {\n    return x && x.isIndexNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isNode = function (x) {\n    return x && x.isNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isObjectNode = function (x) {\n    return x && x.isObjectNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isOperatorNode = function (x) {\n    return x && x.isOperatorNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isParenthesisNode = function (x) {\n    return x && x.isParenthesisNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isRangeNode = function (x) {\n    return x && x.isRangeNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isSymbolNode = function (x) {\n    return x && x.isSymbolNode && x.constructor.prototype.isNode || false;\n  };\n\n  type.isChain = function (x) {\n    return x && x.constructor.prototype.isChain || false;\n  }; // get a new instance of typed-function\n\n\n  var typed = _createTyped(); // define all types. The order of the types determines in which order function\n  // arguments are type-checked (so for performance it's important to put the\n  // most used types first).\n\n\n  typed.types = [{\n    name: 'number',\n    test: type.isNumber\n  }, {\n    name: 'Complex',\n    test: type.isComplex\n  }, {\n    name: 'BigNumber',\n    test: type.isBigNumber\n  }, {\n    name: 'Fraction',\n    test: type.isFraction\n  }, {\n    name: 'Unit',\n    test: type.isUnit\n  }, {\n    name: 'string',\n    test: type.isString\n  }, {\n    name: 'Array',\n    test: type.isArray\n  }, {\n    name: 'Matrix',\n    test: type.isMatrix\n  }, {\n    name: 'DenseMatrix',\n    test: type.isDenseMatrix\n  }, {\n    name: 'SparseMatrix',\n    test: type.isSparseMatrix\n  }, {\n    name: 'Range',\n    test: type.isRange\n  }, {\n    name: 'Index',\n    test: type.isIndex\n  }, {\n    name: 'boolean',\n    test: type.isBoolean\n  }, {\n    name: 'ResultSet',\n    test: type.isResultSet\n  }, {\n    name: 'Help',\n    test: type.isHelp\n  }, {\n    name: 'function',\n    test: type.isFunction\n  }, {\n    name: 'Date',\n    test: type.isDate\n  }, {\n    name: 'RegExp',\n    test: type.isRegExp\n  }, {\n    name: 'null',\n    test: type.isNull\n  }, {\n    name: 'undefined',\n    test: type.isUndefined\n  }, {\n    name: 'OperatorNode',\n    test: type.isOperatorNode\n  }, {\n    name: 'ConstantNode',\n    test: type.isConstantNode\n  }, {\n    name: 'SymbolNode',\n    test: type.isSymbolNode\n  }, {\n    name: 'ParenthesisNode',\n    test: type.isParenthesisNode\n  }, {\n    name: 'FunctionNode',\n    test: type.isFunctionNode\n  }, {\n    name: 'FunctionAssignmentNode',\n    test: type.isFunctionAssignmentNode\n  }, {\n    name: 'ArrayNode',\n    test: type.isArrayNode\n  }, {\n    name: 'AssignmentNode',\n    test: type.isAssignmentNode\n  }, {\n    name: 'BlockNode',\n    test: type.isBlockNode\n  }, {\n    name: 'ConditionalNode',\n    test: type.isConditionalNode\n  }, {\n    name: 'IndexNode',\n    test: type.isIndexNode\n  }, {\n    name: 'RangeNode',\n    test: type.isRangeNode\n  }, {\n    name: 'Node',\n    test: type.isNode\n  }, {\n    name: 'Object',\n    test: type.isObject // order 'Object' last, it matches on other classes too\n\n  }]; // TODO: add conversion from BigNumber to number?\n\n  typed.conversions = [{\n    from: 'number',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      // note: conversion from number to BigNumber can fail if x has >15 digits\n      if (digits(x) > 15) {\n        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');\n      }\n\n      return new type.BigNumber(x);\n    }\n  }, {\n    from: 'number',\n    to: 'Complex',\n    convert: function convert(x) {\n      return new type.Complex(x, 0);\n    }\n  }, {\n    from: 'number',\n    to: 'string',\n    convert: function convert(x) {\n      return x + '';\n    }\n  }, {\n    from: 'BigNumber',\n    to: 'Complex',\n    convert: function convert(x) {\n      return new type.Complex(x.toNumber(), 0);\n    }\n  }, {\n    from: 'Fraction',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');\n    }\n  }, {\n    from: 'Fraction',\n    to: 'Complex',\n    convert: function convert(x) {\n      return new type.Complex(x.valueOf(), 0);\n    }\n  }, {\n    from: 'number',\n    to: 'Fraction',\n    convert: function convert(x) {\n      var f = new type.Fraction(x);\n\n      if (f.valueOf() !== x) {\n        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');\n      }\n\n      return new type.Fraction(x);\n    }\n  }, {\n    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n    //  from: 'Fraction',\n    //  to: 'number',\n    //  convert: function (x) {\n    //    return x.valueOf()\n    //  }\n    // }, {\n    from: 'string',\n    to: 'number',\n    convert: function convert(x) {\n      var n = Number(x);\n\n      if (isNaN(n)) {\n        throw new Error('Cannot convert \"' + x + '\" to a number');\n      }\n\n      return n;\n    }\n  }, {\n    from: 'string',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      try {\n        return new type.BigNumber(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to BigNumber');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Fraction',\n    convert: function convert(x) {\n      try {\n        return new type.Fraction(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Fraction');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Complex',\n    convert: function convert(x) {\n      try {\n        return new type.Complex(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Complex');\n      }\n    }\n  }, {\n    from: 'boolean',\n    to: 'number',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'boolean',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      return new type.BigNumber(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'Fraction',\n    convert: function convert(x) {\n      return new type.Fraction(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'string',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'Array',\n    to: 'Matrix',\n    convert: function convert(array) {\n      return new type.DenseMatrix(array);\n    }\n  }, {\n    from: 'Matrix',\n    to: 'Array',\n    convert: function convert(matrix) {\n      return matrix.valueOf();\n    }\n  }];\n  return typed;\n};","'use strict';\n\nvar format = require('../../utils/string').format;\n\nvar escapeLatex = require('../../utils/latex').escape;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var getType = load(require('../../function/utils/typeof'));\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (arguments.length === 2) {\n      // TODO: remove deprecation error some day (created 2018-01-23)\n      throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs\n\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n  ;\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return format(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch (getType(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch (getType(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        var index = value.toLowerCase().indexOf('e');\n\n        if (index !== -1) {\n          return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n        }\n\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}\n\nexports.name = 'ConstantNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar forEach = require('../../utils/array').forEach;\n\nvar map = require('../../utils/array').map;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var ResultSet = load(require('../../type/resultset/ResultSet'));\n  /**\n   * @constructor BlockNode\n   * @extends {Node}\n   * Holds a set with blocks\n   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n   *            An array with blocks, where a block is constructed as an Object\n   *            with properties block, which is a Node, and visible, which is\n   *            a boolean. The property visible is optional and is true by default\n   */\n\n  function BlockNode(blocks) {\n    if (!(this instanceof BlockNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input, copy blocks\n\n\n    if (!Array.isArray(blocks)) throw new Error('Array expected');\n    this.blocks = blocks.map(function (block) {\n      var node = block && block.node;\n      var visible = block && block.visible !== undefined ? block.visible : true;\n      if (!type.isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');\n      return {\n        node: node,\n        visible: visible\n      };\n    });\n  }\n\n  BlockNode.prototype = new Node();\n  BlockNode.prototype.type = 'BlockNode';\n  BlockNode.prototype.isBlockNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  BlockNode.prototype._compile = function (math, argNames) {\n    var evalBlocks = map(this.blocks, function (block) {\n      return {\n        eval: block.node._compile(math, argNames),\n        visible: block.visible\n      };\n    });\n    return function evalBlockNodes(scope, args, context) {\n      var results = [];\n      forEach(evalBlocks, function evalBlockNode(block) {\n        var result = block.eval(scope, args, context);\n\n        if (block.visible) {\n          results.push(result);\n        }\n      });\n      return new ResultSet(results);\n    };\n  };\n  /**\n   * Execute a callback for each of the child blocks of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  BlockNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.blocks.length; i++) {\n      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n    }\n  };\n  /**\n   * Create a new BlockNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {BlockNode} Returns a transformed copy of the node\n   */\n\n\n  BlockNode.prototype.map = function (callback) {\n    var blocks = [];\n\n    for (var i = 0; i < this.blocks.length; i++) {\n      var block = this.blocks[i];\n\n      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\n      blocks[i] = {\n        node: node,\n        visible: block.visible\n      };\n    }\n\n    return new BlockNode(blocks);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {BlockNode}\n   */\n\n\n  BlockNode.prototype.clone = function () {\n    var blocks = this.blocks.map(function (block) {\n      return {\n        node: block.node,\n        visible: block.visible\n      };\n    });\n    return new BlockNode(blocks);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype._toString = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toString(options) + (param.visible ? '' : ';');\n    }).join('\\n');\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  BlockNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'BlockNode',\n      blocks: this.blocks\n    };\n  };\n  /**\n   * Instantiate an BlockNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n   *                       where mathjs is optional\n   * @returns {BlockNode}\n   */\n\n\n  BlockNode.fromJSON = function (json) {\n    return new BlockNode(json.blocks);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  BlockNode.prototype.toHTML = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n    }).join('<span class=\"math-separator\"><br /></span>');\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  BlockNode.prototype._toTex = function (options) {\n    return this.blocks.map(function (param) {\n      return param.node.toTex(options) + (param.visible ? '' : ';');\n    }).join('\\\\;\\\\;\\n');\n  };\n\n  return BlockNode;\n}\n\nexports.name = 'BlockNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var parse = load(require('../parse'));\n  /**\n   * Parse an expression. Returns a node tree, which can be evaluated by\n   * invoking node.eval().\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.parse(expr)\n   *     math.parse(expr, options)\n   *     math.parse([expr1, expr2, expr3, ...])\n   *     math.parse([expr1, expr2, expr3, ...], options)\n   *\n   * Example:\n   *\n   *     const node1 = math.parse('sqrt(3^2 + 4^2)')\n   *     node1.compile().eval() // 5\n   *\n   *     let scope = {a:3, b:4}\n   *     const node2 = math.parse('a * b') // 12\n   *     const code2 = node2.compile()\n   *     code2.eval(scope) // 12\n   *     scope.a = 5\n   *     code2.eval(scope) // 20\n   *\n   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].compile().eval() // 12\n   *\n   * See also:\n   *\n   *     eval, compile\n   *\n   * @param {string | string[] | Matrix} expr          Expression to be parsed\n   * @param {{nodes: Object<string, Node>}} [options]  Available options:\n   *                                                   - `nodes` a set of custom nodes\n   * @return {Node | Node[]} node\n   * @throws {Error}\n   */\n\n  return typed('parse', {\n    'string | Array | Matrix': parse,\n    'string | Array | Matrix, Object': parse\n  });\n}\n\nexports.name = 'parse';\nexports.factory = factory;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n\n  var smaller = typed('smaller', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x < y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === -1;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return smaller(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, smaller);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, smaller, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, smaller, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, smaller);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return smaller(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, smaller, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, smaller, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, smaller, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, smaller, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smaller, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smaller, true).valueOf();\n    }\n  });\n  smaller.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['smaller'], \"${args[1]}\\\\right)\")\n  };\n  return smaller;\n}\n\nexports.name = 'smaller';\nexports.factory = factory;","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n\n  var xor = typed('xor', {\n    'number, number': function numberNumber(x, y) {\n      return !!x !== !!y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return xor(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, xor);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, xor, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, xor, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, xor);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return xor(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, xor, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, xor, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, xor, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, xor, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, xor, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, xor, true).valueOf();\n    }\n  });\n  xor.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['xor'], \"${args[1]}\\\\right)\")\n  };\n  return xor;\n}\n\nexports.name = 'xor';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm11 = function algorithm11(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k]; // invoke callback\n\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\n\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    } // update ptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm11;\n}\n\nexports.name = 'algorithm11';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n\n  var or = typed('or', {\n    'number, number': function numberNumber(x, y) {\n      return !!(x || y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return or(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, or);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, or, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, or, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, or);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return or(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return or(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return or(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, or, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, or, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, or, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, or, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, or, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, or, true).valueOf();\n    }\n  });\n  or.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['or'], \"${args[1]}\\\\right)\")\n  };\n  return or;\n}\n\nexports.name = 'or';\nexports.factory = factory;","'use strict';\n\nvar util = require('../../utils/index');\n\nvar string = util.string;\nvar isString = string.isString;\n\nfunction factory(type, config, load, typed) {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *\n   *     let matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *\n   *     let matrix = math.matrix([[1, 2], [3, 4]])\n   *     matix.size()              // [2, 2]\n   *     matrix.resize([3, 2], 5)\n   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n  /**\n   * Get the Matrix storage constructor for the given format.\n   *\n   * @param {string} format       The Matrix storage format.\n   *\n   * @return {Function}           The Matrix storage constructor.\n   */\n\n  Matrix.storage = function (format) {\n    // check storage format is a string\n    if (!isString(format)) {\n      throw new TypeError('format must be a string value');\n    } // get storage format constructor\n\n\n    var constructor = Matrix._storage[format];\n\n    if (!constructor) {\n      throw new SyntaxError('Unsupported matrix storage format: ' + format);\n    } // return storage constructor\n\n\n    return constructor;\n  }; // a map with all constructors for all storage types\n\n\n  Matrix._storage = {};\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n\n\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n\n\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n\n\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n\n\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n\n\n  Matrix.prototype.size = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n\n\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n\n\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n\n\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n\n\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  }; // exports\n\n\n  return Matrix;\n}\n\nexports.name = 'Matrix';\nexports.path = 'type';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n   * @private\n   */\n  var multiplyScalar = typed('multiplyScalar', {\n    'number, number': function numberNumber(x, y) {\n      return x * y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n  return multiplyScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar keywords = require('../keywords');\n\nvar escape = require('../../utils/string').escape;\n\nvar forEach = require('../../utils/array').forEach;\n\nvar join = require('../../utils/array').join;\n\nvar latex = require('../../utils/latex');\n\nvar operators = require('../operators');\n\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor FunctionAssignmentNode\n   * @extends {Node}\n   * Function assignment\n   *\n   * @param {string} name           Function name\n   * @param {string[] | Array.<{name: string, type: string}>} params\n   *                                Array with function parameter names, or an\n   *                                array with objects containing the name\n   *                                and type of the parameter\n   * @param {Node} expr             The function expression\n   */\n\n  function FunctionAssignmentNode(name, params, expr) {\n    if (!(this instanceof FunctionAssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');\n    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n    if (!type.isNode(expr)) throw new TypeError('Node expected for parameter \"expr\"');\n    if (name in keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n    this.name = name;\n    this.params = params.map(function (param) {\n      return param && param.name || param;\n    });\n    this.types = params.map(function (param) {\n      return param && param.type || 'any';\n    });\n    this.expr = expr;\n  }\n\n  FunctionAssignmentNode.prototype = new Node();\n  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';\n  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionAssignmentNode.prototype._compile = function (math, argNames) {\n    var childArgNames = Object.create(argNames);\n    forEach(this.params, function (param) {\n      childArgNames[param] = true;\n    }); // compile the function expression with the child args\n\n    var evalExpr = this.expr._compile(math, childArgNames);\n\n    var name = this.name;\n    var params = this.params;\n    var signature = join(this.types, ',');\n    var syntax = name + '(' + join(this.params, ', ') + ')';\n    return function evalFunctionAssignmentNode(scope, args, context) {\n      var signatures = {};\n\n      signatures[signature] = function () {\n        var childArgs = Object.create(args);\n\n        for (var i = 0; i < params.length; i++) {\n          childArgs[params[i]] = arguments[i];\n        }\n\n        return evalExpr(scope, childArgs, context);\n      };\n\n      var fn = typed(name, signatures);\n      fn.syntax = syntax;\n      setSafeProperty(scope, name, fn);\n      return fn;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionAssignmentNode.prototype.forEach = function (callback) {\n    callback(this.expr, 'expr', this);\n  };\n  /**\n   * Create a new FunctionAssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionAssignmentNode.prototype.map = function (callback) {\n    var expr = this._ifNode(callback(this.expr, 'expr', this));\n\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionAssignmentNode}\n   */\n\n\n  FunctionAssignmentNode.prototype.clone = function () {\n    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n  };\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toString(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '(' + expr + ')';\n    }\n\n    return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionAssignmentNode.prototype.toJSON = function () {\n    var types = this.types;\n    return {\n      mathjs: 'FunctionAssignmentNode',\n      name: this.name,\n      params: this.params.map(function (param, index) {\n        return {\n          name: param,\n          type: types[index]\n        };\n      }),\n      expr: this.expr\n    };\n  };\n  /**\n   * Instantiate an FunctionAssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionAssignmentNode\", name: ..., params: ..., expr: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionAssignmentNode}\n   */\n\n\n  FunctionAssignmentNode.fromJSON = function (json) {\n    return new FunctionAssignmentNode(json.name, json.params, json.expr);\n  };\n  /**\n   * get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var params = [];\n\n    for (var i = 0; i < this.params.length; i++) {\n      params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n    }\n\n    var expr = this.expr.toHTML(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span><span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n  };\n  /**\n   * get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionAssignmentNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var expr = this.expr.toTex(options);\n\n    if (needParenthesis(this, parenthesis)) {\n      expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n    }\n\n    return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(latex.toSymbol).join(',') + '\\\\right):=' + expr;\n  };\n\n  return FunctionAssignmentNode;\n}\n\nexports.name = 'FunctionAssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n/**\n * Test whether a value is a BigNumber\n * @param {*} x\n * @return {boolean}\n */\n\nmodule.exports = function isBigNumber(x) {\n  return x && x.constructor.prototype.isBigNumber || false;\n};","'use strict';\n/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\n\nmodule.exports = function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  } // use \"==\" operator, handles infinities\n\n\n  if (x.eq(y)) {\n    return true;\n  } // NaN\n\n\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n};","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory(type, config, load, typed) {\n  var divideScalar = load(require('./divideScalar'));\n  var multiply = load(require('./multiply'));\n  var inv = load(require('../matrix/inv'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  var divide = typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n  divide.toTex = {\n    2: \"\\\\frac{${args[0]}}{${args[1]}}\"\n  };\n  return divide;\n}\n\nexports.name = 'divide';\nexports.factory = factory;","'use strict';\n\nvar arraySize = require('../array').size;\n\nvar isMatrix = require('../collection/isMatrix');\n\nvar IndexError = require('../../error/IndexError');\n/**\n * Reduce a given matrix or array to a new matrix or\n * array with one less dimension, applying the given\n * callback in the selected dimension.\n * @param {Array | Matrix} mat\n * @param {number} dim\n * @param {Function} callback\n * @return {Array | Matrix} res\n */\n\n\nmodule.exports = function (mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n\n  if (dim < 0 || dim >= size.length) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n\n  if (isMatrix(mat)) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback));\n  } else {\n    return _reduce(mat, dim, callback);\n  }\n};\n/**\n * Recursively reduce a matrix\n * @param {Array} mat\n * @param {number} dim\n * @param {Function} callback\n * @returns {Array} ret\n * @private\n */\n\n\nfunction _reduce(mat, dim, callback) {\n  var i, ret, val, tran;\n\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      val = mat[0];\n\n      for (i = 1; i < mat.length; i++) {\n        val = callback(val, mat[i]);\n      }\n\n      return val;\n    } else {\n      tran = _switch(mat);\n      ret = [];\n\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _reduce(tran[i], dim - 1, callback);\n      }\n\n      return ret;\n    }\n  } else {\n    ret = [];\n\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _reduce(mat[i], dim - 1, callback);\n    }\n\n    return ret;\n  }\n}\n/**\n * Transpose a matrix\n * @param {Array} mat\n * @returns {Array} ret\n * @private\n */\n\n\nfunction _switch(mat) {\n  var I = mat.length;\n  var J = mat[0].length;\n  var i, j;\n  var ret = [];\n\n  for (j = 0; j < J; j++) {\n    var tmp = [];\n\n    for (i = 0; i < I; i++) {\n      tmp.push(mat[i][j]);\n    }\n\n    ret.push(tmp);\n  }\n\n  return ret;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.size = size;\nexports.validate = validate;\nexports.validateIndex = validateIndex;\nexports.resize = resize;\nexports.reshape = reshape;\nexports.squeeze = squeeze;\nexports.unsqueeze = unsqueeze;\nexports.flatten = flatten;\nexports.map = map;\nexports.forEach = forEach;\nexports.filter = filter;\nexports.filterRegExp = filterRegExp;\nexports.join = join;\nexports.identify = identify;\nexports.generalize = generalize;\n\nvar _number = _interopRequireDefault(require(\"./number\"));\n\nvar _string = _interopRequireDefault(require(\"./string\"));\n\nvar _DimensionError = _interopRequireDefault(require(\"../error/DimensionError\"));\n\nvar _IndexError = _interopRequireDefault(require(\"../error/IndexError\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calculate the size of a multi dimensional array.\n * This function checks the size of the first entry, it does not validate\n * whether all dimensions match. (use function `validate` for that)\n * @param {Array} x\n * @Return {Number[]} size\n */\nfunction size(x) {\n  var s = [];\n\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n\n  return s;\n}\n/**\n * Recursively validate whether each element in a multi dimensional array\n * has a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @param {number} dim   Current dimension\n * @throws DimensionError\n * @private\n */\n\n\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n\n  if (len !== size[dim]) {\n    throw new _DimensionError.default(len, size[dim]);\n  }\n\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n\n      if (!Array.isArray(child)) {\n        throw new _DimensionError.default(size.length - 1, size.length, '<');\n      }\n\n      _validate(array[i], size, dimNext);\n    }\n  } else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new _DimensionError.default(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n/**\n * Validate whether each element in a multi dimensional array has\n * a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @throws DimensionError\n */\n\n\nfunction validate(array, size) {\n  var isScalar = size.length === 0;\n\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new _DimensionError.default(array.length, 0);\n    }\n  } else {\n    // array\n    _validate(array, size, 0);\n  }\n}\n/**\n * Test whether index is an integer number with index >= 0 and index < length\n * when length is provided\n * @param {number} index    Zero-based index\n * @param {number} [length] Length of the array\n */\n\n\nfunction validateIndex(index, length) {\n  if (!_number.default.isNumber(index) || !_number.default.isInteger(index)) {\n    throw new TypeError('Index must be an integer (value: ' + index + ')');\n  }\n\n  if (index < 0 || typeof length === 'number' && index >= length) {\n    throw new _IndexError.default(index, length);\n  }\n}\n/**\n * Resize a multi dimensional array. The resized array is returned.\n * @param {Array} array         Array to be resized\n * @param {Array.<number>} size Array with the size of each dimension\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n *                              zero by default. Specify for example `null`,\n *                              to clearly see entries that are not explicitly\n *                              set.\n * @return {Array} array         The resized array\n */\n\n\nfunction resize(array, size, defaultValue) {\n  // TODO: add support for scalars, having size=[] ?\n  // check the type of the arguments\n  if (!Array.isArray(array) || !Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  } // check whether size contains positive integers\n\n\n  size.forEach(function (value) {\n    if (!_number.default.isNumber(value) || !_number.default.isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + _string.default.format(size) + ')');\n    }\n  }); // recursively resize the array\n\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\n\n  _resize(array, size, 0, _defaultValue);\n\n  return array;\n}\n/**\n * Recursively resize a multi dimensional array\n * @param {Array} array         Array to be resized\n * @param {number[]} size       Array with the size of each dimension\n * @param {number} dim          Current dimension\n * @param {*} [defaultValue]    Value to be filled in in new entries,\n *                              undefined by default.\n * @private\n */\n\n\nfunction _resize(array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen); // apply new length\n\n  array.length = newLen;\n\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1; // resize existing child arrays\n\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n\n        array[i] = elem;\n      }\n\n      _resize(elem, size, dimNext, defaultValue);\n    } // create new child arrays\n\n\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem; // resize new child array\n\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  } else {\n    // last dimension\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    } // fill new elements with the default value\n\n\n    for (i = minLen; i < newLen; i++) {\n      array[i] = defaultValue;\n    }\n  }\n}\n/**\n * Re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\n\n\nfunction reshape(array, sizes) {\n  var flatArray = flatten(array);\n  var newArray;\n\n  function product(arr) {\n    return arr.reduce(function (prev, curr) {\n      return prev * curr;\n    });\n  }\n\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n\n  if (sizes.length === 0) {\n    throw new _DimensionError.default(0, product(size(array)), '!=');\n  }\n\n  var totalSize = 1;\n\n  for (var sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {\n    totalSize *= sizes[sizeIndex];\n  }\n\n  if (flatArray.length !== totalSize) {\n    throw new _DimensionError.default(product(sizes), product(size(array)), '!=');\n  }\n\n  try {\n    newArray = _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof _DimensionError.default) {\n      throw new _DimensionError.default(product(sizes), product(size(array)), '!=');\n    }\n\n    throw e;\n  }\n\n  return newArray;\n}\n/**\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {Array.<number>} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n */\n\n\nfunction _reshape(array, sizes) {\n  // testing if there are enough elements for the requested shape\n  var tmpArray = array;\n  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one\n\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\n    var size = sizes[sizeIndex];\n    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size\n\n    var length = tmpArray.length / size;\n\n    for (var i = 0; i < length; i++) {\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\n    } // set it as the new tmpArray for the next loop turn or for return\n\n\n    tmpArray = tmpArray2;\n  }\n\n  return tmpArray;\n}\n/**\n * Squeeze a multi dimensional array\n * @param {Array} array\n * @param {Array} [arraySize]\n * @returns {Array} returns the array itself\n */\n\n\nfunction squeeze(array, arraySize) {\n  var s = arraySize || size(array); // squeeze outer dimensions\n\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  } // find the first dimension to be squeezed\n\n\n  var dims = s.length;\n\n  while (s[dims - 1] === 1) {\n    dims--;\n  } // squeeze inner dimensions\n\n\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n\n  return array;\n}\n/**\n * Recursively squeeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\n\nfunction _squeeze(array, dims, dim) {\n  var i, ii;\n\n  if (dim < dims) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  } else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n\n  return array;\n}\n/**\n * Unsqueeze a multi dimensional array: add dimensions when missing\n *\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n *\n * @param {Array} array\n * @param {number} dims       Desired number of dimensions of the array\n * @param {number} [outer]    Number of outer dimensions to be added\n * @param {Array} [arraySize] Current size of array.\n * @returns {Array} returns the array itself\n * @private\n */\n\n\nfunction unsqueeze(array, dims, outer, arraySize) {\n  var s = arraySize || size(array); // unsqueeze outer dimensions\n\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  } // unsqueeze inner dimensions\n\n\n  array = _unsqueeze(array, dims, 0);\n\n  while (s.length < dims) {\n    s.push(1);\n  }\n\n  return array;\n}\n/**\n * Recursively unsqueeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\n\n\nfunction _unsqueeze(array, dims, dim) {\n  var i, ii;\n\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  } else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n\n  return array;\n}\n/**\n * Flatten a multi dimensional array, put all elements in a one dimensional\n * array\n * @param {Array} array   A multi dimensional array\n * @return {Array}        The flattened array (1 dimensional)\n */\n\n\nfunction flatten(array) {\n  if (!Array.isArray(array)) {\n    // if not an array, return as is\n    return array;\n  }\n\n  var flat = [];\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback); // traverse through sub-arrays recursively\n    } else {\n      flat.push(value);\n    }\n  });\n  return flat;\n}\n/**\n * A safe map\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction map(array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n/**\n * A safe forEach\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction forEach(array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n/**\n * A safe filter\n * @param {Array} array\n * @param {function} callback\n */\n\n\nfunction filter(array, callback) {\n  if (size(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, callback);\n}\n/**\n * Filter values in a callback given a regular expression\n * @param {Array} array\n * @param {RegExp} regexp\n * @return {Array} Returns the filtered array\n * @private\n */\n\n\nfunction filterRegExp(array, regexp) {\n  if (size(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n\n  return Array.prototype.filter.call(array, function (entry) {\n    return regexp.test(entry);\n  });\n}\n/**\n * A safe join\n * @param {Array} array\n * @param {string} separator\n */\n\n\nfunction join(array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n/**\n * Assign a numeric identifier to every element of a sorted array\n * @param {Array} a  An array\n * @return {Array} An array of objects containing the original value and its identifier\n */\n\n\nfunction identify(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n  var count = 0;\n  b[0] = {\n    value: a[0],\n    identifier: 0\n  };\n\n  for (var i = 1; i < a.length; i++) {\n    if (a[i] === a[i - 1]) {\n      count++;\n    } else {\n      count = 0;\n    }\n\n    b.push({\n      value: a[i],\n      identifier: count\n    });\n  }\n\n  return b;\n}\n/**\n * Remove the numeric identifier from the elements\n * @param {array} a  An array\n * @return {array} An array of values without identifiers\n */\n\n\nfunction generalize(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n\n  if (a.length === 0) {\n    return a;\n  }\n\n  var b = [];\n\n  for (var i = 0; i < a.length; i++) {\n    b.push(a[i].value);\n  }\n\n  return b;\n}","'use strict';\n\nvar operators = require('../operators');\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor RangeNode\n   * @extends {Node}\n   * create a range\n   * @param {Node} start  included lower-bound\n   * @param {Node} end    included upper-bound\n   * @param {Node} [step] optional step\n   */\n\n  function RangeNode(start, end, step) {\n    if (!(this instanceof RangeNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate inputs\n\n\n    if (!type.isNode(start)) throw new TypeError('Node expected');\n    if (!type.isNode(end)) throw new TypeError('Node expected');\n    if (step && !type.isNode(step)) throw new TypeError('Node expected');\n    if (arguments.length > 3) throw new Error('Too many arguments');\n    this.start = start; // included lower-bound\n\n    this.end = end; // included upper-bound\n\n    this.step = step || null; // optional step\n  }\n\n  RangeNode.prototype = new Node();\n  RangeNode.prototype.type = 'RangeNode';\n  RangeNode.prototype.isRangeNode = true;\n  /**\n   * Check whether the RangeNode needs the `end` symbol to be defined.\n   * This end is the size of the Matrix in current dimension.\n   * @return {boolean}\n   */\n\n  RangeNode.prototype.needsEnd = function () {\n    // find all `end` symbols in this RangeNode\n    var endSymbols = this.filter(function (node) {\n      return type.isSymbolNode(node) && node.name === 'end';\n    });\n    return endSymbols.length > 0;\n  };\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n\n  RangeNode.prototype._compile = function (math, argNames) {\n    var range = math.range;\n\n    var evalStart = this.start._compile(math, argNames);\n\n    var evalEnd = this.end._compile(math, argNames);\n\n    if (this.step) {\n      var evalStep = this.step._compile(math, argNames);\n\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));\n      };\n    } else {\n      return function evalRangeNode(scope, args, context) {\n        return range(evalStart(scope, args, context), evalEnd(scope, args, context));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  RangeNode.prototype.forEach = function (callback) {\n    callback(this.start, 'start', this);\n    callback(this.end, 'end', this);\n\n    if (this.step) {\n      callback(this.step, 'step', this);\n    }\n  };\n  /**\n   * Create a new RangeNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {RangeNode} Returns a transformed copy of the node\n   */\n\n\n  RangeNode.prototype.map = function (callback) {\n    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {RangeNode}\n   */\n\n\n  RangeNode.prototype.clone = function () {\n    return new RangeNode(this.start, this.end, this.step && this.step);\n  };\n  /**\n   * Calculate the necessary parentheses\n   * @param {Node} node\n   * @param {string} parenthesis\n   * @return {Object} parentheses\n   * @private\n   */\n\n\n  function calculateNecessaryParentheses(node, parenthesis) {\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var parens = {};\n    var startPrecedence = operators.getPrecedence(node.start, parenthesis);\n    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';\n\n    if (node.step) {\n      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);\n      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';\n    }\n\n    var endPrecedence = operators.getPrecedence(node.end, parenthesis);\n    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';\n    return parens;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toString(options);\n\n    if (parens.start) {\n      start = '(' + start + ')';\n    }\n\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toString(options);\n\n      if (parens.step) {\n        step = '(' + step + ')';\n      }\n\n      str += ':' + step;\n    }\n\n    var end = this.end.toString(options);\n\n    if (parens.end) {\n      end = '(' + end + ')';\n    }\n\n    str += ':' + end;\n    return str;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  RangeNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'RangeNode',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n  /**\n   * Instantiate an RangeNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"RangeNode\", \"start\": ..., \"end\": ..., \"step\": ...}`,\n   *                       where mathjs is optional\n   * @returns {RangeNode}\n   */\n\n\n  RangeNode.fromJSON = function (json) {\n    return new RangeNode(json.start, json.end, json.step);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop\n\n    var str;\n    var start = this.start.toHTML(options);\n\n    if (parens.start) {\n      start = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + start + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    str = start;\n\n    if (this.step) {\n      var step = this.step.toHTML(options);\n\n      if (parens.step) {\n        step = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + step + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      str += '<span class=\"math-operator math-range-operator\">:</span>' + step;\n    }\n\n    var end = this.end.toHTML(options);\n\n    if (parens.end) {\n      end = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + end + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    str += '<span class=\"math-operator math-range-operator\">:</span>' + end;\n    return str;\n  };\n  /**\n   * Get LaTeX representation\n   * @params {Object} options\n   * @return {string} str\n   */\n\n\n  RangeNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var parens = calculateNecessaryParentheses(this, parenthesis);\n    var str = this.start.toTex(options);\n\n    if (parens.start) {\n      str = \"\\\\left(\".concat(str, \"\\\\right)\");\n    }\n\n    if (this.step) {\n      var step = this.step.toTex(options);\n\n      if (parens.step) {\n        step = \"\\\\left(\".concat(step, \"\\\\right)\");\n      }\n\n      str += ':' + step;\n    }\n\n    var end = this.end.toTex(options);\n\n    if (parens.end) {\n      end = \"\\\\left(\".concat(end, \"\\\\right)\");\n    }\n\n    str += ':' + end;\n    return str;\n  };\n\n  return RangeNode;\n}\n\nexports.name = 'RangeNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Determine the type of a variable.\n   *\n   * Function `typeof` recognizes the following types of objects:\n   *\n   * Object                 | Returns       | Example\n   * ---------------------- | ------------- | ------------------------------------------\n   * null                   | `'null'`      | `math.typeof(null)`\n   * number                 | `'number'`    | `math.typeof(3.5)`\n   * boolean                | `'boolean'`   | `math.typeof(true)`\n   * string                 | `'string'`    | `math.typeof('hello world')`\n   * Array                  | `'Array'`     | `math.typeof([1, 2, 3])`\n   * Date                   | `'Date'`      | `math.typeof(new Date())`\n   * Function               | `'Function'`  | `math.typeof(function () {})`\n   * Object                 | `'Object'`    | `math.typeof({a: 2, b: 3})`\n   * RegExp                 | `'RegExp'`    | `math.typeof(/a regexp/)`\n   * undefined              | `'undefined'` | `math.typeof(undefined)`\n   * math.type.BigNumber    | `'BigNumber'` | `math.typeof(math.bignumber('2.3e500'))`\n   * math.type.Chain        | `'Chain'`     | `math.typeof(math.chain(2))`\n   * math.type.Complex      | `'Complex'`   | `math.typeof(math.complex(2, 3))`\n   * math.type.Fraction     | `'Fraction'`  | `math.typeof(math.fraction(1, 3))`\n   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`\n   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`\n   * math.type.Index        | `'Index'`     | `math.typeof(math.index(1, 3))`\n   * math.type.Matrix       | `'Matrix'`    | `math.typeof(math.matrix([[1,2], [3, 4]]))`\n   * math.type.Range        | `'Range'`     | `math.typeof(math.range(0, 10))`\n   * math.type.ResultSet    | `'ResultSet'` | `math.typeof(math.eval('a=2\\nb=3'))`\n   * math.type.Unit         | `'Unit'`      | `math.typeof(math.unit('45 deg'))`\n   * math.expression.node&#8203;.AccessorNode            | `'AccessorNode'`            | `math.typeof(math.parse('A[2]'))`\n   * math.expression.node&#8203;.ArrayNode               | `'ArrayNode'`               | `math.typeof(math.parse('[1,2,3]'))`\n   * math.expression.node&#8203;.AssignmentNode          | `'AssignmentNode'`          | `math.typeof(math.parse('x=2'))`\n   * math.expression.node&#8203;.BlockNode               | `'BlockNode'`               | `math.typeof(math.parse('a=2; b=3'))`\n   * math.expression.node&#8203;.ConditionalNode         | `'ConditionalNode'`         | `math.typeof(math.parse('x<0 ? -x : x'))`\n   * math.expression.node&#8203;.ConstantNode            | `'ConstantNode'`            | `math.typeof(math.parse('2.3'))`\n   * math.expression.node&#8203;.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeof(math.parse('f(x)=x^2'))`\n   * math.expression.node&#8203;.FunctionNode            | `'FunctionNode'`            | `math.typeof(math.parse('sqrt(4)'))`\n   * math.expression.node&#8203;.IndexNode               | `'IndexNode'`               | `math.typeof(math.parse('A[2]').index)`\n   * math.expression.node&#8203;.ObjectNode              | `'ObjectNode'`              | `math.typeof(math.parse('{a:2}'))`\n   * math.expression.node&#8203;.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeof(math.parse('(2+3)'))`\n   * math.expression.node&#8203;.RangeNode               | `'RangeNode'`               | `math.typeof(math.parse('1:10'))`\n   * math.expression.node&#8203;.SymbolNode              | `'SymbolNode'`              | `math.typeof(math.parse('x'))`\n   *\n   * Syntax:\n   *\n   *    math.typeof(x)\n   *\n   * Examples:\n   *\n   *    math.typeof(3.5)                     // returns 'number'\n   *    math.typeof(math.complex('2-4i'))    // returns 'Complex'\n   *    math.typeof(math.unit('45 deg'))     // returns 'Unit'\n   *    math.typeof('hello world')           // returns 'string'\n   *\n   * @param {*} x     The variable for which to test the type.\n   * @return {string} Returns the name of the type. Primitive types are lower case,\n   *                  non-primitive types are upper-camel-case.\n   *                  For example 'number', 'string', 'Array', 'Date'.\n   */\n  var _typeof = typed('_typeof', {\n    'any': function any(x) {\n      var t = _typeof2(x);\n\n      if (t === 'object') {\n        // JavaScript types\n        if (x === null) return 'null';\n        if (Array.isArray(x)) return 'Array';\n        if (x instanceof Date) return 'Date';\n        if (x instanceof RegExp) return 'RegExp'; // math.js types\n\n        if (type.isBigNumber(x)) return 'BigNumber';\n        if (type.isComplex(x)) return 'Complex';\n        if (type.isFraction(x)) return 'Fraction';\n        if (type.isMatrix(x)) return 'Matrix';\n        if (type.isUnit(x)) return 'Unit';\n        if (type.isIndex(x)) return 'Index';\n        if (type.isRange(x)) return 'Range';\n        if (type.isResultSet(x)) return 'ResultSet';\n        if (type.isNode(x)) return x.type;\n        if (type.isChain(x)) return 'Chain';\n        if (type.isHelp(x)) return 'Help';\n        return 'Object';\n      }\n\n      if (t === 'function') return 'Function';\n      return t; // can be 'string', 'number', 'boolean', ...\n    }\n  });\n\n  _typeof.toTex = undefined; // use default template\n\n  return _typeof;\n}\n\nexports.name = 'typeof';\nexports.factory = factory;","'use strict';\n\nvar latex = require('../../utils/latex');\n\nvar map = require('../../utils/array').map;\n\nvar escape = require('../../utils/string').escape;\n\nvar isSafeMethod = require('../../utils/customs').isSafeMethod;\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nvar operators = require('../operators');\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor OperatorNode\n   * @extends {Node}\n   * An operator with two arguments, like 2+3\n   *\n   * @param {string} op           Operator name, for example '+'\n   * @param {string} fn           Function name, for example 'add'\n   * @param {Node[]} args         Operator arguments\n   * @param {boolean} [implicit]  Is this an implicit multiplication?\n   */\n\n  function OperatorNode(op, fn, args, implicit) {\n    if (!(this instanceof OperatorNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (typeof op !== 'string') {\n      throw new TypeError('string expected for parameter \"op\"');\n    }\n\n    if (typeof fn !== 'string') {\n      throw new TypeError('string expected for parameter \"fn\"');\n    }\n\n    if (!Array.isArray(args) || !args.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.implicit = implicit === true;\n    this.op = op;\n    this.fn = fn;\n    this.args = args || [];\n  }\n\n  OperatorNode.prototype = new Node();\n  OperatorNode.prototype.type = 'OperatorNode';\n  OperatorNode.prototype.isOperatorNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  OperatorNode.prototype._compile = function (math, argNames) {\n    // validate fn\n    if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {\n      if (!math[this.fn]) {\n        throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n      } else {\n        throw new Error('No access to function \"' + this.fn + '\"');\n      }\n    }\n\n    var fn = getSafeProperty(math, this.fn);\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (evalArgs.length === 1) {\n      var evalArg0 = evalArgs[0];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(evalArg0(scope, args, context));\n      };\n    } else if (evalArgs.length === 2) {\n      var _evalArg = evalArgs[0];\n      var evalArg1 = evalArgs[1];\n      return function evalOperatorNode(scope, args, context) {\n        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n      };\n    } else {\n      return function evalOperatorNode(scope, args, context) {\n        return fn.apply(null, map(evalArgs, function (evalArg) {\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  OperatorNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new OperatorNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {OperatorNode} Returns a transformed copy of the node\n   */\n\n\n  OperatorNode.prototype.map = function (callback) {\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new OperatorNode(this.op, this.fn, args, this.implicit);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {OperatorNode}\n   */\n\n\n  OperatorNode.prototype.clone = function () {\n    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);\n  };\n  /**\n   * Check whether this is an unary OperatorNode:\n   * has exactly one argument, like `-a`.\n   * @return {boolean} Returns true when an unary operator node, false otherwise.\n   */\n\n\n  OperatorNode.prototype.isUnary = function () {\n    return this.args.length === 1;\n  };\n  /**\n   * Check whether this is a binary OperatorNode:\n   * has exactly two arguments, like `a + b`.\n   * @return {boolean} Returns true when a binary operator node, false otherwise.\n   */\n\n\n  OperatorNode.prototype.isBinary = function () {\n    return this.args.length === 2;\n  };\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n\n\n  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {\n    // precedence of the root OperatorNode\n    var precedence = operators.getPrecedence(root, parenthesis);\n    var associativity = operators.getAssociativity(root, parenthesis);\n\n    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {\n      var parens = args.map(function (arg) {\n        switch (arg.getContent().type) {\n          // Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n\n          default:\n            return true;\n        }\n      });\n      return parens;\n    }\n\n    var result;\n\n    switch (args.length) {\n      case 0:\n        result = [];\n        break;\n\n      case 1:\n        // unary operators\n        // precedence of the operand\n        var operandPrecedence = operators.getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n        if (latex && operandPrecedence !== null) {\n          var operandIdentifier;\n          var rootIdentifier;\n\n          if (parenthesis === 'keep') {\n            operandIdentifier = args[0].getIdentifier();\n            rootIdentifier = root.getIdentifier();\n          } else {\n            // Ignore Parenthesis Nodes when not in 'keep' mode\n            operandIdentifier = args[0].getContent().getIdentifier();\n            rootIdentifier = root.getContent().getIdentifier();\n          }\n\n          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {\n            result = [false];\n            break;\n          }\n\n          if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {\n            result = [false];\n            break;\n          }\n        }\n\n        if (operandPrecedence === null) {\n          // if the operand has no defined precedence, no parens are needed\n          result = [false];\n          break;\n        }\n\n        if (operandPrecedence <= precedence) {\n          // if the operands precedence is lower, parens are needed\n          result = [true];\n          break;\n        } // otherwise, no parens needed\n\n\n        result = [false];\n        break;\n\n      case 2:\n        // binary operators\n        var lhsParens; // left hand side needs parenthesis?\n        // precedence of the left hand side\n\n        var lhsPrecedence = operators.getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side\n\n        var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);\n\n        if (lhsPrecedence === null) {\n          // if the left hand side has no defined precedence, no parens are needed\n          // FunctionNode for example\n          lhsParens = false;\n        } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {\n          // In case of equal precedence, if the root node is left associative\n          // parens are **never** necessary for the left hand side.\n          // If it is right associative however, parens are necessary\n          // if the root node isn't associative with the left hand side\n          lhsParens = true;\n        } else if (lhsPrecedence < precedence) {\n          lhsParens = true;\n        } else {\n          lhsParens = false;\n        }\n\n        var rhsParens; // right hand side needs parenthesis?\n        // precedence of the right hand side\n\n        var rhsPrecedence = operators.getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?\n\n        var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);\n\n        if (rhsPrecedence === null) {\n          // if the right hand side has no defined precedence, no parens are needed\n          // FunctionNode for example\n          rhsParens = false;\n        } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {\n          // In case of equal precedence, if the root node is right associative\n          // parens are **never** necessary for the right hand side.\n          // If it is left associative however, parens are necessary\n          // if the root node isn't associative with the right hand side\n          rhsParens = true;\n        } else if (rhsPrecedence < precedence) {\n          rhsParens = true;\n        } else {\n          rhsParens = false;\n        } // handle special cases for LaTeX, where some of the parentheses aren't needed\n\n\n        if (latex) {\n          var _rootIdentifier;\n\n          var lhsIdentifier;\n          var rhsIdentifier;\n\n          if (parenthesis === 'keep') {\n            _rootIdentifier = root.getIdentifier();\n            lhsIdentifier = root.args[0].getIdentifier();\n            rhsIdentifier = root.args[1].getIdentifier();\n          } else {\n            // Ignore ParenthesisNodes when not in 'keep' mode\n            _rootIdentifier = root.getContent().getIdentifier();\n            lhsIdentifier = root.args[0].getContent().getIdentifier();\n            rhsIdentifier = root.args[1].getContent().getIdentifier();\n          }\n\n          if (lhsPrecedence !== null) {\n            if (operators.properties[precedence][_rootIdentifier].latexLeftParens === false) {\n              lhsParens = false;\n            }\n\n            if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n              lhsParens = false;\n            }\n          }\n\n          if (rhsPrecedence !== null) {\n            if (operators.properties[precedence][_rootIdentifier].latexRightParens === false) {\n              rhsParens = false;\n            }\n\n            if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n              rhsParens = false;\n            }\n          }\n        }\n\n        result = [lhsParens, rhsParens];\n        break;\n\n      default:\n        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {\n          result = args.map(function (arg) {\n            var argPrecedence = operators.getPrecedence(arg, parenthesis);\n            var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);\n            var argAssociativity = operators.getAssociativity(arg, parenthesis);\n\n            if (argPrecedence === null) {\n              // if the argument has no defined precedence, no parens are needed\n              return false;\n            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {\n              return true;\n            } else if (argPrecedence < precedence) {\n              return true;\n            }\n\n            return false;\n          });\n        }\n\n        break;\n    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode\n    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be\n    // printed.\n\n\n    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {\n      result = args.map(function (arg, index) {\n        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';\n\n        if (result[index] || isParenthesisNode) {\n          // put in parenthesis?\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    return result;\n  }\n  /**\n   * Get string representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype._toString = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n      var operand = args[0].toString(options);\n\n      if (parens[0]) {\n        operand = '(' + operand + ')';\n      } // for example for \"not\", we want a space between operand and argument\n\n\n      var opIsNamed = /[a-zA-Z]+/.test(this.op);\n\n      if (assoc === 'right') {\n        // prefix operator\n        return this.op + (opIsNamed ? ' ' : '') + operand;\n      } else if (assoc === 'left') {\n        // postfix\n        return operand + (opIsNamed ? ' ' : '') + this.op;\n      } // fall back to postfix\n\n\n      return operand + this.op;\n    } else if (args.length === 2) {\n      var lhs = args[0].toString(options); // left hand side\n\n      var rhs = args[1].toString(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '(' + lhs + ')';\n      }\n\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '(' + rhs + ')';\n      }\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + ' ' + rhs;\n      }\n\n      return lhs + ' ' + this.op + ' ' + rhs;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toString(options);\n\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '(' + arg + ')';\n        }\n\n        return arg;\n      });\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return stringifiedArgs.join(' ');\n      }\n\n      return stringifiedArgs.join(' ' + this.op + ' ');\n    } else {\n      // fallback to formatting as a function call\n      return this.fn + '(' + this.args.join(', ') + ')';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  OperatorNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'OperatorNode',\n      op: this.op,\n      fn: this.fn,\n      args: this.args,\n      implicit: this.implicit\n    };\n  };\n  /**\n   * Instantiate an OperatorNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"OperatorNode\", \"op\": \"+\", \"fn\": \"add\", \"args\": [...], \"implicit\": false}`,\n   *                       where mathjs is optional\n   * @returns {OperatorNode}\n   */\n\n\n  OperatorNode.fromJSON = function (json) {\n    return new OperatorNode(json.op, json.fn, json.args, json.implicit);\n  };\n  /**\n   * Get HTML representation.\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype.toHTML = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n      var operand = args[0].toHTML(options);\n\n      if (parens[0]) {\n        operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (assoc === 'right') {\n        // prefix operator\n        return '<span class=\"math-operator math-unary-operator math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      } else if (assoc === 'left') {\n        // postfix\n        return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n      } // fall back to postfix\n\n\n      return '<span class=\"math-operator math-unary-operator math-righthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n    } else if (args.length === 2) {\n      // binary operatoes\n      var lhs = args[0].toHTML(options); // left hand side\n\n      var rhs = args[1].toHTML(options); // right hand side\n\n      if (parens[0]) {\n        // left hand side in parenthesis?\n        lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (parens[1]) {\n        // right hand side in parenthesis?\n        rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n        return lhs + '<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>' + rhs;\n      }\n\n      return lhs + '<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n    } else {\n      var stringifiedArgs = args.map(function (arg, index) {\n        arg = arg.toHTML(options);\n\n        if (parens[index]) {\n          // put in parenthesis?\n          arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n\n        return arg;\n      });\n\n      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-implicit-binary-operator\"></span>');\n        }\n\n        return stringifiedArgs.join('<span class=\"math-operator math-binary-operator math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n      } else {\n        // fallback to formatting as a function call\n        return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n    }\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  OperatorNode.prototype._toTex = function (options) {\n    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n    var implicit = options && options.implicit ? options.implicit : 'hide';\n    var args = this.args;\n    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);\n    var op = latex.operators[this.fn];\n    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op\n\n    if (args.length === 1) {\n      // unary operators\n      var assoc = operators.getAssociativity(this, parenthesis);\n      var operand = args[0].toTex(options);\n\n      if (parens[0]) {\n        operand = \"\\\\left(\".concat(operand, \"\\\\right)\");\n      }\n\n      if (assoc === 'right') {\n        // prefix operator\n        return op + operand;\n      } else if (assoc === 'left') {\n        // postfix operator\n        return operand + op;\n      } // fall back to postfix\n\n\n      return operand + op;\n    } else if (args.length === 2) {\n      // binary operators\n      var lhs = args[0]; // left hand side\n\n      var lhsTex = lhs.toTex(options);\n\n      if (parens[0]) {\n        lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n      }\n\n      var rhs = args[1]; // right hand side\n\n      var rhsTex = rhs.toTex(options);\n\n      if (parens[1]) {\n        rhsTex = \"\\\\left(\".concat(rhsTex, \"\\\\right)\");\n      } // handle some exceptions (due to the way LaTeX works)\n\n\n      var lhsIdentifier;\n\n      if (parenthesis === 'keep') {\n        lhsIdentifier = lhs.getIdentifier();\n      } else {\n        // Ignore ParenthesisNodes if in 'keep' mode\n        lhsIdentifier = lhs.getContent().getIdentifier();\n      }\n\n      switch (this.getIdentifier()) {\n        case 'OperatorNode:divide':\n          // op contains '\\\\frac' at this point\n          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n\n        case 'OperatorNode:pow':\n          lhsTex = '{' + lhsTex + '}';\n          rhsTex = '{' + rhsTex + '}';\n\n          switch (lhsIdentifier) {\n            case 'ConditionalNode': //\n\n            case 'OperatorNode:divide':\n              lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n          }\n\n          break;\n\n        case 'OperatorNode:multiply':\n          if (this.implicit && implicit === 'hide') {\n            return lhsTex + '~' + rhsTex;\n          }\n\n      }\n\n      return lhsTex + op + rhsTex;\n    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n      var texifiedArgs = args.map(function (arg, index) {\n        arg = arg.toTex(options);\n\n        if (parens[index]) {\n          arg = \"\\\\left(\".concat(arg, \"\\\\right)\");\n        }\n\n        return arg;\n      });\n\n      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {\n        return texifiedArgs.join('~');\n      }\n\n      return texifiedArgs.join(op);\n    } else {\n      // fall back to formatting as a function call\n      // as this is a fallback, it doesn't use\n      // fancy function names\n      return '\\\\mathrm{' + this.fn + '}\\\\left(' + args.map(function (arg) {\n        return arg.toTex(options);\n      }).join(',') + '\\\\right)';\n    }\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  OperatorNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.fn;\n  };\n\n  return OperatorNode;\n}\n\nexports.name = 'OperatorNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar getSafeProperty = require('../../utils/customs').getSafeProperty;\n\nvar setSafeProperty = require('../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  var assign = load(require('./utils/assign'));\n  var access = load(require('./utils/access'));\n\n  var operators = require('../operators');\n  /**\n   * @constructor AssignmentNode\n   * @extends {Node}\n   *\n   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n   * replace a subset of a matrix like `A[2,2]=42`.\n   *\n   * Syntax:\n   *\n   *     new AssignmentNode(symbol, value)\n   *     new AssignmentNode(object, index, value)\n   *\n   * Usage:\n   *\n   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2\n   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3\n   *\n   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value\n   * @param {IndexNode} [index=null]            Index, property name or matrix\n   *                                            index. Optional. If not provided\n   *                                            and `object` is a SymbolNode,\n   *                                            the property is assigned to the\n   *                                            global scope.\n   * @param {Node} value                        The value to be assigned\n   */\n\n\n  function AssignmentNode(object, index, value) {\n    if (!(this instanceof AssignmentNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.object = object;\n    this.index = value ? index : null;\n    this.value = value || index; // validate input\n\n    if (!type.isSymbolNode(object) && !type.isAccessorNode(object)) {\n      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n    }\n\n    if (type.isSymbolNode(object) && object.name === 'end') {\n      throw new Error('Cannot assign to symbol \"end\"');\n    }\n\n    if (this.index && !type.isIndexNode(this.index)) {\n      // index is optional\n      throw new TypeError('IndexNode expected as \"index\"');\n    }\n\n    if (!type.isNode(this.value)) {\n      throw new TypeError('Node expected as \"value\"');\n    } // readonly property name\n\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  AssignmentNode.prototype = new Node();\n  AssignmentNode.prototype.type = 'AssignmentNode';\n  AssignmentNode.prototype.isAssignmentNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  AssignmentNode.prototype._compile = function (math, argNames) {\n    var evalObject = this.object._compile(math, argNames);\n\n    var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n    var evalValue = this.value._compile(math, argNames);\n\n    var name = this.object.name;\n\n    if (!this.index) {\n      // apply a variable to the scope, for example `a=2`\n      if (!type.isSymbolNode(this.object)) {\n        throw new TypeError('SymbolNode expected as object');\n      }\n\n      return function evalAssignmentNode(scope, args, context) {\n        return setSafeProperty(scope, name, evalValue(scope, args, context));\n      };\n    } else if (this.index.isObjectProperty()) {\n      // apply an object property for example `a.b=2`\n      var prop = this.index.getObjectProperty();\n      return function evalAssignmentNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        return setSafeProperty(object, prop, value);\n      };\n    } else if (type.isSymbolNode(this.object)) {\n      // update a matrix subset, for example `a[2]=3`\n      return function evalAssignmentNode(scope, args, context) {\n        var childObject = evalObject(scope, args, context);\n        var value = evalValue(scope, args, context);\n        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n        setSafeProperty(scope, name, assign(childObject, index, value));\n        return value;\n      };\n    } else {\n      // type.isAccessorNode(node.object) === true\n      // update a matrix subset, for example `a.b[2]=3`\n      // we will not use the compile function of the AccessorNode, but compile it\n      // ourselves here as we need the parent object of the AccessorNode:\n      // wee need to apply the updated object to parent object\n      var evalParentObject = this.object.object._compile(math, argNames);\n\n      if (this.object.index.isObjectProperty()) {\n        var parentProp = this.object.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var childObject = getSafeProperty(parent, parentProp);\n          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          setSafeProperty(parent, parentProp, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // if some parameters use the 'end' parameter, we need to calculate the size\n        var evalParentIndex = this.object.index._compile(math, argNames);\n\n        return function evalAssignmentNode(scope, args, context) {\n          var parent = evalParentObject(scope, args, context);\n          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context\n\n          var childObject = access(parent, parentIndex);\n          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context\n\n          var value = evalValue(scope, args, context);\n          assign(parent, parentIndex, assign(childObject, index, value));\n          return value;\n        };\n      }\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  AssignmentNode.prototype.forEach = function (callback) {\n    callback(this.object, 'object', this);\n\n    if (this.index) {\n      callback(this.index, 'index', this);\n    }\n\n    callback(this.value, 'value', this);\n  };\n  /**\n   * Create a new AssignmentNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {AssignmentNode} Returns a transformed copy of the node\n   */\n\n\n  AssignmentNode.prototype.map = function (callback) {\n    var object = this._ifNode(callback(this.object, 'object', this));\n\n    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n    var value = this._ifNode(callback(this.value, 'value', this));\n\n    return new AssignmentNode(object, index, value);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {AssignmentNode}\n   */\n\n\n  AssignmentNode.prototype.clone = function () {\n    return new AssignmentNode(this.object, this.index, this.value);\n  };\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @private\n   */\n\n\n  function needParenthesis(node, parenthesis) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = operators.getPrecedence(node, parenthesis);\n    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toString = function (options) {\n    var object = this.object.toString(options);\n    var index = this.index ? this.index.toString(options) : '';\n    var value = this.value.toString(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '(' + value + ')';\n    }\n\n    return object + index + ' = ' + value;\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  AssignmentNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'AssignmentNode',\n      object: this.object,\n      index: this.index,\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n   *                       where mathjs is optional\n   * @returns {AssignmentNode}\n   */\n\n\n  AssignmentNode.fromJSON = function (json) {\n    return new AssignmentNode(json.object, json.index, json.value);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype.toHTML = function (options) {\n    var object = this.object.toHTML(options);\n    var index = this.index ? this.index.toHTML(options) : '';\n    var value = this.value.toHTML(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    return object + index + '<span class=\"math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string}\n   */\n\n\n  AssignmentNode.prototype._toTex = function (options) {\n    var object = this.object.toTex(options);\n    var index = this.index ? this.index.toTex(options) : '';\n    var value = this.value.toTex(options);\n\n    if (needParenthesis(this, options && options.parenthesis)) {\n      value = \"\\\\left(\".concat(value, \"\\\\right)\");\n    }\n\n    return object + index + ':=' + value;\n  };\n\n  return AssignmentNode;\n}\n\nexports.name = 'AssignmentNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm10 = function algorithm10(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  return algorithm10;\n}\n\nexports.name = 'algorithm10';\nexports.factory = factory;","'use strict';\n\nvar map = require('../../utils/array').map;\n\nfunction factory(type, config, load, typed) {\n  var Node = load(require('./Node'));\n  /**\n   * @constructor ArrayNode\n   * @extends {Node}\n   * Holds an 1-dimensional array with items\n   * @param {Node[]} [items]   1 dimensional array with items\n   */\n\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.items = items || []; // validate input\n\n    if (!Array.isArray(this.items) || !this.items.every(type.isNode)) {\n      throw new TypeError('Array containing Nodes expected');\n    } // TODO: deprecated since v3, remove some day\n\n\n    var deprecated = function deprecated() {\n      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');\n    };\n\n    Object.defineProperty(this, 'nodes', {\n      get: deprecated,\n      set: deprecated\n    });\n  }\n\n  ArrayNode.prototype = new Node();\n  ArrayNode.prototype.type = 'ArrayNode';\n  ArrayNode.prototype.isArrayNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ArrayNode.prototype._compile = function (math, argNames) {\n    var evalItems = map(this.items, function (item) {\n      return item._compile(math, argNames);\n    });\n    var asMatrix = math.config().matrix !== 'Array';\n\n    if (asMatrix) {\n      var matrix = math.matrix;\n      return function evalArrayNode(scope, args, context) {\n        return matrix(map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        }));\n      };\n    } else {\n      return function evalArrayNode(scope, args, context) {\n        return map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        });\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new ArrayNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ArrayNode} Returns a transformed copy of the node\n   */\n\n\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n\n    return new ArrayNode(items);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ArrayNode}\n   */\n\n\n  ArrayNode.prototype.clone = function () {\n    return new ArrayNode(this.items.slice(0));\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype._toString = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ArrayNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ArrayNode',\n      items: this.items\n    };\n  };\n  /**\n   * Instantiate an ArrayNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n   *                       where mathjs is optional\n   * @returns {ArrayNode}\n   */\n\n\n  ArrayNode.fromJSON = function (json) {\n    return new ArrayNode(json.items);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype.toHTML = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ArrayNode.prototype._toTex = function (options) {\n    var s = '\\\\begin{bmatrix}';\n    this.items.forEach(function (node) {\n      if (node.items) {\n        s += node.items.map(function (childNode) {\n          return childNode.toTex(options);\n        }).join('&');\n      } else {\n        s += node.toTex(options);\n      } // new line\n\n\n      s += '\\\\\\\\';\n    });\n    s += '\\\\end{bmatrix}';\n    return s;\n  };\n\n  return ArrayNode;\n}\n\nexports.name = 'ArrayNode';\nexports.path = 'expression.node';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  var fraction = typed('fraction', {\n    'number': function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new type.Fraction(x);\n    },\n    'string': function string(x) {\n      return new type.Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new type.Fraction(numerator, denominator);\n    },\n    'null': function _null(x) {\n      return new type.Fraction(0);\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.Fraction(x.toString());\n    },\n    'Fraction': function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    'Object': function Object(x) {\n      return new type.Fraction(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, fraction);\n    }\n  });\n  return fraction;\n}\n\nexports.name = 'fraction';\nexports.factory = factory;","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var _typeof = load(require('../../../function/utils/typeof'));\n\n  function getArrayDataType(array) {\n    var _type; // to hold type info\n\n\n    var _length = 0; // to hold length value to ensure it has consistent sizes\n\n    for (var i = 0; i < array.length; i++) {\n      var item = array[i];\n      var isArray = Array.isArray(item); // Saving the target matrix row size\n\n      if (i === 0 && isArray) {\n        _length = item.length;\n      } // If the current item is an array but the length does not equal the targetVectorSize\n\n\n      if (isArray && item.length !== _length) {\n        return undefined;\n      }\n\n      var itemType = isArray ? getArrayDataType(item) // recurse into a nested array\n      : _typeof(item);\n\n      if (_type === undefined) {\n        _type = itemType; // first item\n      } else if (_type !== itemType) {\n        return 'mixed';\n      } else {// we're good, everything has the same type so far\n      }\n    }\n\n    return _type;\n  }\n\n  return getArrayDataType;\n}\n/**\n * Check the datatype of a given object\n * This is a low level implementation that should only be used by\n * parent Matrix classes such as SparseMatrix or DenseMatrix\n * This method does not validate Array Matrix shape\n * @param array\n * @return string\n */\n\n\nexports.factory = factory;","module.exports = require('./lib/core/core')\n","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n\n  var algorithm13 = function algorithm13(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b arrays\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // c arrays\n\n    var csize = []; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // validate each one of the dimension sizes\n\n\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      } // update dimension in c\n\n\n      csize[s] = asize[s];\n    } // datatype\n\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix\n\n    return new DenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  }; // recursive function\n\n\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n\n    return cv;\n  }\n\n  return algorithm13;\n}\n\nexports.name = 'algorithm13';\nexports.factory = factory;"],"sourceRoot":""}